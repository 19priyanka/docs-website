{
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-firebase-database-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-firebase-hosting-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-firebase-storage-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.373,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-firestore-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.373,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-load-balancing-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-pubsub-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-router-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-run-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3729,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-spanner-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3729,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-sql-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-storage-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3728,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-datastore-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3728,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-direct-interconnect-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3728,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.3706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-kubernetes-engine-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37277,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37057,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.37595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37277,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Cloud Composer monitoring integration",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Composer Environment data",
        "Composer Workflow data"
      ],
      "title": "Google Cloud Composer monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a2cbc05bfa686de458fed2748ed111064b903ad4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-composer-monitoring-integration/",
      "published_at": "2021-09-26T15:45:13Z",
      "updated_at": "2021-09-14T20:39:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Composer data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Composer integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider Environment GcpComposerEnvironmentSample GcpComposerEnvironment Workflow GcpComposerWorkflowSample GcpComposerWorkflow For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Composer data for Environment and Workflow. Composer Environment data Metric Unit Description environment.api.Request Count Number of Composer API requests seen so far. environment.api.RequestLatencies Milliseconds Distribution of Composer API call latencies. environment.dag_processing.ParseError Count Number of errors raised during parsing DAG files. environment.dag_processing.Processes Count Number of currently running DAG parsing processes. environment.dag_processing.ProcessorTimeout Count Number of file processors terminated due to processing timeout. environment.dag_processing.TotalParseTime Seconds Number of seconds taken to scan and import all DAG files once. environment.DagbagSize Count The current dag bag size. environment.database.cpu.ReservedCores Count Number of cores reserved for the database instance. environment.database.cpu.UsageTime Seconds CPU usage time of the database instance. environment.database.cpu.Utilization Count CPU utilization ratio (from 0.0 to 1.0) of the database instance. environment.database.disk.BytesUsed Bytes Used disk space in bytes on the database instance. environment.database.disk.Quota Bytes Maximum data disk size in bytes of the database instance. environment.database.disk.Utilization Count Disk quota usage ratio (from 0.0 to 1.0) of the database instance. environment.database.memory.BytesUsed Bytes Memory usage of the database instance in bytes. environment.database.memory.Quota Bytes Maximum RAM size in bytes of the database instance. environment.database.memory.Utilization Count Memory utilization ratio (from 0.0 to 1.0) of the database instance. environment.executor.OpenSlots Count Number of open slots on executor. environment.executor.RunningTasks Count Number of running tasks on executor. environment.FinishedTaskInstance Count Overall task instances. environment.NumCeleryWorkers Count Number of Celery workers. environment.SchedulerHeartbeat Count Scheduler heartbeats. environment.TaskQueueLength Count Number of tasks in queue. environment.worker.PodEviction Count The number of Airflow worker pods evictions. environment.ZombieTaskKilled Count Number of zombie tasks killed. Composer Workflow data Metric Unit Description workflow.Run Count Number of workflow runs completed so far. workflow.RunDuration Seconds Duration of workflow run completion. workflow.task.Run Count Number of workflow tasks completed so far. workflow.task.RunDuration Seconds Duration of task completion.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Composer monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Composer monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Composer data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "60450ccd196a67293b960f66"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37053,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    },
    {
      "sections": [
        "Google Cloud Composer monitoring integration",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Composer Environment data",
        "Composer Workflow data"
      ],
      "title": "Google Cloud Composer monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a2cbc05bfa686de458fed2748ed111064b903ad4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-composer-monitoring-integration/",
      "published_at": "2021-09-26T15:45:13Z",
      "updated_at": "2021-09-14T20:39:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Composer data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Composer integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider Environment GcpComposerEnvironmentSample GcpComposerEnvironment Workflow GcpComposerWorkflowSample GcpComposerWorkflow For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Composer data for Environment and Workflow. Composer Environment data Metric Unit Description environment.api.Request Count Number of Composer API requests seen so far. environment.api.RequestLatencies Milliseconds Distribution of Composer API call latencies. environment.dag_processing.ParseError Count Number of errors raised during parsing DAG files. environment.dag_processing.Processes Count Number of currently running DAG parsing processes. environment.dag_processing.ProcessorTimeout Count Number of file processors terminated due to processing timeout. environment.dag_processing.TotalParseTime Seconds Number of seconds taken to scan and import all DAG files once. environment.DagbagSize Count The current dag bag size. environment.database.cpu.ReservedCores Count Number of cores reserved for the database instance. environment.database.cpu.UsageTime Seconds CPU usage time of the database instance. environment.database.cpu.Utilization Count CPU utilization ratio (from 0.0 to 1.0) of the database instance. environment.database.disk.BytesUsed Bytes Used disk space in bytes on the database instance. environment.database.disk.Quota Bytes Maximum data disk size in bytes of the database instance. environment.database.disk.Utilization Count Disk quota usage ratio (from 0.0 to 1.0) of the database instance. environment.database.memory.BytesUsed Bytes Memory usage of the database instance in bytes. environment.database.memory.Quota Bytes Maximum RAM size in bytes of the database instance. environment.database.memory.Utilization Count Memory utilization ratio (from 0.0 to 1.0) of the database instance. environment.executor.OpenSlots Count Number of open slots on executor. environment.executor.RunningTasks Count Number of running tasks on executor. environment.FinishedTaskInstance Count Overall task instances. environment.NumCeleryWorkers Count Number of Celery workers. environment.SchedulerHeartbeat Count Scheduler heartbeats. environment.TaskQueueLength Count Number of tasks in queue. environment.worker.PodEviction Count The number of Airflow worker pods evictions. environment.ZombieTaskKilled Count Number of zombie tasks killed. Composer Workflow data Metric Unit Description workflow.Run Count Number of workflow runs completed so far. workflow.RunDuration Seconds Duration of workflow run completion. workflow.task.Run Count Number of workflow tasks completed so far. workflow.task.RunDuration Seconds Duration of task completion.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Composer monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Composer monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Composer data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "60450ccd196a67293b960f66"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.3758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) data with New Relic <em>GCP</em> <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: <em>GCP</em>"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    },
    {
      "sections": [
        "Google Memorystore for Memcached",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Memcache MemcacheNode data"
      ],
      "title": "Google Memorystore for Memcached",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "faf3c02773c3bb62ebd194ec0e6227e83ce910ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:39:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Memcache data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Memcache integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider MemcacheNode GcpMemcacheMemcacheNodeSample GcpMemcacheMemcacheNode For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Memcache data for MemcacheNode. Memcache MemcacheNode data Metric Unit Description node.ActiveConnections Count Connections active in this Memcached node. node.CacheMemory Bytes Bytes alloted for Memcached in this node, grouped by whether that memory is used or not. node.cpu.UsageTime Seconds CPU usage time by Memcached process grouped by user and kernel mode. node.cpu.Utilization Percent CPU usage percent by Memcached node. node.Eviction Count Count of items evicted by this Memcached node. node.HitRatio Percent Hit ratio, expressed as a percentage of the total cache requests excluding set operations. Values are numbers between 0.0 and 1.0, charts display the values as a percentage between 0% and 100%. node.Items Count Items stored in this Memcached node. node.Operation Count Count of Memcached operations grouped by command and response_type (e.g. hit, miss). node.ReceivedBytes Bytes Bytes received by this Memcached node. node.SentBytes Bytes Bytes sent by this Memcached node. node.Uptime Seconds Time in seconds the node has been running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.37053,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Memcached",
        "sections": "<em>Google</em> Memorystore for Memcached",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your <em>GCP</em> Memcache data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f1644378ef0"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic": [
    {
      "sections": [
        "GCP integration metrics",
        "BETA FEATURE",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-09-26T18:10:59Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.61403,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. <em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine"
      },
      "id": "603e8a5264441f524a4e8840"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-09-26T18:10:26Z",
      "updated_at": "2021-07-27T15:50:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.03593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-09-26T18:09:29Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.55127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 313.15323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-09-26T18:10:26Z",
      "updated_at": "2021-07-27T15:50:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.03593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-09-26T18:09:29Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.55127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 313.153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "BETA FEATURE",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-09-26T18:10:59Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. <em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine"
      },
      "id": "603e8a5264441f524a4e8840"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-09-26T18:10:26Z",
      "updated_at": "2021-07-27T15:50:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.03593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 313.153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "BETA FEATURE",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-09-26T18:10:59Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. <em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine"
      },
      "id": "603e8a5264441f524a4e8840"
    },
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-09-26T18:09:29Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.55127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/getting-started/polling-intervals-gcp-integrations": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 313.15283,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "BETA FEATURE",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-09-26T18:10:59Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.61395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. <em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine"
      },
      "id": "603e8a5264441f524a4e8840"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-09-26T18:10:26Z",
      "updated_at": "2021-07-27T15:50:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.03592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/troubleshooting/gcp-integration-api-authentication-errors": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 272.27997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "BETA FEATURE",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-09-26T18:10:59Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.14021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. <em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine"
      },
      "id": "603e8a5264441f524a4e8840"
    },
    {
      "sections": [
        "Google Memorystore for Redis",
        "BETA FEATURE",
        "Activate the integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "Redis RedisInstance data"
      ],
      "title": "Google Memorystore for Redis",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "17f2891f284704c51e4e6cdac2c1b1de4b3aaf6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis/",
      "published_at": "2021-09-26T18:08:29Z",
      "updated_at": "2021-09-14T20:40:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. We offer a cloud integration for reporting your GCP Redis data to our platform. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your GCP service. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP Redis integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select the integration. Data is attached to the following event types: Entity Event Type Provider RedisInstance GcpRedisInstanceSample GcpRedisInstance For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP Redis data for RedisInstance. Redis RedisInstance data Metric Unit Description clients.Blocked Count Number of blocked clients. clients.Connected Count Number of client connections. commands.Calls Count Total number of calls for this command in one minute. commands.TotalTime Microseconds The amount of time in microseconds that this command took in the last second. commands.UsecPerCall Count Average time per call over 1 minute by command. keyspace.AvgTtl Milliseconds Average TTL for keys in this database. keyspace.Keys Count Number of keys stored in this database. keyspace.KeysWithExpiration Count Number of keys with an expiration in this database. replication.master.slaves.Lag Bytes The number of bytes that replica is behind. replication.master.slaves.Offset Bytes The number of bytes that have been acknowledged by replicas. replication.MasterReplOffset Bytes The number of bytes that master has produced and sent to replicas. To be compared with replication byte offset of replica. replication.OffsetDiff Bytes The number of bytes that have not been replicated to the replica. This is the difference between replication byte offset (master) and replication byte offset (replica). replication.Role Count Returns a value indicating the node role. 1 indicates master and 0 indicates replica. server.Uptime Seconds Uptime in seconds. stats.CacheHitRatio Count Cache Hit ratio as a fraction. stats.connections.Total Count Total number of connections accepted by the server. stats.CpuUtilization s { CPU} CPU-seconds consumed by the Redis server, broken down by system/user space and parent/child relationship. stats.EvictedKeys Count Number of evicted keys due to maxmemory limit. stats.ExpiredKeys Count Total number of key expiration events. stats.KeyspaceHits Count Number of successful lookup of keys in the main dictionary. stats.KeyspaceMisses Count Number of failed lookup of keys in the main dictionary. stats.memory.Maxmemory Bytes Maximum amount of memory Redis can consume. stats.memory.SystemMemoryOverloadDuration Microseconds The amount of time in microseconds the instance is in system memory overload mode. stats.memory.SystemMemoryUsageRatio Count Memory usage as a ratio of maximum system memory. stats.memory.Usage Bytes Total number of bytes allocated by Redis. stats.memory.UsageRatio Count Memory usage as a ratio of maximum memory. stats.NetworkTraffic Bytes Total number of bytes sent to/from redis (includes bytes from commands themselves, payload data, and delimiters). stats.pubsub.Channels Count Global number of pub/sub channels with client subscriptions. stats.pubsub.Patterns Count Global number of pub/sub pattern with client subscriptions. stats.RejectConnections Count Number of connections rejected because of maxclients limit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.66238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Memorystore for Redis",
        "sections": "<em>Google</em> Memorystore for Redis",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "BETA FEATURE This feature is currently in beta. We offer a <em>cloud</em> integration for reporting your GCP Redis data to our <em>platform</em>. Here we explain how to activate the integration and what data it collects. Activate the integration To enable the integration follow standard procedures to connect your"
      },
      "id": "604508a864441f27bd378ee1"
    }
  ],
  "/docs/integrations/grafana-integrations/get-started/grafana-support-prometheus-promql": [
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Tip",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-09-27T15:50:50Z",
      "updated_at": "2021-09-27T15:50:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. If your organization uses a domain restriction constraint, you will have to update the policy to allow the New Relic domain, C02x1gp26. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.35752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Unlink your GCP <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "To <em>start</em> receiving Google Cloud Platform (GCP) data with New Relic GCP <em>integrations</em>, connect your Google project to New Relic infrastructure monitoring. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Requirements These are the requirements for the authorization: GCP"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-09-27T15:12:44Z",
      "updated_at": "2021-09-27T15:12:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. macOS (Beta): 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.21 Red Hat Enterprise Linux (RHEL) Version 6 or higher Oracle Linux Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS macOS 10.14 (Mohave), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.80536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before installing our infrastructure agent, make sure your system and any on-host <em>integrations</em> you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        "Introduction to AWS integrations",
        "Connect AWS and New Relic",
        "Integrations and AWS costs",
        "View your AWS data",
        "Region availability"
      ],
      "title": "Introduction to AWS integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "26a36d0da0ba98b48ccaff2e574ec4e535e68844",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/introduction-aws-integrations/",
      "published_at": "2021-09-27T15:59:23Z",
      "updated_at": "2021-09-20T19:30:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Amazon integrations let you monitor your AWS data in several New Relic features. Enabling the AWS CloudWatch Metric Streams integration is the recommended solution to monitor all CloudWatch metrics from all AWS services (including custom namespaces). On top of this, additional integrations are available to get extended visibility on key AWS services beyond the available CloudWatch metrics. For a full reference of the supported metrics, please check the available CloudWatch metrics for each service in the AWS documentation pages. Connect AWS and New Relic In order to obtain AWS data, follow the procedure to connect AWS to New Relic. Additional API Polling integrations can be enabled on top of the AWS CloudWatch metric streams in order to pull data that's not available as CloudWatch metrics. The following integrations are not replaced by the metric streams: AWS Billing AWS CloudTrail AWS Health AWS Trusted Advisor AWS VPC Finally, other integrations may require additional configurations in your AWS account: AWS VPC Flow Logs AWS CloudFormation Integrations and AWS costs Keep in mind the following items: AWS CloudWatch metric streams pricing is defined based on the number of metric updates. For up-to-date pricing information check AWS CloudWatch Pricing. AWS Kinesis Data Firehose is used as the delivery method. For details, see the AWS Firehose pricing page. AWS Config can be optionally enabled in your AWS account, and used to enrich CloudWatch metrics with custom tags and resource metadata. With AWS Config, you are charged based on the number of configuration items recorded. See the AWS Config pricing page for details. If polling integrations are enabled (instead of metric streams), New Relic uses the Amazon CloudWatch API to obtain metrics from the AWS services you monitor. The number of calls to the CloudWatch API increases as you enable more integrations. Add AWS resources to those integrations, or scale those integrations across more regions. This can cause requests to the CloudWatch API to exceed the 1 million free limits granted by AWS and increase your CloudWatch bill. AWS offers enhanced monitoring for some of their services which allows for more metrics, more often. For example, see RDS enhanced monitoring costs. View your AWS data Once you follow the configuration process, data from your Amazon Web Services report directly to New Relic. AWS entities for most used services will be listed in the New Relic Explorer. Metrics and events will appear in the Data Explorer. AWS data will also be visible in the Infrastructure UI. To view your AWS data: Go to one.newrelic.com > Infrastructure > AWS. For any of the AWS integrations listed: For active streams, select the Explore your data link. OR For other integrations, browse the available dashboard or click on the Explore Data link. You can view and reuse NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Region availability Most AWS services offer regional endpoints to reduce data latency between cloud resources and applications. New Relic can obtain monitoring data from services and endpoints that are located in all AWS regions, except China.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.99142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to AWS <em>integrations</em>",
        "sections": "Introduction to AWS <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Amazon <em>integrations</em> let you monitor your AWS data in several New Relic features. Enabling the AWS CloudWatch Metric Streams integration is the recommended solution to monitor all CloudWatch metrics from all AWS services (including custom namespaces). On top of this, additional <em>integrations</em>"
      },
      "id": "603e84ec28ccbc9dffeba789"
    }
  ],
  "/docs/integrations/grafana-integrations/set-configure/configure-new-relic-prometheus-data-source-grafana": [
    {
      "sections": [
        "Grafana support with Prometheus and PromQL",
        "Use existing Grafana dashboards with New Relic",
        "Compatibility and requirements",
        "Support for PromQL",
        "Get data flowing in Grafana",
        "What’s next?"
      ],
      "title": "Grafana support with Prometheus and PromQL",
      "type": "docs",
      "tags": [
        "Integrations",
        "Grafana integrations",
        "Get started"
      ],
      "external_id": "52addf26732e0146545ae8dee6540d3bd7cab2ff",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/grafana-integrations/get-started/grafana-support-prometheus-promql/",
      "published_at": "2021-09-26T18:10:58Z",
      "updated_at": "2021-04-22T13:30:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In Grafana, you can configure New Relic as a Prometheus data source. Not only that, within Grafana you can query metrics stored in New Relic using the PromQL query language. Use existing Grafana dashboards with New Relic When you integrate Prometheus metrics with New Relic via Remote Write or the OpenMetrics Integration (2.0+) and configure New Relic as a Prometheus data source in Grafana, you can use existing Grafana dashboards and seamlessly tap into the additional monitoring, reliability, and scale we provide. Compatibility and requirements Before you begin, make sure you’ve finished integrating Prometheus metrics and are running a recent enough version of Grafana. You should have either the Remote Write or the OpenMetrics Integration ( v2.0+) set up before you can configure New Relic Prometheus data sources in Grafana. You can only configure New Relic Prometheus data sources using this method in Grafana versions 6.7.0 or newer. You will need to configure custom headers in the UI, and this isn’t possible with earlier versions. For details, see Configure New Relic as a Prometheus data source for Grafana. Support for PromQL Our Prometheus API emulates Prometheus' query APIs. We support the Prometheus query language (PromQL) through our PromQL-style query mode. We do our best to automatically translate PromQL syntax queries into the closest NRQL approximation. For more information on how this works and differences you may observe between Prometheus and New Relic, see Supported PromQL features. Get data flowing in Grafana To make your New Relic data available in Grafana, you can configure a new or existing Prometheus data source in just a couple of simple steps: In the Grafana UI, add and configure a new data source. Save the new data source and start viewing your data. What’s next? Ready to configure a Grafana data source? Read the how-to documentation for setting up the Prometheus remote write integration or the Prometheus OpenMetrics Integration. Read the how-to documentation for configuring Prometheus data sources in Grafana.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.00045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Grafana</em> support with Prometheus <em>and</em> PromQL",
        "sections": "<em>Grafana</em> support with Prometheus <em>and</em> PromQL",
        "tags": "<em>Grafana</em> <em>integrations</em>",
        "body": " integrating Prometheus metrics and are running a recent enough version of <em>Grafana</em>. You should have either the Remote Write or the OpenMetrics Integration ( v2.0+) <em>set</em> <em>up</em> before you can <em>configure</em> New Relic Prometheus data sources in <em>Grafana</em>. You can only <em>configure</em> New Relic Prometheus data sources using"
      },
      "id": "603e94de64441f9a804e8843"
    },
    {
      "sections": [
        "On-host integration configuration overview",
        "Overview of how configuration works",
        "Configuration file location",
        "Configuration formats"
      ],
      "title": "On-host integration configuration overview",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "b580c10bb0a6142dcb204639762561b65bd6ceb9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integration-configuration-overview/",
      "published_at": "2021-09-27T16:00:43Z",
      "updated_at": "2021-09-27T16:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's on-host integrations send data to the infrastructure agent, which in turn sends that data to New Relic. How integrations interact with the agent is controlled by each integration's config. Understanding more about configuration can help you troubleshoot issues with your on-host integration. Overview of how configuration works New Relic's on-host integrations are external programs executed by the infrastructure agent. Each integration monitors a specific service. An integration has, at minimum, these files: An executable that exports various types of data in a JSON format expected by the agent One or more YAML-format config files (for example, the Apache integration configuration). (We recommend linting YAML config files before use to avoid formatting issues.) Note that in addition to the specific on-host integration's configuration, you can also edit the infrastructure agent's configuration. Configuration file location With standard on-host integration installations, the configuration is located in the infrastructure agent's directory. The agent determines this config location by a setting in its own configuration file. For some implementations, the integration's configuration will be located elsewhere. For example: Services running on Kubernetes: The configuration is located in the Kubernetes integration config file. Services running on Amazon ECS: The configuration is placed in the AWS console. Configuration formats On-host integrations use two configuration formats: Standard: Starting December 2019, infrastructure agent version 1.8.0 began supporting a new format used by some integrations. This format uses a single configuration file and provides other improvements. For more details, see Standard configuration. Legacy: This is the format used by most on-host integrations. This configuration uses two files: a definition file and a configuration file. For more details, see Legacy configuration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 50.779434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> <em>configuration</em> overview",
        "sections": "On-host <em>integration</em> <em>configuration</em> overview",
        "tags": "Create <em>integrations</em>",
        "body": "New Relic&#x27;s on-host <em>integrations</em> send data to the infrastructure agent, which in turn sends that data to New Relic. How <em>integrations</em> interact with the agent is controlled by each integration&#x27;s config. Understanding more about configuration can help you troubleshoot issues with your on-host"
      },
      "id": "6044091d28ccbc95852c60cb"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 50.037148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Kubernetes <em>integration</em>: install <em>and</em> <em>configure</em>",
        "sections": "Kubernetes <em>integration</em>: install <em>and</em> <em>configure</em>",
        "tags": "<em>Integrations</em>",
        "body": " the steps in our automated installer. If you&#x27;re using signed certificates, make sure they are properly configured by using the following variables in the Daemon<em>Set</em> portion of your manifest to <em>set</em> the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value"
      },
      "id": "60450ae964441f0603378f15"
    }
  ],
  "/docs/integrations/host-integrations/get-started/introduction-host-integrations": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.71002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent on a Linux OS <em>host</em> that&#x27;s running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick <em>start</em> Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-09-27T15:12:44Z",
      "updated_at": "2021-09-27T15:12:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. macOS (Beta): 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.21 Red Hat Enterprise Linux (RHEL) Version 6 or higher Oracle Linux Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS macOS 10.14 (Mohave), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.34622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Unique <em>hostname</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before installing our infrastructure agent, make sure your system and any on-<em>host</em> <em>integrations</em> you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.30133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " infrastructure agent. Quick <em>start</em> Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to <em>get</em> <em>started</em>? Click"
      },
      "id": "603ea15d196a67d78ca83dae"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/apache-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81174,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/cassandra-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81174,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/collectd-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72223,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/couchbase-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72223,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/elasticsearch-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/f5-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration": [
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Instrument everything",
        "Get started"
      ],
      "external_id": "03217983a29af22737c1163da9ef0811b29c2bcd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/instrument-everything/get-started-new-relic-instrumentation/introduction-new-relic-integrations/",
      "published_at": "2021-09-26T16:54:05Z",
      "updated_at": "2021-07-27T09:41:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 184.32489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>integrations</em>",
        "sections": "Introduction to New Relic <em>integrations</em>",
        "tags": "<em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "body": " <em>integrations</em>, such as our APM agents. Whatever data you need to bring in, chances are that we have options for <em>your</em> environment. If you prefer to make <em>your</em> <em>own</em> solutions, we also offer tools to get you started. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    },
    {
      "sections": [
        "Cloud services integrations",
        "AWS integrations",
        "GCP integrations",
        "Azure integrations"
      ],
      "title": "Cloud services integrations",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Instrument everything",
        "Instrument core services and applications"
      ],
      "external_id": "71020c70edfb43072cbf081b3eccd3b18f9e6289",
      "image": "https://docs.newrelic.com/static/78ac85c1fc41f94776fce7235e327f01/69538/img-integration-aws%25402x.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/instrument-everything/instrument-core-services-applications/cloud-services-integrations/",
      "published_at": "2021-09-26T15:13:07Z",
      "updated_at": "2021-03-16T06:35:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic you can easily instrument your services in AWS, Google Cloud Platform, and Azure. AWS integrations Introduction to AWS integrations List of AWS integrations GCP integrations Introduction to GCP integrations List of GCP integrations Azure integrations Introduction to Azure integrations List of Azure integrations",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.60612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cloud services <em>integrations</em>",
        "sections": "Cloud services <em>integrations</em>",
        "tags": "<em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "body": "With New Relic you can easily <em>instrument</em> <em>your</em> services in AWS, Google Cloud Platform, and Azure. AWS <em>integrations</em> Introduction to AWS <em>integrations</em> List of AWS <em>integrations</em> GCP <em>integrations</em> Introduction to GCP <em>integrations</em> List of GCP <em>integrations</em> Azure <em>integrations</em> Introduction to Azure <em>integrations</em> List of Azure <em>integrations</em>"
      },
      "id": "603e829ae7b9d20bb12a080c"
    },
    {
      "sections": [
        "Get started with Full-Stack Observability",
        "You’re in control because you understand your system",
        "All the answers in one place",
        "Start anywhere"
      ],
      "title": "Get started with Full-Stack Observability",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Observe everything",
        "Get started"
      ],
      "external_id": "e7fc0bf91fa26b38a11933b6570c8b1e483a1ff9",
      "image": "https://docs.newrelic.com/static/44970161aec793f3141cfcdc0fc96a57/c1b63/observability.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/get-started-full-stack-observability/",
      "published_at": "2021-09-26T15:13:07Z",
      "updated_at": "2021-08-27T06:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Full-Stack Observability is the power of knowing what is happening in your digital system and why, at any time, whatever solution you’re using. It’s getting the whole picture of everything that enables your applications and devices to deliver value to your customers, from the container running a microservice in the cloud to a mobile website's shopping cart button. You’re in control because you understand your system New Relic helps you cut through the layers of complexity surrounding your systems by bringing together and connecting data from any instrumented source and environment, without having to jump between tools. You can interrogate your data for patterns, discover them using our data platform, or get proactive results from our machine learning tools. New Relic provides answers to essential questions in one place. All the answers in one place As a full user you get access to our entire set of observability tools. All our tools are interconnected and accessible in New Relic One. All the data you bring to New Relic through agents and integrations are metrics, events, logs, and traces that feed our platform's analytics and monitoring capabilities. New Relic links your data in a meaningful way so that you can explore it, build dashboards, and set up alerts. Full-Stack Observability curated experiences allow to visualize, analyze, and troubleshoot your entire software stack in one unified platform. The New Relic Explorer consolidates all the entities in your system, and how they're connected, in a single place, so you can easily detect performance trends and issues. By automatically connecting infrastructure health with application performance and end-user behavior, you can cut through the noise to find the signal. Start anywhere Being fully-connected, New Relic allows you to start your observability journey from any element of your stack. For example, you can get to crucial infrastructure logs from traces of an application running on a problematic Kubernetes pod. Use the Explorer in New Relic One to access and observe the full stack of your software, see performance data and alerting status at a glance, and check relationships. We provide you with a simple, yet powerful visual tool to monitor all your entities, that is, anything we can identify that reports data. In the New Relic ecosystem, entities include basic components like applications, hosts, containers, or database services, but it can also refer to custom groupings of such elements. You can also create your own entities. The more entities you instrument, the more data you'll bring in. The more data you've brought to New Relic, the more you'll understand your metrics, events, logs, and traces. You want to instrument Start with Keep exploring Front-end applications Mobile applications User behavior and flows New Relic Explorer Browser monitoring Mobile monitoring Synthetic monitoring Single page monitoring Scripted browsers Containerized minions Workloads Backend applications Serverless applications New Relic Explorer Application monitoring Serverless monitoring Learning about Apdex Distributed tracing Logs in context APM data to infrastructure Workloads Infrastructure hosts and services (on-premise, cloud, orchestrated) Container environments and orchestration tools (Kubernetes, ECS, etc.) Infrastructure monitoring Infrastructure integrations Kubernetes integration Docker integration ECS integration Log forwarding APM data to infrastructure Custom integrations Kubernetes cluster explorer Infrastructure alerts Workloads",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.397125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get started with <em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "sections": "Get started with <em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "tags": "<em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "body": "<em>Full</em>-<em>Stack</em> <em>Observability</em> is the power of knowing what is happening in <em>your</em> digital system and why, at any time, whatever solution you’re using. It’s getting the whole picture of <em>everything</em> that enables <em>your</em> applications and devices to deliver value to <em>your</em> customers, from the container running"
      },
      "id": "603e891528ccbce6d9eba765"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/go-insights-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/haproxy-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/hashicorp-consul-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/kafka-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/memcached-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/mongodb-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.7858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.7858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nfs-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.721,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration": [
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    },
    {
      "sections": [
        "PostgreSQL monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "PostgreSQL users and permissions",
        "Configure the integration",
        "Important",
        "PostgreSQL Instance Settings",
        "Labels/Custom Attributes",
        "Example configuration",
        "PostgreSQL configuration collection file",
        "PostgreSQL SSL configuration collection file",
        "PostgreSQL custom query",
        "PostgreSQL custom query config file",
        "Find and use data",
        "Metric data",
        "PostgresqlDatabaseSample metrics",
        "PostgresqlIndexSample metrics",
        "PostgresqlInstanceSample metrics",
        "PostgresqlTableSample metrics",
        "PgBouncerSample metrics",
        "Inventory data",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "PostgreSQL monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "cccaec72469022ab444426365f00b809757a0052",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration/",
      "published_at": "2021-09-26T13:40:08Z",
      "updated_at": "2021-09-20T15:54:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic PostgreSQL on-host integration receives and sends inventory metrics from your PostgreSQL instance to the New Relic platform, where you can aggregate and visualize key performance metrics. Data from instances, databases, and clusters helps you find the source of problems. Read on to install the integration, and to see what data we collect. If you don't have one already, create a New Relic account. It's free, forever. Compatibility and requirements Our integration is compatible with PostgreSQL 9.0 or higher. If PostgreSQL is not running on Kubernetes or Amazon ECS, you can install the infrastructure agent on a Linux or Windows OS host where PostgreSQL is installed or on a host capable of remotely accessing where PostgreSQL is installed. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your PostgreSQL instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the PostgreSQL integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your PostgreSQL instance. Install and activate To install the PostgreSQL integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the procedures to install the infrastructure integration package using the file name nri-postgresql. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Before you restart the infrastructure agent, create a user with READ permissions on the required functions. Restart the infrastructure agent. Windows Download the nri-postgresql .MSI installer image from: https://download.newrelic.com/infrastructure_agent/windows/integrations/nri-postgresql/nri-postgresql-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-postgresql-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database pg_stat_database_conflicts pg_stat_bgwriter You can complete this step before or after you configure the postgresql-config.yml file. To create the user for the PostgreSQL integration: CREATE USER new_relic WITH PASSWORD 'PASSWORD'; GRANT SELECT ON pg_stat_database TO new_relic; GRANT SELECT ON pg_stat_database_conflicts TO new_relic; GRANT SELECT ON pg_stat_bgwriter TO new_relic; Copy This will allow the integration to gather global metrics related to the PostgreSQL instance. If you also want to obtain table and index-related metrics (for example, table size and index size), the PostgreSQL role used by the integration (new_relic) also needs SELECT permissions on the tables from which it will gather metrics from. For example, to allow the integration to collect metrics from all the tables and indexes present in the database (in the public schema), use the following: GRANT SELECT ON ALL TABLES IN SCHEMA public TO new_relic; Copy Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, postgresql-config.yml. Config options are below. For an example configuration, see the example config file. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to PostgreSQL are defined using the env section of the configuration file. These settings control the connection to your PostgreSQL instance as well as other security settings and features. The list of valid settings is described in the next section of this document. PostgreSQL Instance Settings The PostgreSQL integration collects both Metrics(M) and Inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To HOSTNAME The hostname for the PostgreSQL connection. localhost M/I PORT The port where PostgreSQL is running. 5432 M/I USERNAME The user name for the PostgreSQL connection. Required. N/A M/I PASSWORD The password for the PostgreSQL connection. Required. N/A M/I COLLECTION_LIST JSON array, a JSON object, or the string literal ALL that specifies the entities to be collected. The PostgreSQL user can only collect table and index metrics from tables it has SELECT permissions for. Required except for PgBouncer. Examples. N/A M COLLECTION_IGNORE_DATABASE_LIST JSON array of database names that will be ignored for metrics collection. Typically useful for cases where COLLECTION_LIST is set to ALL and some databases need to be ignored. '[]' M PGBOUNCER Collect pgbouncer metrics. false M ENABLE_SSL Determines if SSL is enabled. If true, ssl_cert_location and ssl_key_location are required. false M/I TRUST_SERVER_CERTIFICATE If true, the server certificate is not verified for SSL. If false, the server certificate identified in ssl_root_cert_location is verified. false M/I SSL_ROOT_CERT_LOCATION Absolute path to PEM-encoded root certificate file. Required if trust_server_certificate is false. N/A M/I SSL_CERT_LOCATION Absolute path to PEM-encoded client certificate file. Required if enable_ssl is true. N/A M/I SSL_KEY_LOCATION Absolute path to PEM-encoded client key file. Required if enable_ssl is true. N/A M/I TIMEOUT maximum wait for connection, in seconds. Set to 0 for no timeout. 10 M/I DATABASE The PostgreSQL database to connect to. postgres M/I CUSTOM_METRICS_QUERY A SQL query that required columns metric_name, metric_type, and metric_value.metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. N/A M CUSTOM_METRICS_CONFIG A path to a YAML file with a list of custom queries, along with their metric type, database, and sample name overrides. See example for details. N/A M COLLECT_DB_LOCK_METRICS Enable collecting database lock metrics, which can be performance intensive. false M COLLECT_BLOAT_METRICS Enable tablespace bloat metrics, which can be performance intensive. true M METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: postgresql Copy Example configuration Example postgresql-config.yml file configuration: PostgreSQL configuration collection file JSON array: Interpreted as a list of database names from which to collect all relevant metrics, including any tables and indexes belonging to that database. For example: collection_list: '[\"postgres\"]' JSON object: only entities specified in the object will be collected, no automatic discovery will be performed. The levels of JSON are database name -> schema name -> table name -> index name. For example: collection_list: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' ALL: collect metrics for all databases, schemas, tables, and indexes discovered. For example: collection_list: 'ALL' integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL SSL configuration collection file integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '[\"postgres\"]' ENABLE_SSL: true TRUST_SERVER_CERTIFICATE: false SSL_ROOT_CERT_LOCATION: /etc/newrelic-infra/root_cert.crt SSL_CERT_LOCATION: /etc/newrelic-infra/postgresql.crt SSL_KEY_LOCATION: /etc/newrelic-infra/postgresql.key TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_QUERY: >- select 'rows_inserted' as \"metric_name\", 'delta' as \"metric_type\", sd.tup_inserted as \"metric_value\", sd.datid as \"database_id\" from pg_stat_database sd; TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query config file An additional YAML configuration file with one or more custom SQL can be defined and the integration will need the path to the file in the CUSTOM_METRICS_CONFIG parameter. postgresql-config.yml integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_CONFIG: \"path/to/postgresql-custom-query.yml\" TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy postgresql-custom-query.yml --- queries: # Metric names are set to the column names in the query results - query: >- SELECT BG.checkpoints_timed AS scheduled_checkpoints_performed, BG.checkpoints_req AS requested_checkpoints_performed, BG.buffers_checkpoint AS buffers_written_during_checkpoint, BG.buffers_clean AS buffers_written_by_background_writer, BG.maxwritten_clean AS background_writer_stops, BG.buffers_backend AS buffers_written_by_backend, BG.buffers_alloc AS buffers_allocated FROM pg_stat_bgwriter BG; # database defaults to the auth database in the main config database: new_frontier_config_dev # If not set explicitly here, metric type will default to # 'gauge' for numbers and 'attribute' for strings metric_types: buffers_allocated: rate # If unset, sample_name defaults to PostgresqlCustomSample sample_name: MyCustomSample Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to these event types: PostgresqlDatabaseSample PostgresqlIndexSample PostgresqlInstanceSample PostgresqlTableSample PgBouncerSample You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The PostgreSQL integration collects the following database metric attributes. Some attributes apply to all PostgreSQL event types. Some metric names are prefixed with a category indicator and a period, such as db. or index. metric names. PostgresqlDatabaseSample metrics These attributes are attached to the PostgresqlDatabaseSample event type: PostgreSQLDatabaseSample attributes Description db.connections Number of backends currently connected to this database. db.maxconnections The maximum number of concurrent connections to the database server. db.commitsPerSecond Committed transactions per second. db.rollbacksPerSecond Transactions rolled back per second. db.readsPerSecond Number of disk blocks read in this database per second. db.bufferHitsPerSecond Number of times disk blocks were found already in the buffer cache, so that a read was not necessary. This only includes hits in the PostgreSQL buffer cache, not the operating system's file system cache. db.rowsReturnedPerSecond Rows returned by queries per second. db.rowsFetchedPerSecond Rows fetched by queries per second. db.rowsInsertedPerSecond Rows inserted per second. db.rowsUpdatedPerSecond Rows updated per second. db.rowsDeletedPerSecond Rows deleted per second. db.conflicts.tablespacePerSecond Number of queries in this database that have been canceled due to dropped tablespaces. db.conflicts.locksPerSecond Number of queries in this database that have been canceled due to lock timeouts. db.conflicts.snapshotPerSecond Number of queries in this database that have been canceled due to old snapshots. db.conflicts.bufferpinPerSecond Number of queries in this database that have been canceled due to pinned buffers. db.conflicts.deadlockPerSecond Number of queries in this database that have been canceled due to deadlocks. db.tempFilesCreatedPerSecond Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (for example, sorting or hashing), and regardless of the log_temp_files setting. db.tempWrittenInBytesPerSecond Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting. db.deadlocksPerSecond Number of deadlocks detected in this database. db.readTimeInMillisecondsPerSecond Time spent reading data file blocks by backends in this database, in milliseconds. db.writeTimeInMillisecondsPerSecond Time spent writing data file blocks by backends in this database, in milliseconds. PostgresqlIndexSample metrics These attributes are attached to the PostgresqlIndexSample event type: PostgreSQLIndexSample attributes Description index.sizeInBytes The size of an index. index.rowsReadPerSecond The number of index entries returned by scans on this index. index.rowsFetchedPerSecond The number of index entries fetched by scans on this index. PostgresqlInstanceSample metrics These attributes are attached to the PostgresqlInstanceSample event type: PostgreSQLInstanceSample attributes Description bgwriter.checkpointsScheduledPerSecond Number of scheduled checkpoints that have been performed. bgwriter.checkpointsRequestedPerSecond Number of requested checkpoints that have been performed. bgwriter.buffersWrittenForCheckpointsPerSecond Number of buffers written during checkpoints. bgwriter.buffersWrittenByBackgroundWriterPerSecond Number of buffers written by the background writer. bgwriter.backgroundWriterStopsPerSecond Number of times the background writer stopped a cleaning scan because it had written too many buffers. bgwriter.buffersWrittenByBackendPerSecond Number of buffers written directly by a backend. bgwriter.buffersAllocatedPerSecond Number of buffers allocated. bgwriter.backendFsyncCallsPerSecond Number of times a backend had to execute its own fsync call. Normally the background writer handles them even when the backend does its own write. bgwriter.checkpointWriteTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds. bgwriter.checkpointSyncTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds. PostgresqlTableSample metrics These attributes are attached to the PostgresqlTableSample event type: PostgreSQLTableSample attributes Description table.totalSizeInBytes The total disk space used by the table, including indexes and TOAST data. table.indexSizeInBytes The total disk space used by indexes attached to the specified table. table.liveRows Number of live rows. table.deadRows Number of dead rows. table.indexBlocksReadPerSecond The number of disk blocks read from all indexes on this table. table.indexBlocksHitPerSecond The number of buffer hits in all indexes on this table. table.indexToastBlocksReadPerSecond The number of disk blocks read from this table's TOAST table index. table.indexToastBlocksHitPerSecond The number of buffer hits in this table's TOAST table index. table.lastVacuum Time of last vacuum on table. table.lastAutoVacuum Time of last automatic vacuum on table. table.lastAnalyze Time of last analyze on table. table.lastAutoAnalyze Time of last automatic analyze on table. table.sequentialScansPerSecond Number of sequential scans initiated on this table per second. table.sequentialScanRowsFetchedPerSecond Number of live rows fetched by sequential scans per second. table.indexScansPerSecond Number of index scans initiated on this table. table.indexScanRowsFetchedPerSecon Number of live rows fetched by index scans. table.rowsInsertedPerSecond Rows inserted per second. table.rowsUpdatedPerSecond Rows updated per second. table.rowsDeletedPerSecond Rows deleted per second. table.bloatSizeInBytes Size of bloat in bytes. table.dataSizeInBytes Size of disk spaced used by the main fork of the table. table.bloatRatio Fraction of table data size that is bloat. PgBouncerSample metrics These attributes are attached to the PgBouncerSample event type: PgBouncerSample attributes Description pgbouncer.stats.transactionsPerSecond The transaction rate. pgbouncer.stats.queriesPerSecond The query rate. pgbouncer.stats.bytesInPerSecond The total network traffic received. pgbouncer.stats.bytesOutPerSecond The total network traffic sent. pgbouncer.stats.totalTransactionDurationInMillisecondsPerSecond Time spent by pgbouncer in transaction. pgbouncer.stats.totalQueryDurationInMillisecondsPerSecond Time spent by pgbouncer actively querying PostgreSQL. pgbouncer.stats.avgTransactionCount The average number of transactions per second in last stat period. pgbouncer.stats.avgTransactionDurationInMilliseconds The average transaction duration. pgbouncer.stats.avgQueryCount The average number of queries per second in last stat period. pgbouncer.stats.avgBytesIn The client network traffic received. pgbouncer.stats.avgBytesOut The client network traffic sent. pgbouncer.stats.avgQueryDurationInMilliseconds The average query duration. pgbouncer.pools.clientConnectionsActive Client connections linked to server connection and able to process queries. pgbouncer.pools.clientConnectionsWaiting Client connections waiting on a server connection. pgbouncer.pools.serverConnectionsActive Server connections linked to a client connection. pgbouncer.pools.serverConnectionsIdle Server connections idle and ready for a client query. pgbouncer.pools.serverConnectionsUsed Server connections idle more than server_check_delay, needing server_check_query. pgbouncer.pools.serverConnectionsTested Server connections currently running either server_reset_query or server_check_query. pgbouncer.pools.serverConnectionsLogin Server connections currently in the process of logging in. pgbouncer.pools.maxwaitInMilliseconds Age of oldest unserved client connection. Inventory data The PostgreSQL integration collects each setting from pg_settings along with its boot_val and reset_val. The inventory data appears on the Inventory page, under the config/postgresql source. Troubleshooting Here are some troubleshooting tips for the PostgreSQL integration: If you have connection problems, make sure you can connect to the cluster from the same box with psql. If you have problems collecting PgBouncer metrics, make sure you are connected to the instance through PgBouncer. Default port is 6432. If you get the error message Error creating list of entities to collect: pq: unsupported startup parameter: extra_float_digits, set ignore_startup_parameters = extra_float_digits in the PgBouncer config file. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 250.8544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PostgreSQL monitoring <em>integration</em>",
        "sections": "PostgreSQL monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database"
      },
      "id": "6043a29d28ccbc40e62c608f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/oracle-database-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78558,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/perfmon-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78558,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/port-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81097,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81097,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/rabbitmq-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8109,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8109,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81082,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "PostgreSQL monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "PostgreSQL users and permissions",
        "Configure the integration",
        "Important",
        "PostgreSQL Instance Settings",
        "Labels/Custom Attributes",
        "Example configuration",
        "PostgreSQL configuration collection file",
        "PostgreSQL SSL configuration collection file",
        "PostgreSQL custom query",
        "PostgreSQL custom query config file",
        "Find and use data",
        "Metric data",
        "PostgresqlDatabaseSample metrics",
        "PostgresqlIndexSample metrics",
        "PostgresqlInstanceSample metrics",
        "PostgresqlTableSample metrics",
        "PgBouncerSample metrics",
        "Inventory data",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "PostgreSQL monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "cccaec72469022ab444426365f00b809757a0052",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration/",
      "published_at": "2021-09-26T13:40:08Z",
      "updated_at": "2021-09-20T15:54:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic PostgreSQL on-host integration receives and sends inventory metrics from your PostgreSQL instance to the New Relic platform, where you can aggregate and visualize key performance metrics. Data from instances, databases, and clusters helps you find the source of problems. Read on to install the integration, and to see what data we collect. If you don't have one already, create a New Relic account. It's free, forever. Compatibility and requirements Our integration is compatible with PostgreSQL 9.0 or higher. If PostgreSQL is not running on Kubernetes or Amazon ECS, you can install the infrastructure agent on a Linux or Windows OS host where PostgreSQL is installed or on a host capable of remotely accessing where PostgreSQL is installed. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your PostgreSQL instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the PostgreSQL integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your PostgreSQL instance. Install and activate To install the PostgreSQL integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the procedures to install the infrastructure integration package using the file name nri-postgresql. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Before you restart the infrastructure agent, create a user with READ permissions on the required functions. Restart the infrastructure agent. Windows Download the nri-postgresql .MSI installer image from: https://download.newrelic.com/infrastructure_agent/windows/integrations/nri-postgresql/nri-postgresql-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-postgresql-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database pg_stat_database_conflicts pg_stat_bgwriter You can complete this step before or after you configure the postgresql-config.yml file. To create the user for the PostgreSQL integration: CREATE USER new_relic WITH PASSWORD 'PASSWORD'; GRANT SELECT ON pg_stat_database TO new_relic; GRANT SELECT ON pg_stat_database_conflicts TO new_relic; GRANT SELECT ON pg_stat_bgwriter TO new_relic; Copy This will allow the integration to gather global metrics related to the PostgreSQL instance. If you also want to obtain table and index-related metrics (for example, table size and index size), the PostgreSQL role used by the integration (new_relic) also needs SELECT permissions on the tables from which it will gather metrics from. For example, to allow the integration to collect metrics from all the tables and indexes present in the database (in the public schema), use the following: GRANT SELECT ON ALL TABLES IN SCHEMA public TO new_relic; Copy Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, postgresql-config.yml. Config options are below. For an example configuration, see the example config file. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to PostgreSQL are defined using the env section of the configuration file. These settings control the connection to your PostgreSQL instance as well as other security settings and features. The list of valid settings is described in the next section of this document. PostgreSQL Instance Settings The PostgreSQL integration collects both Metrics(M) and Inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To HOSTNAME The hostname for the PostgreSQL connection. localhost M/I PORT The port where PostgreSQL is running. 5432 M/I USERNAME The user name for the PostgreSQL connection. Required. N/A M/I PASSWORD The password for the PostgreSQL connection. Required. N/A M/I COLLECTION_LIST JSON array, a JSON object, or the string literal ALL that specifies the entities to be collected. The PostgreSQL user can only collect table and index metrics from tables it has SELECT permissions for. Required except for PgBouncer. Examples. N/A M COLLECTION_IGNORE_DATABASE_LIST JSON array of database names that will be ignored for metrics collection. Typically useful for cases where COLLECTION_LIST is set to ALL and some databases need to be ignored. '[]' M PGBOUNCER Collect pgbouncer metrics. false M ENABLE_SSL Determines if SSL is enabled. If true, ssl_cert_location and ssl_key_location are required. false M/I TRUST_SERVER_CERTIFICATE If true, the server certificate is not verified for SSL. If false, the server certificate identified in ssl_root_cert_location is verified. false M/I SSL_ROOT_CERT_LOCATION Absolute path to PEM-encoded root certificate file. Required if trust_server_certificate is false. N/A M/I SSL_CERT_LOCATION Absolute path to PEM-encoded client certificate file. Required if enable_ssl is true. N/A M/I SSL_KEY_LOCATION Absolute path to PEM-encoded client key file. Required if enable_ssl is true. N/A M/I TIMEOUT maximum wait for connection, in seconds. Set to 0 for no timeout. 10 M/I DATABASE The PostgreSQL database to connect to. postgres M/I CUSTOM_METRICS_QUERY A SQL query that required columns metric_name, metric_type, and metric_value.metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. N/A M CUSTOM_METRICS_CONFIG A path to a YAML file with a list of custom queries, along with their metric type, database, and sample name overrides. See example for details. N/A M COLLECT_DB_LOCK_METRICS Enable collecting database lock metrics, which can be performance intensive. false M COLLECT_BLOAT_METRICS Enable tablespace bloat metrics, which can be performance intensive. true M METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: postgresql Copy Example configuration Example postgresql-config.yml file configuration: PostgreSQL configuration collection file JSON array: Interpreted as a list of database names from which to collect all relevant metrics, including any tables and indexes belonging to that database. For example: collection_list: '[\"postgres\"]' JSON object: only entities specified in the object will be collected, no automatic discovery will be performed. The levels of JSON are database name -> schema name -> table name -> index name. For example: collection_list: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' ALL: collect metrics for all databases, schemas, tables, and indexes discovered. For example: collection_list: 'ALL' integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL SSL configuration collection file integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '[\"postgres\"]' ENABLE_SSL: true TRUST_SERVER_CERTIFICATE: false SSL_ROOT_CERT_LOCATION: /etc/newrelic-infra/root_cert.crt SSL_CERT_LOCATION: /etc/newrelic-infra/postgresql.crt SSL_KEY_LOCATION: /etc/newrelic-infra/postgresql.key TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_QUERY: >- select 'rows_inserted' as \"metric_name\", 'delta' as \"metric_type\", sd.tup_inserted as \"metric_value\", sd.datid as \"database_id\" from pg_stat_database sd; TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query config file An additional YAML configuration file with one or more custom SQL can be defined and the integration will need the path to the file in the CUSTOM_METRICS_CONFIG parameter. postgresql-config.yml integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_CONFIG: \"path/to/postgresql-custom-query.yml\" TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy postgresql-custom-query.yml --- queries: # Metric names are set to the column names in the query results - query: >- SELECT BG.checkpoints_timed AS scheduled_checkpoints_performed, BG.checkpoints_req AS requested_checkpoints_performed, BG.buffers_checkpoint AS buffers_written_during_checkpoint, BG.buffers_clean AS buffers_written_by_background_writer, BG.maxwritten_clean AS background_writer_stops, BG.buffers_backend AS buffers_written_by_backend, BG.buffers_alloc AS buffers_allocated FROM pg_stat_bgwriter BG; # database defaults to the auth database in the main config database: new_frontier_config_dev # If not set explicitly here, metric type will default to # 'gauge' for numbers and 'attribute' for strings metric_types: buffers_allocated: rate # If unset, sample_name defaults to PostgresqlCustomSample sample_name: MyCustomSample Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to these event types: PostgresqlDatabaseSample PostgresqlIndexSample PostgresqlInstanceSample PostgresqlTableSample PgBouncerSample You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The PostgreSQL integration collects the following database metric attributes. Some attributes apply to all PostgreSQL event types. Some metric names are prefixed with a category indicator and a period, such as db. or index. metric names. PostgresqlDatabaseSample metrics These attributes are attached to the PostgresqlDatabaseSample event type: PostgreSQLDatabaseSample attributes Description db.connections Number of backends currently connected to this database. db.maxconnections The maximum number of concurrent connections to the database server. db.commitsPerSecond Committed transactions per second. db.rollbacksPerSecond Transactions rolled back per second. db.readsPerSecond Number of disk blocks read in this database per second. db.bufferHitsPerSecond Number of times disk blocks were found already in the buffer cache, so that a read was not necessary. This only includes hits in the PostgreSQL buffer cache, not the operating system's file system cache. db.rowsReturnedPerSecond Rows returned by queries per second. db.rowsFetchedPerSecond Rows fetched by queries per second. db.rowsInsertedPerSecond Rows inserted per second. db.rowsUpdatedPerSecond Rows updated per second. db.rowsDeletedPerSecond Rows deleted per second. db.conflicts.tablespacePerSecond Number of queries in this database that have been canceled due to dropped tablespaces. db.conflicts.locksPerSecond Number of queries in this database that have been canceled due to lock timeouts. db.conflicts.snapshotPerSecond Number of queries in this database that have been canceled due to old snapshots. db.conflicts.bufferpinPerSecond Number of queries in this database that have been canceled due to pinned buffers. db.conflicts.deadlockPerSecond Number of queries in this database that have been canceled due to deadlocks. db.tempFilesCreatedPerSecond Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (for example, sorting or hashing), and regardless of the log_temp_files setting. db.tempWrittenInBytesPerSecond Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting. db.deadlocksPerSecond Number of deadlocks detected in this database. db.readTimeInMillisecondsPerSecond Time spent reading data file blocks by backends in this database, in milliseconds. db.writeTimeInMillisecondsPerSecond Time spent writing data file blocks by backends in this database, in milliseconds. PostgresqlIndexSample metrics These attributes are attached to the PostgresqlIndexSample event type: PostgreSQLIndexSample attributes Description index.sizeInBytes The size of an index. index.rowsReadPerSecond The number of index entries returned by scans on this index. index.rowsFetchedPerSecond The number of index entries fetched by scans on this index. PostgresqlInstanceSample metrics These attributes are attached to the PostgresqlInstanceSample event type: PostgreSQLInstanceSample attributes Description bgwriter.checkpointsScheduledPerSecond Number of scheduled checkpoints that have been performed. bgwriter.checkpointsRequestedPerSecond Number of requested checkpoints that have been performed. bgwriter.buffersWrittenForCheckpointsPerSecond Number of buffers written during checkpoints. bgwriter.buffersWrittenByBackgroundWriterPerSecond Number of buffers written by the background writer. bgwriter.backgroundWriterStopsPerSecond Number of times the background writer stopped a cleaning scan because it had written too many buffers. bgwriter.buffersWrittenByBackendPerSecond Number of buffers written directly by a backend. bgwriter.buffersAllocatedPerSecond Number of buffers allocated. bgwriter.backendFsyncCallsPerSecond Number of times a backend had to execute its own fsync call. Normally the background writer handles them even when the backend does its own write. bgwriter.checkpointWriteTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds. bgwriter.checkpointSyncTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds. PostgresqlTableSample metrics These attributes are attached to the PostgresqlTableSample event type: PostgreSQLTableSample attributes Description table.totalSizeInBytes The total disk space used by the table, including indexes and TOAST data. table.indexSizeInBytes The total disk space used by indexes attached to the specified table. table.liveRows Number of live rows. table.deadRows Number of dead rows. table.indexBlocksReadPerSecond The number of disk blocks read from all indexes on this table. table.indexBlocksHitPerSecond The number of buffer hits in all indexes on this table. table.indexToastBlocksReadPerSecond The number of disk blocks read from this table's TOAST table index. table.indexToastBlocksHitPerSecond The number of buffer hits in this table's TOAST table index. table.lastVacuum Time of last vacuum on table. table.lastAutoVacuum Time of last automatic vacuum on table. table.lastAnalyze Time of last analyze on table. table.lastAutoAnalyze Time of last automatic analyze on table. table.sequentialScansPerSecond Number of sequential scans initiated on this table per second. table.sequentialScanRowsFetchedPerSecond Number of live rows fetched by sequential scans per second. table.indexScansPerSecond Number of index scans initiated on this table. table.indexScanRowsFetchedPerSecon Number of live rows fetched by index scans. table.rowsInsertedPerSecond Rows inserted per second. table.rowsUpdatedPerSecond Rows updated per second. table.rowsDeletedPerSecond Rows deleted per second. table.bloatSizeInBytes Size of bloat in bytes. table.dataSizeInBytes Size of disk spaced used by the main fork of the table. table.bloatRatio Fraction of table data size that is bloat. PgBouncerSample metrics These attributes are attached to the PgBouncerSample event type: PgBouncerSample attributes Description pgbouncer.stats.transactionsPerSecond The transaction rate. pgbouncer.stats.queriesPerSecond The query rate. pgbouncer.stats.bytesInPerSecond The total network traffic received. pgbouncer.stats.bytesOutPerSecond The total network traffic sent. pgbouncer.stats.totalTransactionDurationInMillisecondsPerSecond Time spent by pgbouncer in transaction. pgbouncer.stats.totalQueryDurationInMillisecondsPerSecond Time spent by pgbouncer actively querying PostgreSQL. pgbouncer.stats.avgTransactionCount The average number of transactions per second in last stat period. pgbouncer.stats.avgTransactionDurationInMilliseconds The average transaction duration. pgbouncer.stats.avgQueryCount The average number of queries per second in last stat period. pgbouncer.stats.avgBytesIn The client network traffic received. pgbouncer.stats.avgBytesOut The client network traffic sent. pgbouncer.stats.avgQueryDurationInMilliseconds The average query duration. pgbouncer.pools.clientConnectionsActive Client connections linked to server connection and able to process queries. pgbouncer.pools.clientConnectionsWaiting Client connections waiting on a server connection. pgbouncer.pools.serverConnectionsActive Server connections linked to a client connection. pgbouncer.pools.serverConnectionsIdle Server connections idle and ready for a client query. pgbouncer.pools.serverConnectionsUsed Server connections idle more than server_check_delay, needing server_check_query. pgbouncer.pools.serverConnectionsTested Server connections currently running either server_reset_query or server_check_query. pgbouncer.pools.serverConnectionsLogin Server connections currently in the process of logging in. pgbouncer.pools.maxwaitInMilliseconds Age of oldest unserved client connection. Inventory data The PostgreSQL integration collects each setting from pg_settings along with its boot_val and reset_val. The inventory data appears on the Inventory page, under the config/postgresql source. Troubleshooting Here are some troubleshooting tips for the PostgreSQL integration: If you have connection problems, make sure you can connect to the cluster from the same box with psql. If you have problems collecting PgBouncer metrics, make sure you are connected to the instance through PgBouncer. Default port is 6432. If you get the error message Error creating list of entities to collect: pq: unsupported startup parameter: extra_float_digits, set ignore_startup_parameters = extra_float_digits in the PgBouncer config file. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 250.85413,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PostgreSQL monitoring <em>integration</em>",
        "sections": "PostgreSQL monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database"
      },
      "id": "6043a29d28ccbc40e62c608f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/statsd-monitoring-integration-version-2": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81082,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78537,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/unix-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72028,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.72028,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    },
    {
      "sections": [
        "PostgreSQL monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "PostgreSQL users and permissions",
        "Configure the integration",
        "Important",
        "PostgreSQL Instance Settings",
        "Labels/Custom Attributes",
        "Example configuration",
        "PostgreSQL configuration collection file",
        "PostgreSQL SSL configuration collection file",
        "PostgreSQL custom query",
        "PostgreSQL custom query config file",
        "Find and use data",
        "Metric data",
        "PostgresqlDatabaseSample metrics",
        "PostgresqlIndexSample metrics",
        "PostgresqlInstanceSample metrics",
        "PostgresqlTableSample metrics",
        "PgBouncerSample metrics",
        "Inventory data",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "PostgreSQL monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "cccaec72469022ab444426365f00b809757a0052",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration/",
      "published_at": "2021-09-26T13:40:08Z",
      "updated_at": "2021-09-20T15:54:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic PostgreSQL on-host integration receives and sends inventory metrics from your PostgreSQL instance to the New Relic platform, where you can aggregate and visualize key performance metrics. Data from instances, databases, and clusters helps you find the source of problems. Read on to install the integration, and to see what data we collect. If you don't have one already, create a New Relic account. It's free, forever. Compatibility and requirements Our integration is compatible with PostgreSQL 9.0 or higher. If PostgreSQL is not running on Kubernetes or Amazon ECS, you can install the infrastructure agent on a Linux or Windows OS host where PostgreSQL is installed or on a host capable of remotely accessing where PostgreSQL is installed. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your PostgreSQL instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the PostgreSQL integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your PostgreSQL instance. Install and activate To install the PostgreSQL integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the procedures to install the infrastructure integration package using the file name nri-postgresql. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Before you restart the infrastructure agent, create a user with READ permissions on the required functions. Restart the infrastructure agent. Windows Download the nri-postgresql .MSI installer image from: https://download.newrelic.com/infrastructure_agent/windows/integrations/nri-postgresql/nri-postgresql-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-postgresql-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp postgresql-config.yml.sample postgresql-config.yml Copy Edit the postgresql-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database pg_stat_database_conflicts pg_stat_bgwriter You can complete this step before or after you configure the postgresql-config.yml file. To create the user for the PostgreSQL integration: CREATE USER new_relic WITH PASSWORD 'PASSWORD'; GRANT SELECT ON pg_stat_database TO new_relic; GRANT SELECT ON pg_stat_database_conflicts TO new_relic; GRANT SELECT ON pg_stat_bgwriter TO new_relic; Copy This will allow the integration to gather global metrics related to the PostgreSQL instance. If you also want to obtain table and index-related metrics (for example, table size and index size), the PostgreSQL role used by the integration (new_relic) also needs SELECT permissions on the tables from which it will gather metrics from. For example, to allow the integration to collect metrics from all the tables and indexes present in the database (in the public schema), use the following: GRANT SELECT ON ALL TABLES IN SCHEMA public TO new_relic; Copy Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, postgresql-config.yml. Config options are below. For an example configuration, see the example config file. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to PostgreSQL are defined using the env section of the configuration file. These settings control the connection to your PostgreSQL instance as well as other security settings and features. The list of valid settings is described in the next section of this document. PostgreSQL Instance Settings The PostgreSQL integration collects both Metrics(M) and Inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To HOSTNAME The hostname for the PostgreSQL connection. localhost M/I PORT The port where PostgreSQL is running. 5432 M/I USERNAME The user name for the PostgreSQL connection. Required. N/A M/I PASSWORD The password for the PostgreSQL connection. Required. N/A M/I COLLECTION_LIST JSON array, a JSON object, or the string literal ALL that specifies the entities to be collected. The PostgreSQL user can only collect table and index metrics from tables it has SELECT permissions for. Required except for PgBouncer. Examples. N/A M COLLECTION_IGNORE_DATABASE_LIST JSON array of database names that will be ignored for metrics collection. Typically useful for cases where COLLECTION_LIST is set to ALL and some databases need to be ignored. '[]' M PGBOUNCER Collect pgbouncer metrics. false M ENABLE_SSL Determines if SSL is enabled. If true, ssl_cert_location and ssl_key_location are required. false M/I TRUST_SERVER_CERTIFICATE If true, the server certificate is not verified for SSL. If false, the server certificate identified in ssl_root_cert_location is verified. false M/I SSL_ROOT_CERT_LOCATION Absolute path to PEM-encoded root certificate file. Required if trust_server_certificate is false. N/A M/I SSL_CERT_LOCATION Absolute path to PEM-encoded client certificate file. Required if enable_ssl is true. N/A M/I SSL_KEY_LOCATION Absolute path to PEM-encoded client key file. Required if enable_ssl is true. N/A M/I TIMEOUT maximum wait for connection, in seconds. Set to 0 for no timeout. 10 M/I DATABASE The PostgreSQL database to connect to. postgres M/I CUSTOM_METRICS_QUERY A SQL query that required columns metric_name, metric_type, and metric_value.metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. N/A M CUSTOM_METRICS_CONFIG A path to a YAML file with a list of custom queries, along with their metric type, database, and sample name overrides. See example for details. N/A M COLLECT_DB_LOCK_METRICS Enable collecting database lock metrics, which can be performance intensive. false M COLLECT_BLOAT_METRICS Enable tablespace bloat metrics, which can be performance intensive. true M METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: postgresql Copy Example configuration Example postgresql-config.yml file configuration: PostgreSQL configuration collection file JSON array: Interpreted as a list of database names from which to collect all relevant metrics, including any tables and indexes belonging to that database. For example: collection_list: '[\"postgres\"]' JSON object: only entities specified in the object will be collected, no automatic discovery will be performed. The levels of JSON are database name -> schema name -> table name -> index name. For example: collection_list: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' ALL: collect metrics for all databases, schemas, tables, and indexes discovered. For example: collection_list: 'ALL' integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '{\"postgres\":{\"public\":{\"pg_table1\":[\"pg_index1\",\"pg_index2\"],\"pg_table2\":[]}}}' TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL SSL configuration collection file integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: '[\"postgres\"]' ENABLE_SSL: true TRUST_SERVER_CERTIFICATE: false SSL_ROOT_CERT_LOCATION: /etc/newrelic-infra/root_cert.crt SSL_CERT_LOCATION: /etc/newrelic-infra/postgresql.crt SSL_KEY_LOCATION: /etc/newrelic-infra/postgresql.key TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_QUERY: >- select 'rows_inserted' as \"metric_name\", 'delta' as \"metric_type\", sd.tup_inserted as \"metric_value\", sd.datid as \"database_id\" from pg_stat_database sd; TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy PostgreSQL custom query config file An additional YAML configuration file with one or more custom SQL can be defined and the integration will need the path to the file in the CUSTOM_METRICS_CONFIG parameter. postgresql-config.yml integrations: - name: nri-mongodb env: USERNAME: postgres PASSWORD: pass HOSTNAME: psql-sample.localnet PORT: 6432 DATABASE: postgres COLLECT_DB_LOCK_METRICS: false COLLECTION_LIST: ALL CUSTOM_METRICS_CONFIG: \"path/to/postgresql-custom-query.yml\" TIMEOUT: 10 interval: 15s labels: env: production role: postgresql inventory_source: config/postgresql Copy postgresql-custom-query.yml --- queries: # Metric names are set to the column names in the query results - query: >- SELECT BG.checkpoints_timed AS scheduled_checkpoints_performed, BG.checkpoints_req AS requested_checkpoints_performed, BG.buffers_checkpoint AS buffers_written_during_checkpoint, BG.buffers_clean AS buffers_written_by_background_writer, BG.maxwritten_clean AS background_writer_stops, BG.buffers_backend AS buffers_written_by_backend, BG.buffers_alloc AS buffers_allocated FROM pg_stat_bgwriter BG; # database defaults to the auth database in the main config database: new_frontier_config_dev # If not set explicitly here, metric type will default to # 'gauge' for numbers and 'attribute' for strings metric_types: buffers_allocated: rate # If unset, sample_name defaults to PostgresqlCustomSample sample_name: MyCustomSample Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to these event types: PostgresqlDatabaseSample PostgresqlIndexSample PostgresqlInstanceSample PostgresqlTableSample PgBouncerSample You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The PostgreSQL integration collects the following database metric attributes. Some attributes apply to all PostgreSQL event types. Some metric names are prefixed with a category indicator and a period, such as db. or index. metric names. PostgresqlDatabaseSample metrics These attributes are attached to the PostgresqlDatabaseSample event type: PostgreSQLDatabaseSample attributes Description db.connections Number of backends currently connected to this database. db.maxconnections The maximum number of concurrent connections to the database server. db.commitsPerSecond Committed transactions per second. db.rollbacksPerSecond Transactions rolled back per second. db.readsPerSecond Number of disk blocks read in this database per second. db.bufferHitsPerSecond Number of times disk blocks were found already in the buffer cache, so that a read was not necessary. This only includes hits in the PostgreSQL buffer cache, not the operating system's file system cache. db.rowsReturnedPerSecond Rows returned by queries per second. db.rowsFetchedPerSecond Rows fetched by queries per second. db.rowsInsertedPerSecond Rows inserted per second. db.rowsUpdatedPerSecond Rows updated per second. db.rowsDeletedPerSecond Rows deleted per second. db.conflicts.tablespacePerSecond Number of queries in this database that have been canceled due to dropped tablespaces. db.conflicts.locksPerSecond Number of queries in this database that have been canceled due to lock timeouts. db.conflicts.snapshotPerSecond Number of queries in this database that have been canceled due to old snapshots. db.conflicts.bufferpinPerSecond Number of queries in this database that have been canceled due to pinned buffers. db.conflicts.deadlockPerSecond Number of queries in this database that have been canceled due to deadlocks. db.tempFilesCreatedPerSecond Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (for example, sorting or hashing), and regardless of the log_temp_files setting. db.tempWrittenInBytesPerSecond Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting. db.deadlocksPerSecond Number of deadlocks detected in this database. db.readTimeInMillisecondsPerSecond Time spent reading data file blocks by backends in this database, in milliseconds. db.writeTimeInMillisecondsPerSecond Time spent writing data file blocks by backends in this database, in milliseconds. PostgresqlIndexSample metrics These attributes are attached to the PostgresqlIndexSample event type: PostgreSQLIndexSample attributes Description index.sizeInBytes The size of an index. index.rowsReadPerSecond The number of index entries returned by scans on this index. index.rowsFetchedPerSecond The number of index entries fetched by scans on this index. PostgresqlInstanceSample metrics These attributes are attached to the PostgresqlInstanceSample event type: PostgreSQLInstanceSample attributes Description bgwriter.checkpointsScheduledPerSecond Number of scheduled checkpoints that have been performed. bgwriter.checkpointsRequestedPerSecond Number of requested checkpoints that have been performed. bgwriter.buffersWrittenForCheckpointsPerSecond Number of buffers written during checkpoints. bgwriter.buffersWrittenByBackgroundWriterPerSecond Number of buffers written by the background writer. bgwriter.backgroundWriterStopsPerSecond Number of times the background writer stopped a cleaning scan because it had written too many buffers. bgwriter.buffersWrittenByBackendPerSecond Number of buffers written directly by a backend. bgwriter.buffersAllocatedPerSecond Number of buffers allocated. bgwriter.backendFsyncCallsPerSecond Number of times a backend had to execute its own fsync call. Normally the background writer handles them even when the backend does its own write. bgwriter.checkpointWriteTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds. bgwriter.checkpointSyncTimeInMillisecondsPerSecond Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds. PostgresqlTableSample metrics These attributes are attached to the PostgresqlTableSample event type: PostgreSQLTableSample attributes Description table.totalSizeInBytes The total disk space used by the table, including indexes and TOAST data. table.indexSizeInBytes The total disk space used by indexes attached to the specified table. table.liveRows Number of live rows. table.deadRows Number of dead rows. table.indexBlocksReadPerSecond The number of disk blocks read from all indexes on this table. table.indexBlocksHitPerSecond The number of buffer hits in all indexes on this table. table.indexToastBlocksReadPerSecond The number of disk blocks read from this table's TOAST table index. table.indexToastBlocksHitPerSecond The number of buffer hits in this table's TOAST table index. table.lastVacuum Time of last vacuum on table. table.lastAutoVacuum Time of last automatic vacuum on table. table.lastAnalyze Time of last analyze on table. table.lastAutoAnalyze Time of last automatic analyze on table. table.sequentialScansPerSecond Number of sequential scans initiated on this table per second. table.sequentialScanRowsFetchedPerSecond Number of live rows fetched by sequential scans per second. table.indexScansPerSecond Number of index scans initiated on this table. table.indexScanRowsFetchedPerSecon Number of live rows fetched by index scans. table.rowsInsertedPerSecond Rows inserted per second. table.rowsUpdatedPerSecond Rows updated per second. table.rowsDeletedPerSecond Rows deleted per second. table.bloatSizeInBytes Size of bloat in bytes. table.dataSizeInBytes Size of disk spaced used by the main fork of the table. table.bloatRatio Fraction of table data size that is bloat. PgBouncerSample metrics These attributes are attached to the PgBouncerSample event type: PgBouncerSample attributes Description pgbouncer.stats.transactionsPerSecond The transaction rate. pgbouncer.stats.queriesPerSecond The query rate. pgbouncer.stats.bytesInPerSecond The total network traffic received. pgbouncer.stats.bytesOutPerSecond The total network traffic sent. pgbouncer.stats.totalTransactionDurationInMillisecondsPerSecond Time spent by pgbouncer in transaction. pgbouncer.stats.totalQueryDurationInMillisecondsPerSecond Time spent by pgbouncer actively querying PostgreSQL. pgbouncer.stats.avgTransactionCount The average number of transactions per second in last stat period. pgbouncer.stats.avgTransactionDurationInMilliseconds The average transaction duration. pgbouncer.stats.avgQueryCount The average number of queries per second in last stat period. pgbouncer.stats.avgBytesIn The client network traffic received. pgbouncer.stats.avgBytesOut The client network traffic sent. pgbouncer.stats.avgQueryDurationInMilliseconds The average query duration. pgbouncer.pools.clientConnectionsActive Client connections linked to server connection and able to process queries. pgbouncer.pools.clientConnectionsWaiting Client connections waiting on a server connection. pgbouncer.pools.serverConnectionsActive Server connections linked to a client connection. pgbouncer.pools.serverConnectionsIdle Server connections idle and ready for a client query. pgbouncer.pools.serverConnectionsUsed Server connections idle more than server_check_delay, needing server_check_query. pgbouncer.pools.serverConnectionsTested Server connections currently running either server_reset_query or server_check_query. pgbouncer.pools.serverConnectionsLogin Server connections currently in the process of logging in. pgbouncer.pools.maxwaitInMilliseconds Age of oldest unserved client connection. Inventory data The PostgreSQL integration collects each setting from pg_settings along with its boot_val and reset_val. The inventory data appears on the Inventory page, under the config/postgresql source. Troubleshooting Here are some troubleshooting tips for the PostgreSQL integration: If you have connection problems, make sure you can connect to the cluster from the same box with psql. If you have problems collecting PgBouncer metrics, make sure you are connected to the instance through PgBouncer. Default port is 6432. If you get the error message Error creating list of entities to collect: pq: unsupported startup parameter: extra_float_digits, set ignore_startup_parameters = extra_float_digits in the PgBouncer config file. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 250.85406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PostgreSQL monitoring <em>integration</em>",
        "sections": "PostgreSQL monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. PostgreSQL users and permissions Create a user with SELECT permissions on: pg_stat_database"
      },
      "id": "6043a29d28ccbc40e62c608f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/vmware-tanzu-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/vmware-vsphere-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.8107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/windows-services-integration": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/infrastructure-release-notes/infrastructure-agent-release-notes/new-relic-infrastructure-agent-1121/",
      "sections": [
        "Infrastructure agent v1.12.1",
        "Notes",
        "Added",
        "Fixed"
      ],
      "published_at": "2021-09-27T07:20:53Z",
      "title": "Infrastructure agent v1.12.1",
      "updated_at": "2021-03-13T03:15:26Z",
      "type": "docs",
      "external_id": "93e606131035b520d2d5f6be4220698349929793",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes A new version of the agent has been released. Follow standard procedures to update your Infrastructure agent. Added Beta version (v0.1.0-beta) of nri-winservices is now packaged with the agent. For more information, see the Windows services integration documentation. Fixed d35cbe7 Fixed the sending of heartbeat samples to New Relic. 6503df0 Inventory is now fully re-sent if the host has been offline for 24 hours or if the agent ID changes. 4ccd9ff Fixed issue where running Docker auto discovery was leaking file descriptors.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 455.86432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "Notes A new version of the agent has been released. Follow standard procedures to update your Infrastructure agent. Added Beta version (v0.1.0-beta) of nri-winservices is now packaged with the agent. For more information, see the <em>Windows</em> <em>services</em> <em>integration</em> documentation. Fixed d35cbe7 Fixed"
      },
      "id": "6044211fe7b9d21ae05799cb"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-09-27T15:12:44Z",
      "updated_at": "2021-09-27T15:12:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. macOS (Beta): 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.21 Red Hat Enterprise Linux (RHEL) Version 6 or higher Oracle Linux Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS macOS 10.14 (Mohave), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.307205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ": Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) <em>Windows</em>: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        "On-host integrations: Legacy configuration format",
        "Important",
        "Configuration file structure",
        "Definition file",
        "Definition file header",
        "Definition file commands",
        "Configuration file",
        "Tip",
        "Config file field definitions"
      ],
      "title": "On-host integrations: Legacy configuration format",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "8f1d23b9999a433e49ff5c2ea7d9d9db95eb57a3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integrations-legacy-configuration-format/",
      "published_at": "2021-09-27T16:02:10Z",
      "updated_at": "2021-09-26T11:14:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Infrastructure on-host integrations can use one of two types of configuration formats. This document explains the older, legacy configuration format. Important New Relic recommends using the new standard improved configuration format. To update your configuration file to this new format, check the update section For an introduction to configuration, see Config overview. Configuration file structure An on-host integration that uses the standard configuration format requires two configuration files: A definition file A configuration file Definition file The definition file has a naming format like INTEGRATION_NAME-definition.yml. This file provides descriptive information about the integration, such as: the version of the JSON protocol it supports, a list of commands it can execute, and arguments that it accepts. It lives in this directory: Linux: /var/db/newrelic-infra/newrelic-integrations Copy Windows: C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations Copy Here's an example of an NGINX integration definition file with two command sections on a Linux system: name: com.myorg.nginx protocol_version: 2 description: Collect metric and configuration data from NGINX os: linux commands: metrics: command: - myorg-nginx - --metrics interval: 15 inventory: command: - myorg-nginx - --inventory interval: 120 prefix: integration/myorg-nginx Copy A definition file can be broken down into two parts: The header The commands section Definition file header Here are explanations of a definition file's header elements: Definition header field Description name Required. A unique name name to identify the integration for logging, internal metrics, etc. When the agent loads the config file, New Relic uses the name to look up the integration in the agent's registry. protocol_version Required. The version number of the protocol. New Relic uses this to ensure compatibility between the integration and the agent. If the agent does not recognize an integration's version, it will filter out that integration and create a log message. The current version of the JSON protocol is 2. For more on protocol changes, see SDK changes. description Optional. Human-friendly explanation of what the integration does. os Optional. The operating system where the integration runs. New Relic uses this to filter integrations that you intend to run only on specific operating systems. Default: Run the integration regardless of the os value. To restrict the integration to a specific operating system, use either of these options: linux windows Definition file commands After the header is a list of commands. The commands section defines: One or more independent operating modes for the executable The runtime data required for it to be executed The commands section is a YAML map of command definitions, where each key is the unique alias name of the command in the integration's config file that specifies the executable to run. Definition commands Description command Required. The actual command line to be executed as a YAML array of command parts. These are assembled to run the actual command. For simple commands, the array might be only a single element. Additional command rules include: command arguments: The command and any command line arguments that are shared for all instances of the integration configuration. command execution: The command will be executed in the same directory as the definition file. command path: Any commands available on the host's $PATH can be used. Executables located in the same directory as the definition file, or in a subdirectory of it, can be executed using a relative path. For example: Linux: To run an executable called myorg-nginx in the same directory as the definition file, you could use myorg-nginx or ./myorg-nginx. Linux systems will execute myorg-nginx as if the user used ./myorg-nginx. Windows: To run an executable called myorg-nginx.exe in the same directory as the definition file, you could use \\myorg-nginx.exe or .\\myorg-nginx.exe. Windows systems writing myorg-nginx.exe will be executed as if indicating the current path: .\\myorg-nginx.exe. To use a command installed inside a directory on the host's $PATH, simply use the command name. Example: python. To run any other executable which is neither on the host's $PATH nor within the integration's directory, use an absolute path to the executable. Example: /opt/jdk/bin/java. If the given executable name exists within the integration's directory but also exists elsewhere on the system $PATH, the version in the integration's directory takes precedence. interval Optional. The number of seconds between two consecutive executions of the command, in particular between the end of the previous execution and the start of the next execution. Default for metric polling: 30 seconds. Minimum (floor): 15 seconds. Alerts: For metrics being used for alerts, use an interval of 30 seconds or less. prefix Optional. The categorization of the inventory in the form of category/short_integration_name. Example: integration/myorg-nginx. The prefix is not a platform-specific path. The forward slash is the correct separator between the category and short_integration_name. The prefix can have a maximum of two levels. Otherwise inventory will not be reported. Default value if not set: integration/integration_name. Configuration file The configuration file has a naming format like INTEGRATION_NAME-config.yml. This file specifies which executables to run and the parameters required to run them. It lives in this directory: Linux: /etc/newrelic-infra/integrations.d/ Copy Windows: C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d Copy Tip We recommend linting the YAML configuration files before using them to avoid formatting issues. Here's an example of a config file with one instance defined. Explanations of these fields are explained below the example. integration_name: com.myorg.nginx instances: - name: nginx1.myorg.com-metrics command: metrics arguments: status_url: http://127.0.0.1/status labels: environment: production role: load_balancer Copy Another example of a config file with two instances defined. integration_name: com.myorg.nginx instances: - name: nginx1.myorg.com-metrics command: metrics arguments: status_url: http://one.url/status labels: environment: production role: load_balancer - name: nginx2.myorg.com-metrics command: metrics arguments: status_url: http://another.url/status labels: environment: production role: load_balancer Copy Config file field definitions Config file field Description integration_name Required. This is the header and is used to identify which executables to run. This name must exactly match the name specified in the integration's definition file. Recommendation: To ensure unique names, use reverse domain name notation. name Required. This is the name for the specific invocation (instance) of the integration. This is used to help identify any log messages generated by this integration and is also useful for troubleshooting. command Required. This is the command to be executed. This must exactly match one of the unique alias names specified in the integration's definition file. arguments Optional. A YAML object where: Keys: The argument name. Transformed to upper case when set as environment variable. Values: The argument values. Passed through as is. The arguments are made available to an integration as a set of environment variables. Arguments in the config file cannot be capitalised and should use underscores to separate words. labels Optional. A YAML object where: Keys: The label name. Values: The defined label value. integration_user Optional. String with the name the agent will use for executing the integration binary. Default: depends on the usermode. By default, integrations are executed with the same user that's running the integration agent, nri-agent for privileged and unprivileged mode and root user for root mode. When present, the Infrastructure agent will execute the integration binary as the specified user. For example, to run the integration binary as the root user when running the agent in a usermode different than root, just add integration_user: root to the configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.61255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em>: Legacy configuration format",
        "sections": "On-host <em>integrations</em>: Legacy configuration format",
        "tags": "Create <em>integrations</em>",
        "body": "-integrations Copy <em>Windows</em>: C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations Copy Here&#x27;s an example of an NGINX <em>integration</em> definition file with two command sections on a Linux system: name: com.myorg.nginx protocol_version: 2 description: Collect metric and configuration data from"
      },
      "id": "61505613196a676ce3b70d9a"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/zookeeper-monitoring-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.71997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.81062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Varnish Cache monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.78517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    }
  ],
  "/docs/integrations/host-integrations/installation/container-auto-discovery-host-integrations": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91718,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "<em>Install</em> and activate the <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.4671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "Nagios monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Nagios instance settings",
        "Service checks config file",
        "Labels/custom attributes",
        "Permissions",
        "Linux permissions",
        "Windows permissions",
        "Example configurations",
        "Example nagios-config.yml configuration",
        "Example nagios-service-checks.yml configuration",
        "Find and use data",
        "Metric data",
        "Nagios service check sample metrics",
        "Troubleshooting",
        "Config parsing failed error",
        "Solution:",
        "Cause:",
        "Check the source code"
      ],
      "title": "Nagios monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "98062fcf3378e6a1b075d73961c457be1f2b3e16",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration/",
      "published_at": "2021-09-26T18:15:13Z",
      "updated_at": "2021-09-14T20:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Nagios integration lets you use your service checks directly, without the need to run a Nagios instance. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with any existing service that conform to the Nagios Plugin API. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows OS version compatible with New Relic's infrastructure agent. Quick start Instrument your Nagios instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Nagios integration: Linux installation Follow the instructions for installing an integration, using the file name nri-nagios. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp nagios-config.yml.sample nagios-config.yml Copy Create a copy of the sample service checks file by running: sudo cp nagios-service-checks.yml.sample nagios-service-checks.yml Copy Edit the nagios-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-nagios .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-nagios/nri-nagios-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-nagios-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp nagios-config.yml.sample nagios-config.yml Copy Edit the nagios-config.yml file as described in the configuration settings. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a nagios-service-checks.yml file that describes the service checks to be run by the integration. For an example configuration, see the example service checks file. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For example configurations, see the nagios-config.yml and nagios-service-checks.yml examples. Our configuration files have common settings used in all of our integrations, such as interval, timeout, andinventory_source, among others. For more on these common settings, see this list of configuration properties. Specific settings related to Nagios are defined using the env section of the configuration file. These settings control the connection to your Nagios instance as well as other security settings and features. Nagios instance settings Setting Description Default SERVICE_CHECKS_CONFIG This points to a yaml file containing definitions of the service checks that will be run by the integration. Required. N/A CONCURRENCY The number of service checks to be run concurrently. 1 OUTPUT_TABLE_NAME The name of the table where the service check results are saved. NagiosServiceCheckSample Service checks config file The service_checks_config yaml file contains the top-level array service_checks. Each service check must contain both a name and a command. Key Description name The naming convention is not specific, and allows for easy recognition in the Infrastructure UI. command The command is an array of strings, with the first position containing the path to the executable and the remaining positions containing the arguments to the executable. labels A collection of key: value pairs which help to identify and group service checks in Insights. parse_output Attempts to parse the output of service checks that conform to the Nagios Plugin API spec. Default: false. These setting values can be defined in several ways: Add the values directly in the config file. Replace the values from environment variables using the {{}} notation. This requires Infrastructure agent v1.14.0+. Read more here. Use secrets management to protect sensible information, such as passwords, so that it's not exposed in plain text in the configuration file. For more information, see secrets management. Labels/custom attributes Environment variables can be used to control configuration settings, such as your license key, and are then passed to the Infrastructure agent. For instructions on how to use the passthrough feature, see configure the Infrastructure agent. You can also decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics. You can use these labels to query, filter, or group your metrics. Our default sample config file includes examples with labels, you can remove, modify, or add new ones of your choice. labels: env: production role: nagios Copy Permissions Non-configurable commands are run by the infrastructure agent, which itself is run by the root user. For the integration to run properly, ensure that the permissions on the yaml file are appropriately restrictive as indicated below: Linux permissions Set the user permissions flag to 0600, restricting read and write privileges to the file owner. If permissions do not meet this requirement, an error will be logged and the integration will fail to run. Windows permissions By default, the agent and any commands in the yaml file run as an Administrator. As the integration is unable to check permissions, it is up to the user to appropriately restrict permissions for the file. Example configurations Example file configurations: Example nagios-config.yml configuration integrations: - name: nri-nagios env: CONCURRENCY: \"1\" SERVICE_CHECKS_CONFIG: /etc/newrelic-infra/integrations.d/nagios-service-checks.yml interval: 15s Copy Example nagios-service-checks.yml configuration service_checks: - name: check_users command: [\"/usr/local/nagios/libexec/check_users\", \"-w\", \"5\", \"-c\", \"10\"] parse_output: true labels: env: staging key1: val1 - name: check_yum command: [\"/usr/local/nagios/libexec/check_yum\"] Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Nagios integration links. Nagios data is attached to the NagiosServiceCheckSample event type. For more on how to find and use your data, see Understand integration data. Metric data The Nagios integration collects the following metric data attributes. Nagios service check sample metrics These attributes can be found by querying the NagiosServiceCheckSample event types in Insights. Metric Description serviceCheck.command The command used to run the service check. serviceCheck.error The standard error (stderr) output of the service check. serviceCheck.longServiceOutput The portion of the message that is parsed by Nagios as $LONGSERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.message The standard output (stdout) of the service check. serviceCheck.name The descriptive name of the service check being performed. serviceCheck.serviceOutput The portion of the message that is parsed by Nagios as $SERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.status The return code of the service check. Options: 0 = Ok 1 = Warning 2 = Critical 3 = Unknown * Any additional metrics defined and reported by the service check. Only enabled if parse_output is set. Troubleshooting Troubleshooting tips: Config parsing failed error The following error appears in the log file: Config parsing failed: service checks file permissions are not restrictive enough. Required file permissions are 0600. See documentation for details Copy Solution: Set the user permissions flag to 0600, restricting read and write privileges to the file owner. Cause: If the file is not owned by the root user or the file can be written to by a user other than the root user, the integration will allow users to run arbitrary commands as though they are a root user. If permissions do not meet the requirement, an error will be logged and the integration will fail to run. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.54391,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Nagios monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration&#x27;s YAML-format configuration is where you can"
      },
      "id": "603eb881e7b9d2728a2a07b5"
    }
  ],
  "/docs/integrations/host-integrations/installation/install-infrastructure-host-integrations": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91718,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "<em>Install</em> and activate the <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.4671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "Nagios monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Nagios instance settings",
        "Service checks config file",
        "Labels/custom attributes",
        "Permissions",
        "Linux permissions",
        "Windows permissions",
        "Example configurations",
        "Example nagios-config.yml configuration",
        "Example nagios-service-checks.yml configuration",
        "Find and use data",
        "Metric data",
        "Nagios service check sample metrics",
        "Troubleshooting",
        "Config parsing failed error",
        "Solution:",
        "Cause:",
        "Check the source code"
      ],
      "title": "Nagios monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "98062fcf3378e6a1b075d73961c457be1f2b3e16",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration/",
      "published_at": "2021-09-26T18:15:13Z",
      "updated_at": "2021-09-14T20:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Nagios integration lets you use your service checks directly, without the need to run a Nagios instance. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with any existing service that conform to the Nagios Plugin API. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows OS version compatible with New Relic's infrastructure agent. Quick start Instrument your Nagios instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Nagios integration: Linux installation Follow the instructions for installing an integration, using the file name nri-nagios. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp nagios-config.yml.sample nagios-config.yml Copy Create a copy of the sample service checks file by running: sudo cp nagios-service-checks.yml.sample nagios-service-checks.yml Copy Edit the nagios-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-nagios .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-nagios/nri-nagios-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-nagios-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp nagios-config.yml.sample nagios-config.yml Copy Edit the nagios-config.yml file as described in the configuration settings. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a nagios-service-checks.yml file that describes the service checks to be run by the integration. For an example configuration, see the example service checks file. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For example configurations, see the nagios-config.yml and nagios-service-checks.yml examples. Our configuration files have common settings used in all of our integrations, such as interval, timeout, andinventory_source, among others. For more on these common settings, see this list of configuration properties. Specific settings related to Nagios are defined using the env section of the configuration file. These settings control the connection to your Nagios instance as well as other security settings and features. Nagios instance settings Setting Description Default SERVICE_CHECKS_CONFIG This points to a yaml file containing definitions of the service checks that will be run by the integration. Required. N/A CONCURRENCY The number of service checks to be run concurrently. 1 OUTPUT_TABLE_NAME The name of the table where the service check results are saved. NagiosServiceCheckSample Service checks config file The service_checks_config yaml file contains the top-level array service_checks. Each service check must contain both a name and a command. Key Description name The naming convention is not specific, and allows for easy recognition in the Infrastructure UI. command The command is an array of strings, with the first position containing the path to the executable and the remaining positions containing the arguments to the executable. labels A collection of key: value pairs which help to identify and group service checks in Insights. parse_output Attempts to parse the output of service checks that conform to the Nagios Plugin API spec. Default: false. These setting values can be defined in several ways: Add the values directly in the config file. Replace the values from environment variables using the {{}} notation. This requires Infrastructure agent v1.14.0+. Read more here. Use secrets management to protect sensible information, such as passwords, so that it's not exposed in plain text in the configuration file. For more information, see secrets management. Labels/custom attributes Environment variables can be used to control configuration settings, such as your license key, and are then passed to the Infrastructure agent. For instructions on how to use the passthrough feature, see configure the Infrastructure agent. You can also decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics. You can use these labels to query, filter, or group your metrics. Our default sample config file includes examples with labels, you can remove, modify, or add new ones of your choice. labels: env: production role: nagios Copy Permissions Non-configurable commands are run by the infrastructure agent, which itself is run by the root user. For the integration to run properly, ensure that the permissions on the yaml file are appropriately restrictive as indicated below: Linux permissions Set the user permissions flag to 0600, restricting read and write privileges to the file owner. If permissions do not meet this requirement, an error will be logged and the integration will fail to run. Windows permissions By default, the agent and any commands in the yaml file run as an Administrator. As the integration is unable to check permissions, it is up to the user to appropriately restrict permissions for the file. Example configurations Example file configurations: Example nagios-config.yml configuration integrations: - name: nri-nagios env: CONCURRENCY: \"1\" SERVICE_CHECKS_CONFIG: /etc/newrelic-infra/integrations.d/nagios-service-checks.yml interval: 15s Copy Example nagios-service-checks.yml configuration service_checks: - name: check_users command: [\"/usr/local/nagios/libexec/check_users\", \"-w\", \"5\", \"-c\", \"10\"] parse_output: true labels: env: staging key1: val1 - name: check_yum command: [\"/usr/local/nagios/libexec/check_yum\"] Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Nagios integration links. Nagios data is attached to the NagiosServiceCheckSample event type. For more on how to find and use your data, see Understand integration data. Metric data The Nagios integration collects the following metric data attributes. Nagios service check sample metrics These attributes can be found by querying the NagiosServiceCheckSample event types in Insights. Metric Description serviceCheck.command The command used to run the service check. serviceCheck.error The standard error (stderr) output of the service check. serviceCheck.longServiceOutput The portion of the message that is parsed by Nagios as $LONGSERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.message The standard output (stdout) of the service check. serviceCheck.name The descriptive name of the service check being performed. serviceCheck.serviceOutput The portion of the message that is parsed by Nagios as $SERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.status The return code of the service check. Options: 0 = Ok 1 = Warning 2 = Critical 3 = Unknown * Any additional metrics defined and reported by the service check. Only enabled if parse_output is set. Troubleshooting Troubleshooting tips: Config parsing failed error The following error appears in the log file: Config parsing failed: service checks file permissions are not restrictive enough. Required file permissions are 0600. See documentation for details Copy Solution: Set the user permissions flag to 0600, restricting read and write privileges to the file owner. Cause: If the file is not owned by the root user or the file can be written to by a user other than the root user, the integration will allow users to run arbitrary commands as though they are a root user. If permissions do not meet the requirement, an error will be logged and the integration will fail to run. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.54391,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Nagios monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration&#x27;s YAML-format configuration is where you can"
      },
      "id": "603eb881e7b9d2728a2a07b5"
    }
  ],
  "/docs/integrations/host-integrations/installation/secrets-management": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "<em>Install</em> and activate the <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.46707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "Nagios monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Nagios instance settings",
        "Service checks config file",
        "Labels/custom attributes",
        "Permissions",
        "Linux permissions",
        "Windows permissions",
        "Example configurations",
        "Example nagios-config.yml configuration",
        "Example nagios-service-checks.yml configuration",
        "Find and use data",
        "Metric data",
        "Nagios service check sample metrics",
        "Troubleshooting",
        "Config parsing failed error",
        "Solution:",
        "Cause:",
        "Check the source code"
      ],
      "title": "Nagios monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "98062fcf3378e6a1b075d73961c457be1f2b3e16",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration/",
      "published_at": "2021-09-26T18:15:13Z",
      "updated_at": "2021-09-14T20:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Nagios integration lets you use your service checks directly, without the need to run a Nagios instance. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with any existing service that conform to the Nagios Plugin API. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows OS version compatible with New Relic's infrastructure agent. Quick start Instrument your Nagios instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Nagios integration: Linux installation Follow the instructions for installing an integration, using the file name nri-nagios. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp nagios-config.yml.sample nagios-config.yml Copy Create a copy of the sample service checks file by running: sudo cp nagios-service-checks.yml.sample nagios-service-checks.yml Copy Edit the nagios-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-nagios .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-nagios/nri-nagios-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-nagios-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp nagios-config.yml.sample nagios-config.yml Copy Edit the nagios-config.yml file as described in the configuration settings. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a nagios-service-checks.yml file that describes the service checks to be run by the integration. For an example configuration, see the example service checks file. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For example configurations, see the nagios-config.yml and nagios-service-checks.yml examples. Our configuration files have common settings used in all of our integrations, such as interval, timeout, andinventory_source, among others. For more on these common settings, see this list of configuration properties. Specific settings related to Nagios are defined using the env section of the configuration file. These settings control the connection to your Nagios instance as well as other security settings and features. Nagios instance settings Setting Description Default SERVICE_CHECKS_CONFIG This points to a yaml file containing definitions of the service checks that will be run by the integration. Required. N/A CONCURRENCY The number of service checks to be run concurrently. 1 OUTPUT_TABLE_NAME The name of the table where the service check results are saved. NagiosServiceCheckSample Service checks config file The service_checks_config yaml file contains the top-level array service_checks. Each service check must contain both a name and a command. Key Description name The naming convention is not specific, and allows for easy recognition in the Infrastructure UI. command The command is an array of strings, with the first position containing the path to the executable and the remaining positions containing the arguments to the executable. labels A collection of key: value pairs which help to identify and group service checks in Insights. parse_output Attempts to parse the output of service checks that conform to the Nagios Plugin API spec. Default: false. These setting values can be defined in several ways: Add the values directly in the config file. Replace the values from environment variables using the {{}} notation. This requires Infrastructure agent v1.14.0+. Read more here. Use secrets management to protect sensible information, such as passwords, so that it's not exposed in plain text in the configuration file. For more information, see secrets management. Labels/custom attributes Environment variables can be used to control configuration settings, such as your license key, and are then passed to the Infrastructure agent. For instructions on how to use the passthrough feature, see configure the Infrastructure agent. You can also decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics. You can use these labels to query, filter, or group your metrics. Our default sample config file includes examples with labels, you can remove, modify, or add new ones of your choice. labels: env: production role: nagios Copy Permissions Non-configurable commands are run by the infrastructure agent, which itself is run by the root user. For the integration to run properly, ensure that the permissions on the yaml file are appropriately restrictive as indicated below: Linux permissions Set the user permissions flag to 0600, restricting read and write privileges to the file owner. If permissions do not meet this requirement, an error will be logged and the integration will fail to run. Windows permissions By default, the agent and any commands in the yaml file run as an Administrator. As the integration is unable to check permissions, it is up to the user to appropriately restrict permissions for the file. Example configurations Example file configurations: Example nagios-config.yml configuration integrations: - name: nri-nagios env: CONCURRENCY: \"1\" SERVICE_CHECKS_CONFIG: /etc/newrelic-infra/integrations.d/nagios-service-checks.yml interval: 15s Copy Example nagios-service-checks.yml configuration service_checks: - name: check_users command: [\"/usr/local/nagios/libexec/check_users\", \"-w\", \"5\", \"-c\", \"10\"] parse_output: true labels: env: staging key1: val1 - name: check_yum command: [\"/usr/local/nagios/libexec/check_yum\"] Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Nagios integration links. Nagios data is attached to the NagiosServiceCheckSample event type. For more on how to find and use your data, see Understand integration data. Metric data The Nagios integration collects the following metric data attributes. Nagios service check sample metrics These attributes can be found by querying the NagiosServiceCheckSample event types in Insights. Metric Description serviceCheck.command The command used to run the service check. serviceCheck.error The standard error (stderr) output of the service check. serviceCheck.longServiceOutput The portion of the message that is parsed by Nagios as $LONGSERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.message The standard output (stdout) of the service check. serviceCheck.name The descriptive name of the service check being performed. serviceCheck.serviceOutput The portion of the message that is parsed by Nagios as $SERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.status The return code of the service check. Options: 0 = Ok 1 = Warning 2 = Critical 3 = Unknown * Any additional metrics defined and reported by the service check. Only enabled if parse_output is set. Troubleshooting Troubleshooting tips: Config parsing failed error The following error appears in the log file: Config parsing failed: service checks file permissions are not restrictive enough. Required file permissions are 0600. See documentation for details Copy Solution: Set the user permissions flag to 0600, restricting read and write privileges to the file owner. Cause: If the file is not owned by the root user or the file can be written to by a user other than the root user, the integration will allow users to run arbitrary commands as though they are a root user. If permissions do not meet the requirement, an error will be logged and the integration will fail to run. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.5439,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Nagios monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration&#x27;s YAML-format configuration is where you can"
      },
      "id": "603eb881e7b9d2728a2a07b5"
    }
  ],
  "/docs/integrations/host-integrations/installation/update-infrastructure-host-integration-package": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "<em>Install</em> and activate the <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Varnish Cache monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Varnish Cache instance settings",
        "Labels/Custom attributes",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "Tip",
        "Varnish sample metrics",
        "Varnish lock sample metrics",
        "Varnish storage sample metrics",
        "Varnish mempool sample metrics",
        "Varnish backend sample metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Varnish Cache monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e4cf37d36cab7d962a337a36b09ffd76debc478d",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration/",
      "published_at": "2021-09-27T14:47:29Z",
      "updated_at": "2021-09-20T19:42:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Varnish Cache on-host integration collects and sends inventory and metrics from your Varnish Cache environment to New Relic so you can monitor its health. We collect metrics at the instance, lock, memory pool, storage, and backend levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Varnish Cache 1.0 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with our infrastructure agent. Quick start Instrument your Varnish Cache environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Varnish Cache integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your Varnish Cache environment. Install and activate To install the Varnish Cache integration: Linux installation Follow the instructions for installing an integration, using the file name nri-varnish. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-varnish .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-varnish/nri-varnish-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-varnish-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp varnish-config.yml.sample varnish-config.yml Copy Edit the varnish-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files please refer to this document for help. Specific settings related to Varnish are defined using the env section of the configuration file. These settings control the connection to your Varnish instance, as well as other security settings and features. The list of valid settings is described in the following section. Varnish Cache instance settings The Varnish Cache integration collects both metrics(M) and inventory(I) information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To INSTANCE_NAME User defined name to identify data from this instance in New Relic. Required. N/A M/I PARAMS_CONFIG_FILE The location of the varnish.params config file. If this argument is omitted, the following locations will be checked: /etc/default/varnish/varnish.params /etc/sysconfig/varnish/varnish.params Note: The location and name of the Varnish configuration file may vary. For details, see Different locations of the Varnish configuration file. N/A I VARNISH_NAME Name used when executing the varnishd daemon with a custom -n flag. Optional. N/A M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false The varnish-config.yml commands accept the following arguments: The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom attributes Environment variables can be used to control config settings, such as your license key, and are then passed through to the Infrastructure agent. For instructions on how to use this feature, see Configure the Infrastructure agent. You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: varnish Copy Example configuration Example varnish-config.yml file configuration: Example configuration This is the very basic configuration to collect metrics and inventory : integrations: - name: nri-varnish env: INSTANCE_NAME: new_relic PARAMS_CONFIG_FILE: /etc/default/varnish/varnish.params interval: 15s labels: env: production role: varnish inventory_source: config/varnish Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data in Infrastructure, go to one.newrelic.com > Infrastructure > Third-party services and select one of the Varnish Cache integration links. In New Relic, Varnish Cache data is attached to the following Insights event type: VarnishSample VarnishLockSample VarnishStorageSample VarnishMempoolSample VarnishBackendSample For more on how to find and use your data, see Understand integration data. Metric data The Varnish Cache integration collects the following metric data attributes. Each metric name is prefixed with a category indicator and a period, such as bans. or main.. Tip A number of metrics are calculated as rates (per second) instead of totals as the metric names might suggest. For more details on which metrics are calculated as rates, refer to the spec.csv file. Varnish sample metrics These attributes can be found by querying the VarnishSample event types. Metric Description backend.connectionBusy Number of times the maximum connection has been reached. backend.connectionFails Number of failed connections to the backed. backend.connectionRecycles Number of backend connections that have been recycled. backend.connectionRetries Number of backend connections that have been retried. backend.connectionReuses Number of backend connections reuses. backend.connectionSuccess Number of successful backend connections, backend.connectionUnHealthy Number of backend connections that were not attempted due to ‘unhealthy’ backend status. backend.fetches Total number of backend fetches initiated. backend.requests Total number of backend connection requests made. bans.added Counter of bans added to ban list. bans.completed Number of bans marked ‘completed'. bans.cutoffLurkerKilled Number of objects killed by bans for cutoff (lurker). bans.deleted Counter of bans deleted from ban list. bans.dups Count of bans replaced by later identical bans. bans.fragmentationInBytes Extra bytes in persisted ban lists due to fragmentation. bans.lookupKilled Number of objects killed by bans during object lookup. bans.lookupTestsTested Count of how many tests and objects have been tested against each other during lookup. bans.lurkerCon Number of times the ban-lurker had to wait for lookups. bans.lurkerKilled Number of objects killed by the ban-lurker. bans.lurkerTested Count of how many bans and objects have been tested against each other by the ban-lurker. bans.lurkerTestsTested Count of how many tests and objects have been tested against each other during by the ban-lurker. bans.obj Number of bans using obj.* variables. These bans can possibly be washed by the ban-lurker. bans.persistedInBytes Bytes used by the persisted ban lists. bans.req Number of bans which use req.* variables. These bans can not be washed by the ban-lurker. bans.tested Count of how many bans and objects have been tested against each other during hash lookup. cache.graceHits Count of cache hits with grace. A cache hit with grace is a cache hit where the object is expired. These hits also included in the cache_hit counter. cache.hits Number of times an object has been delivered to a client without fetching it from a backend server. cache.misses Number of times the object was fetched from the backend before delivering it to the client. cache.missHits Number of times a hit object was returned for a miss response. cache.passHits Number of times a hit object was returned for a pass response. esi.errors Edge Side Includes (ESI) parsing errors (unlock). esi.warnings Edge Side Includes (ESI) parse warnings (unlock). fetch.bad The beresp.body length/fetch could not be determined. fetch.chuncked The beresp.body chunked. fetch.contentLength The beresp.body with content-length. fetch.eof The beresp.body with EOF. fetch.failed The beresp failed. fetch.head The beresp with no body because the request is HEAD. fetch.noBody The beresp with no body. fetch.noBody1xx The beresp with no body because of 1XX response. fetch.noBody204 The beresp with no body because of 204 response. fetch.noBody304 The beresp with no body because of 304 response. fetch.noThreadFail The beresp fetch failed, no thread available. hcb.inserts Number of critical bit tree-based hash (HCB) inserts. hcb.lock Number of HCB lookups with lock. hcb.noLock Number of HCB lookups without lock. lru.limited Number of times more storage space was needed, but limit was reached. lru.moved Number of move operations done on the LRU list. lru.nuked Number of least recently used (LRU) objects forcefully evicted from storage to make room for a new object. main.backends Number of backends. main.bans Count of bans. main.busyKilled Number of requests killed after sleep on busy objhdr. main.busySleep Number of requests sent to sleep on busy objhdr. main.busyWakeup Number of requests woken after sleep on busy objhdr. main.expired Number of expired objects. main.expiredMailed Number of objects mailed to expiry thread. main.expiredReceived Number of objects received by expiry thread. main.gunzip Number of gunzip operations. main.gunzipTest Number of test gunzip operations. main.gzip Number of gzip operations. main.objectcores Number of objectcore structs made. main.objectheads Number of objected structs made. main.objects Number of object structs made. main.passedRequests Total pass-ed requests seen. main.pipeSessions Total pipe sessions seen. main.pools Number of thread pools. main.purgeObjects Number of purged objects. main.purgeOperations Number of purge operations executed. main.reqDropped Number of requests dropped. main.sessions Total number of sessions seen. main.sessQueueLength Length of session queue waiting for threads. main.summs Number of times per-thread statistics were summed into the global counters. main.syntheticResponses Total synthethic responses made. main.threads Total number of threads. main.threadsCreated Total number of threads created in all pools. main.threadsDestroyed Total number of threads destroyed in all pools. main.threadsFailed Number of times creating a thread failed. main.threadsLimited Number of times more threads were needed, but limit was reached in a thread pool. main.unresurrectedObjects Number of unresurrected objects. main.uptimeInMilliseconds The child process uptime, in milliseconds. main.vclAvailable Number of Varnish Configuration Languages (VCL) available. main.vclDiscarded Number of discarded VCLs. main.vclFails Number of VCL failures. main.vclLoaded Number of loaded VCLs in total. main.vmodsLoaded Number of loaded Varnish modules (VMOD). mgt.childDied Number of times the child process has died due to signals. mgt.childDump Number of times the child process has produced core dumps. mgt.childExit Number of times the child process has been cleanly stopped. mgt.childPanic Number of times the management process has caught a child panic. mgt.childStart Number of times the child process has been started. mgt.childStop Number of times the child process has been cleanly stopped. mgt.uptimeInMilliseconds The management process uptime, in milliseconds. net.400Errors Number of client requests received, subject to 400 errors. net.417Errors Number of client requests received, subject to 417 errors net.httpOverflow Number of HTTP header overflows. net.pipe.inInBytes Total number of bytes forwarded from clients in pipe sessions. net.pipe.outInBytes Total number of bytes forwarded to clients in pipe sessions. net.pipereq.headerInBytes Total request bytes received for piped sessions. net.request.bodyInBytes Total request body transmitted, in bytes. net.request.headerInBytes Total request headers transmitted, in bytes. net.requests Number of good client requests received. net.response.bodyInBytes Total response body transmitted, in bytes. net.response.headerInBytes Total response headers transmitted, in bytes. sess.backendClose Number of session closes with the error RESP_CLOSE, (Backend/VCL requested close). sess.badClose Number of session closes with the error Error RX_BAD, (Received bad req/resp). sess.bodyFailClose Number of session closes with the error Error RX_BODY, (Failure receiving req.body). sess.clientClose Number of session closes with the error REM_CLOSE, (Client closed). sess.clientReqClose Number of session closes with the error REQ_CLOSE, (Client requested close). sess.closed Total number of sessions closed. sess.closedError Total number of sessions closed with errors. sess.dropped Number of sessions dropped for thread. sess.eofTxnClose Number of session closes with the error TX_EOF, (EOF transmission). sess.errorTxnClose Number of session closes with the error TX_ERROR, (Error transaction). sess.herd Number of times the timeout_linger triggered. sess.junkClose Number of session closes with the error RX_JUNK, (Received junk data). sess.overflowClose Number of session closes with the error RX_OVERFLOW, (Received buffer overflow). sess.overloadClose Number of session closes with the error OVERLOAD, (Out of some resource). sess.pipeOverflowClose Number of session closes with the error PIPE_OVERFLOW, (Session pipe overflow). sess.pipeTxnClose Number of session closes with the error TX_PIPE, (Piped transaction). sess.queued Number of sessions queued for thread. sess.readAhead Session Read Ahead. sess.requestHTTP10Close Number of session closes with the error REQ_HTTP10, (Proto < HTTP/1.1). sess.requestHTTP20Close Number of session closes with the error REQ_HTTP20, (HTTP2 not accepted). sess.shortRangeClose Number of session closes with the error RANGE_SHORT, (Insufficient data for range). sess.timeoutClose Number of session closes with the error RX_TIMEOUT, (Receive timeout). sess.vclFailClose Number of session closes with the error VCL_FAILURE, (VCL failure). session.connections Count of sessions successfully accepted. session.drops Count of sessions silently dropped due to lack of worker thread. session.fail Count of failures to accept TCP connection. shm.contentions Number of shared memory (SHM) MTX contentions. shm.cycles Number of SHM cycles through buffer. shm.flushes Number of SHM flushes due to overflow. shm.records Number of SHM records. shm.writes Number of SHM writes. workspace.backendOverflow Number of times we ran out of space in workspace_backend. workspace.clientOverflow Number of times we ran out of space in workspace_client. workspace.deliveryFail Delivery failed due to insufficient workspace. workspace.sessionOverflow Number of times we ran out of space in workspace_session. workspace.threadOverflow Number of times we ran out of space in workspace_thread. Varnish lock sample metrics These attributes can be found by querying the VarnishLockSample event types in Insights. Metric Description lock.created Count of created locks. lock.destroyed Count of destroyed locks. lock.locks Count of lock operations. Varnish storage sample metrics These attributes can be found by querying the VarnishStorageSample event type. Metric Description storage.allocFails Number of times the storage has failed to provide a storage segment. storage.allocInBytes Number of total bytes allocated by this storage. storage.allocOustanding Number of storage allocations outstanding. storage.allocReqs Number of times the storage has been asked to provide a storage segment. storage.availableInBytes Number of bytes left in the storage. storage.freeInBytes Number of total bytes returned to this storage. storage.outstandingInBytes Number of bytes allocated from the storage. Varnish mempool sample metrics These attributes can be found by querying the VarnishMempoolSample event types in Insights. Metric Description mempool.allocatedSizeInBytes Allocated size of memory pool, in bytes. mempool.allocs Memory pool allocations. mempool.frees Number of memory pools free. mempool.live Number of memory pools in use. mempool.pool Count in memory pool. mempool.ranDry Pool ran dry. mempool.recycles Recycled from pool. mempool.requestSizeInBytes Request size of memory pool, in bytes. mempool.surplus Too many for pool. mempool.timeouts Timed out from pool. mempool.tooSmall Too small to recycle. Varnish backend sample metrics These attributes can be found by querying the VarnishBackendSample event type. Metric Description backend.busyFetches Fetches not attempted due to backend being busy. backend.connections Number of concurrent connections to the backend. backend.connectionsFailed Number of backend connections failed. backend.connectionsNotAttempted Number of backend connection opens not attempted. backend.happy Happy health probes. backend.unhealtyFetches Fetches not attempted due to backend being unhealthy net.backend.pipeHeaderInBytes Total request bytes sent for piped sessions. net.backend.pipeInInBytes Total number of bytes forwarded from backend in pipe sessions. net.backend.pipeOutInBytes Total number of bytes forwarded to backend in pipe sessions. net.backend.requestBodyInBytes Total backend request body bytes sent. net.backend.requestHeaderInBytes Total backend request header bytes sent. net.backend.requests Number of backend requests sent, net.backend.responseBodyInBytes Total backend response body bytes received. net.backend.responseHeaderInBytes Total backend response header bytes received. Inventory data The Varnish Cache integration captures the configuration parameters. It parses the varnish.params configuration file for all parameters that are active. The data is available on the Inventory page, under the config/varnish source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.46707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Varnish Cache monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". Restart the infrastructure agent. Additional notes: Advanced: It&#x27;s also possible to install the integration from a tarball file. This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update"
      },
      "id": "603ea15d196a67d78ca83dae"
    },
    {
      "sections": [
        "Nagios monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Nagios instance settings",
        "Service checks config file",
        "Labels/custom attributes",
        "Permissions",
        "Linux permissions",
        "Windows permissions",
        "Example configurations",
        "Example nagios-config.yml configuration",
        "Example nagios-service-checks.yml configuration",
        "Find and use data",
        "Metric data",
        "Nagios service check sample metrics",
        "Troubleshooting",
        "Config parsing failed error",
        "Solution:",
        "Cause:",
        "Check the source code"
      ],
      "title": "Nagios monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "98062fcf3378e6a1b075d73961c457be1f2b3e16",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration/",
      "published_at": "2021-09-26T18:15:13Z",
      "updated_at": "2021-09-14T20:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Nagios integration lets you use your service checks directly, without the need to run a Nagios instance. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with any existing service that conform to the Nagios Plugin API. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows OS version compatible with New Relic's infrastructure agent. Quick start Instrument your Nagios instance quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Nagios integration: Linux installation Follow the instructions for installing an integration, using the file name nri-nagios. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp nagios-config.yml.sample nagios-config.yml Copy Create a copy of the sample service checks file by running: sudo cp nagios-service-checks.yml.sample nagios-service-checks.yml Copy Edit the nagios-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-nagios .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-nagios/nri-nagios-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-nagios-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp nagios-config.yml.sample nagios-config.yml Copy Edit the nagios-config.yml file as described in the configuration settings. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a nagios-service-checks.yml file that describes the service checks to be run by the integration. For an example configuration, see the example service checks file. Restart the infrastructure agent. Additional notes: Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For example configurations, see the nagios-config.yml and nagios-service-checks.yml examples. Our configuration files have common settings used in all of our integrations, such as interval, timeout, andinventory_source, among others. For more on these common settings, see this list of configuration properties. Specific settings related to Nagios are defined using the env section of the configuration file. These settings control the connection to your Nagios instance as well as other security settings and features. Nagios instance settings Setting Description Default SERVICE_CHECKS_CONFIG This points to a yaml file containing definitions of the service checks that will be run by the integration. Required. N/A CONCURRENCY The number of service checks to be run concurrently. 1 OUTPUT_TABLE_NAME The name of the table where the service check results are saved. NagiosServiceCheckSample Service checks config file The service_checks_config yaml file contains the top-level array service_checks. Each service check must contain both a name and a command. Key Description name The naming convention is not specific, and allows for easy recognition in the Infrastructure UI. command The command is an array of strings, with the first position containing the path to the executable and the remaining positions containing the arguments to the executable. labels A collection of key: value pairs which help to identify and group service checks in Insights. parse_output Attempts to parse the output of service checks that conform to the Nagios Plugin API spec. Default: false. These setting values can be defined in several ways: Add the values directly in the config file. Replace the values from environment variables using the {{}} notation. This requires Infrastructure agent v1.14.0+. Read more here. Use secrets management to protect sensible information, such as passwords, so that it's not exposed in plain text in the configuration file. For more information, see secrets management. Labels/custom attributes Environment variables can be used to control configuration settings, such as your license key, and are then passed to the Infrastructure agent. For instructions on how to use the passthrough feature, see configure the Infrastructure agent. You can also decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics. You can use these labels to query, filter, or group your metrics. Our default sample config file includes examples with labels, you can remove, modify, or add new ones of your choice. labels: env: production role: nagios Copy Permissions Non-configurable commands are run by the infrastructure agent, which itself is run by the root user. For the integration to run properly, ensure that the permissions on the yaml file are appropriately restrictive as indicated below: Linux permissions Set the user permissions flag to 0600, restricting read and write privileges to the file owner. If permissions do not meet this requirement, an error will be logged and the integration will fail to run. Windows permissions By default, the agent and any commands in the yaml file run as an Administrator. As the integration is unable to check permissions, it is up to the user to appropriately restrict permissions for the file. Example configurations Example file configurations: Example nagios-config.yml configuration integrations: - name: nri-nagios env: CONCURRENCY: \"1\" SERVICE_CHECKS_CONFIG: /etc/newrelic-infra/integrations.d/nagios-service-checks.yml interval: 15s Copy Example nagios-service-checks.yml configuration service_checks: - name: check_users command: [\"/usr/local/nagios/libexec/check_users\", \"-w\", \"5\", \"-c\", \"10\"] parse_output: true labels: env: staging key1: val1 - name: check_yum command: [\"/usr/local/nagios/libexec/check_yum\"] Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Nagios integration links. Nagios data is attached to the NagiosServiceCheckSample event type. For more on how to find and use your data, see Understand integration data. Metric data The Nagios integration collects the following metric data attributes. Nagios service check sample metrics These attributes can be found by querying the NagiosServiceCheckSample event types in Insights. Metric Description serviceCheck.command The command used to run the service check. serviceCheck.error The standard error (stderr) output of the service check. serviceCheck.longServiceOutput The portion of the message that is parsed by Nagios as $LONGSERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.message The standard output (stdout) of the service check. serviceCheck.name The descriptive name of the service check being performed. serviceCheck.serviceOutput The portion of the message that is parsed by Nagios as $SERVICEOUTPUT$. Only enabled if parse_output is set. serviceCheck.status The return code of the service check. Options: 0 = Ok 1 = Warning 2 = Critical 3 = Unknown * Any additional metrics defined and reported by the service check. Only enabled if parse_output is set. Troubleshooting Troubleshooting tips: Config parsing failed error The following error appears in the log file: Config parsing failed: service checks file permissions are not restrictive enough. Required file permissions are 0600. See documentation for details Copy Solution: Set the user permissions flag to 0600, restricting read and write privileges to the file owner. Cause: If the file is not owned by the root user or the file can be written to by a user other than the root user, the integration will allow users to run arbitrary commands as though they are a root user. If permissions do not meet the requirement, an error will be logged and the integration will fail to run. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.5439,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Nagios monitoring <em>integration</em>",
        "sections": "Linux <em>installation</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". This gives you full control over the <em>installation</em> and configuration process. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the Infrastructure agent. Configure the integration An integration&#x27;s YAML-format configuration is where you can"
      },
      "id": "603eb881e7b9d2728a2a07b5"
    }
  ],
  "/docs/integrations/host-integrations/open-source-host-integrations-list/f5-open-source-integration": [
    {
      "sections": [
        "F5 monitoring integration",
        "Compatibility and requirements",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Enable your F5 instance",
        "Tip",
        "Configure the integration",
        "F5 instance settings",
        "Labels/custom attributes",
        "Example configurations",
        "Basic configuration",
        "Basic configuration with different metric/inventory intervals",
        "Environment variables replacement",
        "Metrics-only with partition filtering",
        "Multi-instance monitoring",
        "Find and use data",
        "Metric data",
        "System sample metrics",
        "Virtual server sample metrics",
        "Pool sample metrics",
        "Pool member sample metrics",
        "Node sample metrics",
        "Inventory data",
        "Pool Inventory",
        "Node inventory",
        "Pool Member Inventory",
        "Virtual Server Inventory",
        "System Inventory",
        "Application Inventory",
        "Check the source code"
      ],
      "title": "F5 monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "86250de7e0529371148dab5e96960893b88288b8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/f5-monitoring-integration/",
      "published_at": "2021-09-26T18:14:24Z",
      "updated_at": "2021-09-14T18:21:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our F5 BIG-IP integration collects and sends inventory and metrics from your F5 BIG-IP instance to our platform, where you can aggregate and visualize key performance metrics. We collect data at the system, application, pool, pool member, virtual server, and node levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with F5 BIG-IP 11.6 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with the infrastructure agent. F5 BIG-IP user account with Auditor-level access user privileges and iControl REST API access permissions. Install and activate To install the F5 BIG-IP integration, choose your setup: Linux installation Follow the instructions for installing an integration, using the file name nri-f5. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp f5-config.yml.sample f5-config.yml Copy Edit the f5-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-f5 MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-f5/nri-f5-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-f5-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: copy f5-config.yml.sample f5-config.yml Copy Edit the f5-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: We recommend you install the integration on a separate server and monitor F5 remotely. Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Enable your F5 instance Create a new F5 BIG-IP user and assign user permissions: Create a user account with, at minimum, Auditor-level access permissions. For instructions on how to do this, see the official F5 documentation. Once the user has been created, assign the user iControl REST user permissions. Tip Administrator-level permissions may be required to collect some system sample metrics or system inventory configuration data. For more information on user permission levels, see the official F5 documentation on user role access descriptions. Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes, see monitor services running on Kubernetes. If enabled via Amazon ECS, see monitor services running on ECS. If installed via on-host, edit the config in the integration's YAML config file, f5-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. The options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, and inventory_source, among others. For more on these common settings, see our list of configuration properties document. If you're still using our legacy configuration/definition files, see on-host integrations standard configuration format. Specific settings related to F5 are defined using the env section of the configuration file. These settings control the connection to your F5 instance, as well as other security settings and features. F5 instance settings The F5 integration collects both metrics(M) and inventory(I) information. In the table, use the Applies To column for the settings available to each collection: Setting Description Default Applies to HOSTNAME Hostname or IP where F5 is running. localhost M/I PORT Port on which F5 API is listening. 443 M/I USERNAME Username for accessing F5 API. N/A M/I PASSWORD Password for the given user. N/A M/I CA_BUNDLE_FILE Location of SSL certificate on the host. Only required if USE_SSL is true. N/A M/I CA_BUNDLE_DIR Alternative Certificate Authority bundle directory. N/A M/I TIMEOUT Timeout for requests, in seconds. 30 M/I PARTITION_FILTER A JSON array of BIG-IP partitions to collect from. See this metrics-only with partition filtering example. [\"Common\"] M MAX_CONCURRENT_REQUESTS Maximum number of requests running concurrently. 10 M METRICS Set to true to enable metrics-only collection. false INVENTORY Set to true to enable inventory-only collection. false You can define these setting values in different ways, depending on your preference and need: Add the value directly in the config file. This is the most common way. Replace the values from environment variables using the {{}} notation. This requires Infrastructure agent v1.14.0+. Read more on using passthrough or see the environment variables replacement example. Use secrets management to protect sensitive information, such as passwords, that would be exposed in plain text in the configuration file. For more information, read more about using secrets management. Labels/custom attributes You can also decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics, which you can then use to query, filter, or group your metrics. Our default sample config file includes examples of labels. You can remove, modify, or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations Basic configuration This is the basic configuration used to collect metrics and inventory from your localhost: integrations: - name: nri-f5 env: HOSTNAME: localhost PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 15s labels: environment: production inventory_source: config/f5 Copy Basic configuration with different metric/inventory intervals This configuration collects metrics every 15 seconds and inventory every 60 seconds: integrations: - name: nri-f5 env: METRICS: true HOSTNAME: localhost PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 15s labels: environment: production - name: nri-f5 env: INVENTORY: true HOSTNAME: localhost PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 60s labels: environment: production inventory_source: config/f5 Copy Environment variables replacement In this configuration, the environment variable F5_HOST populates the HOSTNAME setting of the integration: integrations: - name: nri-f5 env: METRICS: \"true\" HOSTNAME: {{F5_HOST}} PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 15s labels: env: production role: load_balancer Copy Metrics-only with partition filtering This configuration only collects metrics and adds \"MyOtherPartition\" to the list of partitions to be sampled. By default, the integration only samples the \"Common\" partition: integrations: - name: nri-f5 env: METRICS: \"true\" HOSTNAME: {{F5_HOST}} PORT: 443 USERNAME: f5_user PASSWORD: f5_password PARTITION_FILTER: '[\"Common\",\"MyOtherPartition\"]' interval: 15s labels: env: production role: load_balancer Copy Multi-instance monitoring This configuration monitors multiple F5 servers from the same integration. The first instance (HOSTNAME: 1st_f5_host) collects metrics and inventory, while the second instance (HOSTNAME: 2nd_f5_host) only collects metrics. integrations: - name: nri-f5 env: METRICS: \"true\" HOSTNAME: 1st_f5_host PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 15s labels: env: production role: load_balancer - name: nri-f5 env: INVENTORY: \"true\" HOSTNAME: 1st_f5_host PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 60s labels: env: production role: load_balancer inventory_source: config/f5 - name: nri-f5 env: METRICS: \"true\" HOSTNAME: 2nd_f5_host PORT: 443 USERNAME: f5_user PASSWORD: f5_password interval: 15s labels: env: production role: load_balancer Copy Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > Third-party services and select one of the F5 BIG-IP integration links. In New Relic Insights, F5 BIG-IP data is attached to the following Insights event types: F5BigIpSystemSample F5BigIpVirtualServerSample F5BigIpPoolSample F5BigIpPoolMemberSample F5BigIpNodeSample For more on how to find and use your data, see Understand integration data. Metric data The F5 BIG-IP integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as system., virtualserver., or pool.. System sample metrics These attributes can be found by querying the F5BigIpSystemSample event types. Metric Description system.cpuIdleTicksPerSecond Amount of CPU ticks that the CPU was idle per second. Requires Administrator-level user permissions to collect. system.cpuIdleUtilization Average percentage of time the CPU is idle. system.cpuInterruptRequestUtilization Average percentage of time the CPU is handling interrupt requests. system.cpuIOWaitUtilization Average percentage of time the CPU is waiting on IO. system.cpuNiceLevelUtilization Average percentage of time the CPU is handling nice level processes. system.cpuSoftInterruptRequestUtilization Average percentage of time the CPU is handling soft interrupt requests. system.cpuStolenUtilization Average percentage of time the CPU is handling reclaimed cycles by the hypervisor. system.cpuSystemTicksPerSecond Amount of CPU ticks used by the kernel processes per second. Requires Administrator-level user permissions to collect. system.cpuSystemUtilization Average percentage of time the CPU is used by the kernel. system.cpuUserTicksPerSecond Amount of CPU ticks used by user processes per second. Requires Administrator-level user permissions to collect. system.cpuUserUtilization Average percentage of time the CPU is used by user processes. system.memoryFreeInBytes Total amount of memory free, in bytes. system.memoryTotalInBytes Total amount of memory, in bytes. Requires Administrator-level user permissions to collect. system.memoryUsedInBytes Total amount of memory used, in bytes. Requires Administrator-level user permissions to collect. system.otherMemoryFreeInBytes Free memory reserved for control plane processes, in bytes. system.otherMemoryTotalInBytes Total memory reserved for control plane processes, in bytes. system.otherMemoryUsedInBytes Used memory reserved for control plane processes, in bytes. system.swapFreeInBytes Swap space free, in bytes. system.swapTotalInBytes Swap space total, in bytes. system.swapUsedInBytes Swap space used, in bytes. system.tmmMemoryFreeInBytes Free memory reserved for Traffic Management Microkernel (TMM), in bytes. system.tmmMemoryTotalInBytes Total memory reserved for Traffic Management Microkernel (TMM), in bytes. system.tmmMemoryUsedInBytes Used memory reserved for Traffic Management Microkernel (TMM), in bytes. Virtual server sample metrics These attributes can be found by querying the F5BigIpVirtualServerSample event types in Insights. Metric Description virtualserver.avaibilityState The BIG-IP defined availability. Options: 0 = Offline 1 = Unknown 2 = Online virtualserver.clientsideConnectionsPerSecond The rate of connections created through the client side of the object per second. virtualserver.cmpEnabled Indicates whether or not Cluster Multiprocessing (CMP) is enabled. virtualserver.cmpEnableMode Shows the Cluster Multiprocessing (CMP) mode indicators. Options: CMP disabled = none, disable, or single. CMP enabled = enable or all. virtualserver.connections The current number of connections from BIG-IP. virtualserver.csMaxConnDur Maximum connection duration from the client side of the object. virtualserver.csMinConnDur Minimum connection duration from the client side of the object. virtualserver.enabled The current enabled state. Options: 0 = Disabled 1 = Enabled virtualserver.ephemeralBytesInPerSecond Total number of bytes in through the ephemeral port per second. virtualserver.ephemeralBytesOutPerSecond Total number of bytes out through the ephemeral port per second. virtualserver.ephemeralConnectionsPerSecond The rate of connection creation through the ephemeral port per second. virtualserver.ephemeralCurrentConnections The current number of connections through the ephemeral port. virtualserver.ephemeralEvictedConnectionsPerSecond The number of connections that are evicted through the ephemeral port per second. virtualserver.ephemeralMaxConnections Maximum number of connections through the ephemeral port. virtualserver.ephemeralPacketsReceivedPerSecond The number of packets in through the ephemeral port per second. virtualserver.ephemeralPacketsSentPerSecond The number of packets out through the ephemeral port per second. virtualserver.ephemeralSlowKilledPerSecond The number of slow connections that are killed through the ephemeral port per second. virtualserver.evictedConnsPerSecond The rate of connections evicted per second. virtualserver.inDataInBytes The amount of data received from the BIG-IP virtual server, in bytes. virtualserver.outDataInBytes The amount of data sent to the BIG-IP virtual server, in bytes. virtualserver.packetsReceived The number of packets received from the BIG-IP virtual server. virtualserver.packetsSent The number of packets sent to the BIG-IP virtual server. virtualserver.requests The number of requests in the last collection interval to BIG-IP. virtualserver.slowKilledPerSecond The number of slow connections killed through the client side of the object per second. virtualserver.statusReason An explanation of the current status. virtualserver.usageRatio The usage ratio for the virtual server. Pool sample metrics These attributes can be found by querying the F5BigIpPoolSample event types in Insights. Metric Description pool.activeMembers The number of active pool members. pool.availabilityState The current availability state. Options: 0 = Offline 1 = Unknown 2 = Online pool.connections The current number of connections. pool.connqAgeEdm The queue age exponential-decaying max. pool.connqAgeEma The queue age exponential-moving average. pool.connqAgeHead The current queue age head. pool.connqAgeMax The queue age all-time max. pool.connqAllAgeEdm The sum of pool member queue age exponential-decaying max. pool.connqAllAgeEma The sum of pool member queue age exponential-moving average. pool.connqAllAgeHead The sum of pool member queue age head. pool.connqAllAgeMax The sum of pool member queue age all-time max. pool.connqAllDepth The sum of pool member depth. pool.connqDepth The queue depth. pool.currentConnections The current connections. pool.enabled The current enabled state, can be user defined. Options: 0 = Disabled 1 = Enabled pool.inDataInBytes The amount of data received from the BIG-IP pool, in bytes. pool.minActiveMembers Pool minimum active members. pool.outDataInBytes The amount of data sent to the BIG-IP pool, in bytes. pool.packetsReceived The number of packets received from the BIG-IP pool. pool.packetsSent The number of packets sent to the BIG-IP pool. pool.requests The total number of requests to the pool. pool.statusReason Textual property explaining the overall health reason. Pool member sample metrics These attributes can be found by querying the F5BigIpPoolMemberSample event types in Insights. Metric Description member.availabilityState The current availability from the BIG-IP system. Options: 0 = Offline 1 = Unknown 2 = Online member.connections The current connections. member.enabled Enabled state of the pool member with regards to the parent pool. Options: 0 = Disabled 1 = Enabled member.inDataInBytes The amount of data received from the BIG-IP pool member, in bytes. member.monitorStatus The status of the monitor. Options: 0 = Down 1 = Unchecked 2 = Any other status member.outDataInBytes The amount of data sent to the BIG-IP pool member, in bytes. member.packetsReceived The number of packets received from the BIG-IP pool member. member.packetsSent The number of packets sent to the BIG-IP pool member. member.requests The current number of requests over the last collection interval. member.sessions The current session count. member.sessionStatus The current session health status. Options: 0 = Disabled 1 = Enabled member.state The current state. Options: 0 = Down 1 = Up member.statusReason Explanation of the current status. Node sample metrics These attributes can be found by querying the F5BigIpNodeSample event types in Insights. Metric Description node.availabilityState The current BIG-IP availability state to the node. Options: 0 = Offline 1 = Unknown 2 = Online node.connections The current number of network connections from BIG-IP. node.connectionsPerSecond The number of connections made per second. node.enabled The current BIG-IP enabled state. Options: 0 = Disabled 1 = Enabled , node.inDataInBytes The amount of data received from the BIG-IP node, in bytes. node.monitorStatus The current health monitor rule status. Options: 0 = Down 1 = Unchecked 2 = Any other status node.outDataInBytes The amount of data sent to the BIG-IP node, in bytes. node.packetsReceived The number of packets received from the BIG-IP node. node.packetsSent The number of packets sent to the BIG-IP node. node.requests The current number of requests over the last collection from BIG-IP. node.sessions The current number of sessions. node.sessionStatus The current status of the session. Options: 0 = Disabled 1 = Enabled node.statusReason BIG-IP reason for the current status. Inventory data The F5 BIG-IP integration also collects configuration data at system, application, pool, pool member, virtual server, and node levels. The data is available on the Infrastructure Inventory page, under the config/f5 source. For more about inventory data, see Understand integration data. The integration captures data for the following F5 BIG-IP configuration parameters: Pool Inventory Metric Description currentLoadMode Current load balancing mode. description User defined description. kind Kind of pool. maxConnections Current max number of connections seen at one point. monitorRule Current health monitoring rule applied. Node inventory Metric Description address BIG-IP network address to send to the node. fqdn FQDN of node. kind Type of Node in BIG-IP. maxConnections Current highest number of network connections reported from BIG-IP. monitorRule BIG-IP Health Monitor rule. Pool Member Inventory Metric Description kind Type of Pool member. maxConnections Current highest number of network connections reported from BIG-IP. monitorRule BIG-IP health monitor rule. nodeName Name of the node the pool member is using. poolName Name of the pool the pool member belongs. port Port the pool member listens on. Virtual Server Inventory Metric Description applicationService Current application service assigned. destination Destination address picked up by BIG-IP. kind Type of virtual server. maxConnections Current highest number of network connections reported from BIG-IP. name User defined name. pool Pool the virtual server uses for load balancing. System Inventory Metric Description chassisSerialNumber Chassis Serial Number for the current device. Requires Access Administrator-level user permissions to collect. platform Platform of the current device. Requires Access Administrator-level user permissions to collect. product Product Name for the current device. Requires Access Administrator-level user permissions to collect. Application Inventory Metric Description deviceGroup Device group running application service. kind BIG-IP Defined type. name User defined name. poolToUse Server side pool load balancing requests. template Template applied to application including security and monitoring rules. templateModified Indicator of modifications made to out of the box template. trafficGroup Current traffic group to which service is applied. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 291.24167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>F5</em> monitoring <em>integration</em>",
        "sections": "<em>F5</em> monitoring <em>integration</em>",
        "tags": "<em>Integrations</em>",
        "body": ". Inventory data The <em>F5</em> BIG-IP <em>integration</em> also collects configuration data at system, application, pool, pool member, virtual server, and node levels. The data is available on the Infrastructure Inventory page, under the config&#x2F;<em>f5</em> <em>source</em>. For more about inventory data, see Understand <em>integration</em> data"
      },
      "id": "6044e41ce7b9d2f0975799b4"
    },
    {
      "sections": [
        "On-host integrations metrics",
        "BETA FEATURE",
        "New Relic Integrations Metrics"
      ],
      "title": "On-host integrations metrics",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Manage your data",
        "Data and instrumentation"
      ],
      "external_id": "fe96c0c4950380504b1a33c3ad861bcb17507cba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/infrastructure/manage-your-data/data-instrumentation/host-integrations-metrics/",
      "published_at": "2021-09-27T18:48:10Z",
      "updated_at": "2021-09-14T20:50:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic Integrations Metrics The following table contains the metrics we collect for our infrastructure integrations. Integration Dimensional Metric Name (new) Sample Metric Name (previous) Agent host.cpuIdlePercent cpuIdlePercent Agent host.cpuIoWaitPercent cpuIOWaitPercent Agent host.cpuPercent cpuPercent Agent host.cpuStealPercent cpuStealPercent Agent host.cpuSystemPercent cpuSystemPercent Agent host.cpuUserPercent cpuUserPercent Agent host.disk.avgQueueLen avgQueueLen Agent host.disk.avgReadQueueLen avgReadQueueLen Agent host.disk.avgWriteQueueLen avgWriteQueueLen Agent host.disk.currentQueueLen currentQueueLen Agent host.disk.freeBytes diskFreeBytes Agent host.disk.freePercent diskFreePercent Agent host.disk.inodesFree inodesFree Agent host.disk.inodesTotal inodesTotal Agent host.disk.inodesUsed inodesUsed Agent host.disk.inodesUsedPercent inodesUsedPercent Agent host.disk.readBytesPerSecond readBytesPerSecond Agent host.disk.readIoPerSecond readIoPerSecond Agent host.disk.readUtilizationPercent readUtilizationPercent Agent host.disk.readWriteBytesPerSecond readWriteBytesPerSecond Agent host.disk.totalBytes diskTotalBytes Agent host.disk.totalUtilizationPercent totalUtilizationPercent Agent host.disk.usedBytes diskUsedBytes Agent host.disk.usedPercent diskUsedPercent Agent host.disk.writeBytesPerSecond writeBytesPerSecond Agent host.disk.writeIoPerSecond writeIoPerSecond Agent host.disk.writeUtilizationPercent writeUtilizationPercent Agent host.diskFreeBytes diskFreeBytes Agent host.diskFreePercent diskFreePercent Agent host.diskReadsPerSecond diskReadsPerSecond Agent host.diskReadUtilizationPercent diskReadUtilizationPercent Agent host.diskTotalBytes diskTotalBytes Agent host.diskUsedBytes diskUsedBytes Agent host.diskUsedPercent diskUsedPercent Agent host.diskUtilizationPercent diskUtilizationPercent Agent host.diskWritesPerSecond diskWritesPerSecond Agent host.diskWriteUtilizationPercent diskWriteUtilizationPercent Agent host.loadAverageFifteenMinute loadAverageFifteenMinute Agent host.loadAverageFiveMinute loadAverageFiveMinute Agent host.loadAverageOneMinute loadAverageOneMinute Agent host.memoryFreeBytes memoryFreeBytes Agent host.memoryFreePercent memoryFreePercent Agent host.memoryTotalBytes memoryTotalBytes Agent host.memoryUsedBytes memoryUsedBytes Agent host.memoryUsedPercent memoryUsedPercent Agent host.net.receiveBytesPerSecond receiveBytesPerSecond Agent host.net.receiveDroppedPerSecond receiveDroppedPerSecond Agent host.net.receiveErrorsPerSecond receiveErrorsPerSecond Agent host.net.receivePacketsPerSecond receivePacketsPerSecond Agent host.net.transmitBytesPerSecond transmitBytesPerSecond Agent host.net.transmitDroppedPerSecond transmitDroppedPerSecond Agent host.net.transmitErrorsPerSecond transmitErrorsPerSecond Agent host.net.transmitPacketsPerSecond transmitPacketsPerSecond Agent host.process.cpuPercent cpuPercent Agent host.process.cpuSystemPercent cpuSystemPercent Agent host.process.cpuUserPercent cpuUserPercent Agent host.process.fileDescriptorCount fileDescriptorCount Agent host.process.ioReadBytesPerSecond ioReadBytesPerSecond Agent host.process.ioReadCountPerSecond ioReadCountPerSecond Agent host.process.ioTotalReadBytes ioTotalReadBytes Agent host.process.ioTotalReadCount ioTotalReadCount Agent host.process.ioTotalWriteBytes ioTotalWriteBytes Agent host.process.ioTotalWriteCount ioTotalWriteCount Agent host.process.ioWriteBytesPerSecond ioWriteBytesPerSecond Agent host.process.ioWriteCountPerSecond ioWriteCountPerSecond Agent host.process.memoryResidentSizeBytes memoryResidentSizeBytes Agent host.process.memoryVirtualSizeBytes memoryVirtualSizeBytes Agent host.process.threadCount threadCount Agent host.swapFreeBytes swapFreeBytes Agent host.swapTotalBytes swapTotalBytes Agent host.swapUsedBytes swapUsedBytes Apache apache.server.busyWorkers server.busyWorkers Apache apache.server.idleWorkers server.idleWorkers Apache apache.server.net.bytesPerSecond net.bytesPerSecond Apache apache.server.net.requestsPerSecond net.requestsPerSecond Apache apache.server.scoreboard.closingWorkers server.scoreboard.closingWorkers Apache apache.server.scoreboard.dnsLookupWorkers server.scoreboard.dnsLookupWorkers Apache apache.server.scoreboard.finishingWorkers server.scoreboard.finishingWorkers Apache apache.server.scoreboard.idleCleanupWorkers server.scoreboard.idleCleanupWorkers Apache apache.server.scoreboard.keepAliveWorkers server.scoreboard.keepAliveWorkers Apache apache.server.scoreboard.loggingWorkers server.scoreboard.loggingWorkers Apache apache.server.scoreboard.readingWorkers server.scoreboard.readingWorkers Apache apache.server.scoreboard.startingWorkers server.scoreboard.startingWorkers Apache apache.server.scoreboard.totalWorkers server.scoreboard.totalWorkers Apache apache.server.scoreboard.writingWorkers server.scoreboard.writingWorkers Cassandra cassandra.node.allMemtablesOffHeapSizeBytes db.allMemtablesOffHeapSizeBytes Cassandra cassandra.node.allMemtablesOnHeapSizeBytes db.allMemtablesOnHeapSizeBytes Cassandra cassandra.node.client.connectedNativeClients client.connectedNativeClients Cassandra cassandra.node.commitLogCompletedTasksPerSecond db.commitLogCompletedTasksPerSecond Cassandra cassandra.node.commitLogPendingTasks db.commitLogPendindTasks Cassandra cassandra.node.commitLogTotalSizeBytes db.commitLogTotalSizeBytes Cassandra cassandra.node.droppedBatchRemoveMessagesPerSecond db.droppedBatchRemoveMessagesPerSecond Cassandra cassandra.node.droppedBatchStoreMessagesPerSecond db.droppedBatchStoreMessagesPerSecond Cassandra cassandra.node.droppedCounterMutationMessagesPerSecond db.droppedCounterMutationMessagesPerSecond Cassandra cassandra.node.droppedHintMessagesPerSecond db.droppedHintMessagesPerSecond Cassandra cassandra.node.droppedMutationMessagesPerSecond db.droppedMutationMessagesPerSecond Cassandra cassandra.node.droppedPagedRangeMessagesPerSecond db.droppedPagedRangeMessagesPerSecond Cassandra cassandra.node.droppedRangeSliceMessagesPerSecond db.droppedRangeSliceMessagesPerSecond Cassandra cassandra.node.droppedReadMessagesPerSecond db.droppedReadMessagesPerSecond Cassandra cassandra.node.droppedReadRepairMessagesPerSecond db.droppedReadRepairMessagesPerSecond Cassandra cassandra.node.droppedRequestResponseMessagesPerSecond db.droppedRequestResponseMessagesPerSecond Cassandra cassandra.node.droppedTraceMessagesPerSecond db.droppedTraceMessagesPerSecond Cassandra cassandra.node.keyCacheCapacityBytes db.keyCacheCapacityBytes Cassandra cassandra.node.keyCacheHitRate db.keyCacheHitRate Cassandra cassandra.node.keyCacheHitsPerSecond db.keyCacheHitsPerSecond Cassandra cassandra.node.keyCacheRequestsPerSecond db.keyCacheRequestsPerSecond Cassandra cassandra.node.keyCacheSizeBytes db.keyCacheSizeBytes Cassandra cassandra.node.liveSsTableCount db.liveSSTableCount Cassandra cassandra.node.loadBytes db.loadBytes Cassandra cassandra.node.query.casReadRequestsPerSecond query.CASReadRequestsPerSecond Cassandra cassandra.node.query.casWriteRequestsPerSecond query.CASWriteRequestsPerSecond Cassandra cassandra.node.query.rangeSliceRequestsPerSecond query.rangeSliceRequestsPerSecond Cassandra cassandra.node.query.rangeSliceTimeoutsPerSecond query.rangeSliceTimeoutsPerSecond Cassandra cassandra.node.query.rangeSliceUnavailablesPerSecond query.rangeSliceUnavailablesPerSecond Cassandra cassandra.node.query.readLatency50ThPercentileMilliseconds query.readLatency50thPercentileMilliseconds Cassandra cassandra.node.query.readLatency75ThPercentileMilliseconds query.readLatency75thPercentileMilliseconds Cassandra cassandra.node.query.readLatency95ThPercentileMilliseconds query.readLatency95thPercentileMilliseconds Cassandra cassandra.node.query.readLatency98ThPercentileMilliseconds query.readLatency98thPercentileMilliseconds Cassandra cassandra.node.query.readLatency999ThPercentileMilliseconds query.readLatency999thPercentileMilliseconds Cassandra cassandra.node.query.readLatency99ThPercentileMilliseconds query.readLatency99thPercentileMilliseconds Cassandra cassandra.node.query.readRequestsPerSecond query.readRequestsPerSecond Cassandra cassandra.node.query.readTimeoutsPerSecond query.readTimeoutsPerSecond Cassandra cassandra.node.query.readUnavailablesPerSecond query.readUnavailablesPerSecond Cassandra cassandra.node.query.viewWriteRequestsPerSecond query.viewWriteRequestsPerSecond Cassandra cassandra.node.query.writeLatency50ThPercentileMilliseconds query.writeLatency50thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency75ThPercentileMilliseconds query.writeLatency75thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency95ThPercentileMilliseconds query.writeLatency95thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency98ThPercentileMilliseconds query.writeLatency98thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency999ThPercentileMilliseconds query.writeLatency999thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency99ThPercentileMilliseconds query.writeLatency99thPercentileMilliseconds Cassandra cassandra.node.query.writeRequestsPerSecond query.writeRequestsPerSecond Cassandra cassandra.node.query.writeTimeoutsPerSecond query.writeTimeoutsPerSecond Cassandra cassandra.node.query.writeUnavailablesPerSecond query.writeUnavailablesPerSecond Cassandra cassandra.node.rowCacheCapacityBytes db.rowCacheCapacityBytes Cassandra cassandra.node.rowCacheHitRate db.rowCacheHitRate Cassandra cassandra.node.rowCacheHitsPerSecond db.rowCacheHitsPerSecond Cassandra cassandra.node.rowCacheRequestsPerSecond db.rowCacheRequestsPerSecond Cassandra cassandra.node.rowCacheSizeBytes db.rowCacheSizeBytes Cassandra cassandra.node.storage.exceptionCount storage.exceptionCount Cassandra cassandra.node.threadPool.antiEntropyStage.activeTasks db.threadpool.internalAntiEntropyStageActiveTasks Cassandra cassandra.node.threadPool.antiEntropyStage.completedTasks db.threadpool.internalAntiEntropyStageCompletedTasks Cassandra cassandra.node.threadPool.antiEntropyStage.currentlyBlockedTasks db.threadpool.internalAntiEntropyStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.antiEntropyStage.pendingTasks db.threadpool.internalAntiEntropyStagePendingTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.activeTasks db.threadpool.internalCacheCleanupExecutorActiveTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.completedTasks db.threadpool.internalCacheCleanupExecutorCompletedTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.currentlyBlockedTasks db.threadpool.internalCacheCleanupExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.pendingTasks db.threadpool.internalCacheCleanupExecutorPendingTasks Cassandra cassandra.node.threadPool.compactionExecutor.activeTasks db.threadpool.internalCompactionExecutorActiveTasks Cassandra cassandra.node.threadPool.compactionExecutor.completedTasks db.threadpool.internalCompactionExecutorCompletedTasks Cassandra cassandra.node.threadPool.compactionExecutor.currentlyBlockedTasks db.threadpool.internalCompactionExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.compactionExecutor.pendingTasks db.threadpool.internalCompactionExecutorPendingTasks Cassandra cassandra.node.threadPool.counterMutationStage.activeTasks db.threadpool.requestCounterMutationStageActiveTasks Cassandra cassandra.node.threadPool.counterMutationStage.completedTasks db.threadpool.requestCounterMutationStageCompletedTasks Cassandra cassandra.node.threadPool.counterMutationStage.currentlyBlockedTasks db.threadpool.requestCounterMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.counterMutationStage.pendingTasks db.threadpool.requestCounterMutationStagePendingTasks Cassandra cassandra.node.threadPool.gossipStage.activeTasks db.threadpool.internalGossipStageActiveTasks Cassandra cassandra.node.threadPool.gossipStage.completedTasks db.threadpool.internalGossipStageCompletedTasks Cassandra cassandra.node.threadPool.gossipStage.currentlyBlockedTasks db.threadpool.internalGossipStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.gossipStage.pendingTasks db.threadpool.internalGossipStagePendingTasks Cassandra cassandra.node.threadPool.hintsDispatcher.activeTasks db.threadpool.internalHintsDispatcherActiveTasks Cassandra cassandra.node.threadPool.hintsDispatcher.completedTasks db.threadpool.internalHintsDispatcherCompletedTasks Cassandra cassandra.node.threadPool.hintsDispatcher.currentlyBlockedTasks db.threadpool.internalHintsDispatcherCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.hintsDispatcher.pendingTasks db.threadpool.internalHintsDispatcherPendingTasks Cassandra cassandra.node.threadPool.internalResponseStage.activeTasks db.threadpool.internalInternalResponseStageActiveTasks Cassandra cassandra.node.threadPool.internalResponseStage.completedTasks db.threadpool.internalInternalResponseStageCompletedTasks Cassandra cassandra.node.threadPool.internalResponseStage.pCurrentlyBlockedTasks db.threadpool.internalInternalResponseStagePCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.internalResponseStage.pendingTasks db.threadpool.internalInternalResponseStagePendingTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.activeTasks db.threadpool.internalMemtableFlushWriterActiveTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.completedTasks db.threadpool.internalMemtableFlushWriterCompletedTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.currentlyBlockedTasks db.threadpool.internalMemtableFlushWriterCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.pendingTasks db.threadpool.internalMemtableFlushWriterPendingTasks Cassandra cassandra.node.threadPool.memtablePostFlush.activeTasks db.threadpool.internalMemtablePostFlushActiveTasks Cassandra cassandra.node.threadPool.memtablePostFlush.completedTasks db.threadpool.internalMemtablePostFlushCompletedTasks Cassandra cassandra.node.threadPool.memtablePostFlush.currentlyBlockedTasks db.threadpool.internalMemtablePostFlushCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtablePostFlush.pendingTasks db.threadpool.internalMemtablePostFlushPendingTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.activeTasks db.threadpool.internalMemtableReclaimMemoryActiveTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.completedTasks db.threadpool.internalMemtableReclaimMemoryCompletedTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.currentlyBlockedTasks db.threadpool.internalMemtableReclaimMemoryCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.pendingTasks db.threadpool.internalMemtableReclaimMemoryPendingTasks Cassandra cassandra.node.threadPool.migrationStage.activeTasks db.threadpool.internalMigrationStageActiveTasks Cassandra cassandra.node.threadPool.migrationStage.completedTasks db.threadpool.internalMigrationStageCompletedTasks Cassandra cassandra.node.threadPool.migrationStage.currentlyBlockedTasks db.threadpool.internalMigrationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.migrationStage.pendingTasks db.threadpool.internalMigrationStagePendingTasks Cassandra cassandra.node.threadPool.miscStage.activeTasks db.threadpool.internalMiscStageActiveTasks Cassandra cassandra.node.threadPool.miscStage.completedTasks db.threadpool.internalMiscStageCompletedTasks Cassandra cassandra.node.threadPool.miscStage.currentlyBlockedTasks db.threadpool.internalMiscStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.miscStage.pendingTasks db.threadpool.internalMiscStagePendingTasks Cassandra cassandra.node.threadPool.mutationStage.activeTasks db.threadpool.requestMutationStageActiveTasks Cassandra cassandra.node.threadPool.mutationStage.completedTasks db.threadpool.requestMutationStageCompletedTasks Cassandra cassandra.node.threadPool.mutationStage.currentlyBlockedTasks db.threadpool.requestMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.mutationStage.pendingTasks db.threadpool.requestMutationStagePendingTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.activeTasks db.threadpool.internalPendingRangeCalculatorActiveTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.completedTasks db.threadpool.internalPendingRangeCalculatorCompletedTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.currentlyBlockedTasks db.threadpool.internalPendingRangeCalculatorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.pendingTasks db.threadpool.internalPendingRangeCalculatorPendingTasks Cassandra cassandra.node.threadPool.readRepairStage.activeTasks db.threadpool.requestReadRepairStageActiveTasks Cassandra cassandra.node.threadPool.readRepairStage.completedTasks db.threadpool.requestReadRepairStageCompletedTasks Cassandra cassandra.node.threadPool.readRepairStage.currentlyBlockedTasks db.threadpool.requestReadRepairStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.readRepairStage.pendingTasks db.threadpool.requestReadRepairStagePendingTasks Cassandra cassandra.node.threadPool.readStage.activeTasks db.threadpool.requestReadStageActiveTasks Cassandra cassandra.node.threadPool.readStage.completedTasks db.threadpool.requestReadStageCompletedTasks Cassandra cassandra.node.threadPool.readStage.currentlyBlockedTasks db.threadpool.requestReadStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.readStage.pendingTasks db.threadpool.requestReadStagePendingTasks Cassandra cassandra.node.threadPool.requestResponseStage.activeTasks db.threadpool.requestRequestResponseStageActiveTasks Cassandra cassandra.node.threadPool.requestResponseStage.completedTasks db.threadpool.requestRequestResponseStageCompletedTasks Cassandra cassandra.node.threadPool.requestResponseStage.currentlyBlockedTasks db.threadpool.requestRequestResponseStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.requestResponseStage.pendingTasks db.threadpool.requestRequestResponseStagePendingTasks Cassandra cassandra.node.threadPool.sampler.activeTasks db.threadpool.internalSamplerActiveTasks Cassandra cassandra.node.threadPool.sampler.completedTasks db.threadpool.internalSamplerCompletedTasks Cassandra cassandra.node.threadPool.sampler.currentlyBlockedTasks db.threadpool.internalSamplerCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.sampler.pendingTasks db.threadpool.internalSamplerPendingTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.activeTasks db.threadpool.internalSecondaryIndexManagementActiveTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.completedTasks db.threadpool.internalSecondaryIndexManagementCompletedTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.currentlyBlockedTasks db.threadpool.internalSecondaryIndexManagementCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.pendingTasks db.threadpool.internalSecondaryIndexManagementPendingTasks Cassandra cassandra.node.threadPool.validationExecutor.activeTasks db.threadpool.internalValidationExecutorActiveTasks Cassandra cassandra.node.threadPool.validationExecutor.completedTasks db.threadpool.internalValidationExecutorCompletedTasks Cassandra cassandra.node.threadPool.validationExecutor.currentlyBlockedTasks db.threadpool.internalValidationExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.validationExecutor.pendingTasks db.threadpool.internalValidationExecutorPendingTasks Cassandra cassandra.node.threadPool.viewMutationStage.activeTasks db.threadpool.requestViewMutationStageActiveTasks Cassandra cassandra.node.threadPool.viewMutationStage.completedTasks db.threadpool.requestViewMutationStageCompletedTasks Cassandra cassandra.node.threadPool.viewMutationStage.currentlyBlockedTasks db.threadpool.requestViewMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.viewMutationStage.pendingTasks db.threadpool.requestViewMutationStagePendingTasks Cassandra cassandra.node.totalHintsInProgress db.totalHintsInProgress Cassandra cassandra.node.totalHintsPerSecond db.totalHintsPerSecond Cassandra cassandra.columnFamily.allMemtablesOffHeapSizeBytes db.allMemtablesOffHeapSizeBytes Cassandra cassandra.columnFamily.allMemtablesOnHeapSizeBytes db.allMemtablesOnHeapSizeBytes Cassandra cassandra.columnFamily.bloomFilterFalseRatio db.bloomFilterFalseRatio Cassandra cassandra.columnFamily.liveDiskSpaceUsedBytes db.liveDiskSpaceUsedBytes Cassandra cassandra.columnFamily.liveSsTableCount db.liveSSTableCount Cassandra cassandra.columnFamily.maxRowSize db.maxRowSize Cassandra cassandra.columnFamily.meanRowSize db.meanRowSize Cassandra cassandra.columnFamily.memtableLiveDataSize db.memtableLiveDataSize Cassandra cassandra.columnFamily.minRowSize db.minRowSize Cassandra cassandra.columnFamily.pendingCompactions db.pendingCompactions Cassandra cassandra.columnFamily.query.readLatency50ThPercentileMilliseconds query.readLatency50thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency75ThPercentileMilliseconds query.readLatency75thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency95ThPercentileMilliseconds query.readLatency95thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency98ThPercentileMilliseconds query.readLatency98thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency999ThPercentileMilliseconds query.readLatency999thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency99ThPercentileMilliseconds query.readLatency99thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readRequestsPerSecond query.readRequestsPerSecond Cassandra cassandra.columnFamily.query.writeLatency50ThPercentileMilliseconds query.writeLatency50thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency75ThPercentileMilliseconds query.writeLatency75thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency95ThPercentileMilliseconds query.writeLatency95thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency98ThPercentileMilliseconds query.writeLatency98thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency999ThPercentileMilliseconds query.writeLatency999thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency99ThPercentileMilliseconds query.writeLatency99thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeRequestsPerSecond query.writeRequestsPerSecond Cassandra cassandra.columnFamily.speculativeRetries db.speculativeRetries Cassandra cassandra.columnFamily.ssTablesPerRead50ThPercentileMilliseconds db.SSTablesPerRead50thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead75ThPercentileMilliseconds db.SSTablesPerRead75thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead95ThPercentileMilliseconds db.SSTablesPerRead95thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead98ThPercentileMilliseconds db.SSTablesPerRead98thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead999ThPercentileMilliseconds db.SSTablesPerRead999thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead99ThPercentileMilliseconds db.SSTablesPerRead99thPercentileMilliseconds Cassandra cassandra.columnFamily.tombstoneScannedHistogram50ThPercentile db.tombstoneScannedHistogram50thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram75ThPercentile db.tombstoneScannedHistogram75thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram95ThPercentile db.tombstoneScannedHistogram95thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram98ThPercentile db.tombstoneScannedHistogram98thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram999ThPercentile db.tombstoneScannedHistogram999thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram99ThPercentile db.tombstoneScannedHistogram99thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogramCount db.tombstoneScannedHistogramCount Consul consul.datacenter.catalog.criticalNodes catalog.criticalNodes Consul consul.datacenter.catalog.passingNodes catalog.passingNodes Consul consul.datacenter.catalog.registeredNodes catalog.registeredNodes Consul consul.datacenter.catalog.upNodes catalog.upNodes Consul consul.datacenter.catalog.warningNodes catalog.warningNodes Consul consul.datacenter.cluster.flaps cluster.flaps Consul consul.datacenter.cluster.suspects cluster.suspects Consul consul.datacenter.raft.commitTime raft.commitTimes Consul consul.datacenter.raft.commitTimeAvgInMilliseconds raft.commitTimeAvgInMilliseconds Consul consul.datacenter.raft.commitTimeMaxInMilliseconds raft.commitTimeMaxInMilliseconds Consul consul.datacenter.raft.completedLeaderElections raft.completedLeaderElections Consul consul.datacenter.raft.initiatedLeaderElections raft.initiatedLeaderElections Consul consul.datacenter.raft.lastContactAvgInMilliseconds raft.lastContactAvgInMilliseconds Consul consul.datacenter.raft.lastContactMaxInMilliseconds raft.lastContactMaxInMilliseconds Consul consul.datacenter.raft.lastContacts raft.lastContacts Consul consul.datacenter.raft.logDispatchAvgInMilliseconds raft.logDispatchAvgInMilliseconds Consul consul.datacenter.raft.logDispatches raft.logDispatches Consul consul.datacenter.raft.logDispatchMaxInMilliseconds raft.logDispatchMaxInMilliseconds Consul consul.datacenter.raft.txns raft.txns Consul consul.agent.aclCacheHitPerSecond agent.aclCacheHit Consul consul.agent.aclCacheMissPerSecond agent.aclCacheMiss Consul consul.agent.client.rpcFailed client.rpcFailed Consul consul.agent.client.rpcLoad client.rpcLoad Consul consul.agent.kvStores agent.kvStoress Consul consul.agent.kvStoresAvgInMilliseconds agent.kvStoresAvgInMilliseconds Consul consul.agent.kvStoresMaxInMilliseconds agent.kvStoresMaxInMilliseconds Consul consul.agent.net.agent.maxLatencyInMilliseconds net.agent.maxLatencyInMilliseconds Consul consul.agent.net.medianLatencyInMilliseconds net.agent.medianLatencyInMilliseconds Consul consul.agent.net.minLatencyInMilliseconds net.agent.minLatencyInMilliseconds Consul consul.agent.net.p25LatencyInMilliseconds net.agent.p25LatencyInMilliseconds Consul consul.agent.net.p75LatencyInMilliseconds net.agent.p75LatencyInMilliseconds Consul consul.agent.net.p90LatencyInMilliseconds net.agent.p90LatencyInMilliseconds Consul consul.agent.net.p95LatencyInMilliseconds net.agent.p95LatencyInMilliseconds Consul consul.agent.net.p99LatencyInMilliseconds net.agent.p99LatencyInMilliseconds Consul consul.agent.peers agent.peers Consul consul.agent.runtime.allocations runtime.allocations Consul consul.agent.runtime.allocationsInBytes runtime.allocationsInBytes Consul consul.agent.runtime.frees runtime.frees Consul consul.agent.runtime.gcCycles runtime.gcCycles Consul consul.agent.runtime.gcPauseInMilliseconds runtime.gcPauseInMilliseconds Consul consul.agent.runtime.goroutines runtime.goroutines Consul consul.agent.runtime.heapObjects runtime.heapObjects Consul consul.agent.runtime.virtualAddressSpaceInBytes runtime.virtualAddressSpaceInBytes Consul consul.agent.staleQueries agent.staleQueries Consul consul.agent.txnAvgInMilliseconds agent.txnAvgInMilliseconds Consul consul.agent.txnMaxInMilliseconds agent.txnMaxInMilliseconds Consul consul.agent.txns agent.txns Couchbase couchbase.bucket.activeItemsEnteringDiskQueuePerSecond bucket.activeItemsEnteringDiskQueuePerSecond Couchbase couchbase.bucket.activeItemsInMemory bucket.activeItemsInMemory Couchbase couchbase.bucket.activeResidentItemsRatio bucket.activeResidentItemsRatio Couchbase couchbase.bucket.averageDiskCommitTimeInMilliseconds bucket.averageDiskCommitTimeInMilliseconds Couchbase couchbase.bucket.averageDiskUpdateTimeInMilliseconds bucket.averageDiskUpdateTimeInMilliseconds Couchbase couchbase.bucket.cacheMisses bucket.cacheMisses Couchbase couchbase.bucket.cacheMissRatio bucket.cacheMissRatio Couchbase couchbase.bucket.casHits bucket.casHits Couchbase couchbase.bucket.casMisses bucket.casMisses Couchbase couchbase.bucket.couchDocsFragmentationPercent bucket.couchDocsFragmentationPercent Couchbase couchbase.bucket.currentConnections bucket.currentConnections Couchbase couchbase.bucket.dataUsedInBytes bucket.dataUsedInBytes Couchbase couchbase.bucket.decrementHitsPerSecond bucket.decrementHitsPerSecond Couchbase couchbase.bucket.decrementMissesPerSecond bucket.decrementMissesPerSecond Couchbase couchbase.bucket.deleteHitsPerSecond bucket.deleteHitsPerSecond Couchbase couchbase.bucket.deleteMissesPerSecond bucket.deleteMissesPerSecond Couchbase couchbase.bucket.diskCreateOperationsPerSecond bucket.diskCreateOperationsPerSecond Couchbase couchbase.bucket.diskFetchesPerSecond bucket.diskFetchesPerSecond Couchbase couchbase.bucket.diskReadsPerSecond bucket.diskReadsPerSecond Couchbase couchbase.bucket.diskUpdateOperationsPerSecond bucket.diskUpdateOperationsPerSecond Couchbase couchbase.bucket.diskUsedInBytes bucket.diskUsedInBytes Couchbase couchbase.bucket.diskWriteQueue bucket.diskWriteQueue Couchbase couchbase.bucket.drainedItemsInQueue bucket.drainedItemsInQueue Couchbase couchbase.bucket.drainedItemsOnDiskQueue bucket.drainedItemsOnDiskQueue Couchbase couchbase.bucket.drainedPendingItemsInQueue bucket.drainedPendingItemsInQueue Couchbase couchbase.bucket.ejectionsPerSecond bucket.ejectionsPerSecond Couchbase couchbase.bucket.evictionsPerSecond bucket.evictionsPerSecond Couchbase couchbase.bucket.getHitsPerSecond bucket.getHitsPerSecond Couchbase couchbase.bucket.getMissesPerSecond bucket.getMissesPerSecond Couchbase couchbase.bucket.hitRatio bucket.hitRatio Couchbase couchbase.bucket.incrementHitsPerSecond bucket.incrementHitsPerSecond Couchbase couchbase.bucket.incrementMissesPerSecond bucket.incrementMissesPerSecond Couchbase couchbase.bucket.itemCount bucket.itemCount Couchbase couchbase.bucket.itemsBeingWritten bucket.itemsBeingWritten Couchbase couchbase.bucket.itemsEjectedFromMemoryToDisk bucket.itemsEjectedFromMemoryToDisk Couchbase couchbase.bucket.itemsOnDiskQueue bucket.itemsOnDiskQueue Couchbase couchbase.bucket.itemsQueuedForStorage bucket.itemsQueuedForStorage Couchbase couchbase.bucket.maximumMemoryUsage bucket.maximumMemoryUsage Couchbase couchbase.bucket.memoryHighWaterMarkInBytes bucket.memoryHighWaterMarkInBytes Couchbase couchbase.bucket.memoryLowWaterMarkInBytes bucket.memoryLowWaterMarkInBytes Couchbase couchbase.bucket.memoryUsedInBytes bucket.memoryUsedInBytes Couchbase couchbase.bucket.metadataInRamInBytes bucket.metadataInRAMInBytes Couchbase couchbase.bucket.missesPerSecond bucket.missesPerSecond Couchbase couchbase.bucket.outOfMemoryErrorsPerSecond bucket.outOfMemoryErrorsPerSecond Couchbase couchbase.bucket.overheadInBytes bucket.overheadInBytes Couchbase couchbase.bucket.pendingItemsInDiskQueue bucket.pendingItemsInDiskQueue Couchbase couchbase.bucket.pendingResidentItemsRatio bucket.pendingResidentItemsRatio Couchbase couchbase.bucket.quotaUtilization bucket.quotaUtilization Couchbase couchbase.bucket.readOperationsPerSecond bucket.readOperationsPerSecond Couchbase couchbase.bucket.readRatePerSecond bucket.readRatePerSecond Couchbase couchbase.bucket.recoverableOutOfMemoryCount bucket.recoverableOutOfMemoryCount Couchbase couchbase.bucket.replicaIndex bucket.replicaIndex Couchbase couchbase.bucket.replicaNumber bucket.replicaNumber Couchbase couchbase.bucket.replicaResidentItemsRatio bucket.replicaResidentItemsRatio Couchbase couchbase.bucket.residentItemsRatio bucket.residentItemsRatio Couchbase couchbase.bucket.temporaryOutOfMemoryErrorsPerSecond bucket.temporaryOutOfMemoryErrorsPerSecond Couchbase couchbase.bucket.threadsNumber bucket.threadsNumber Couchbase couchbase.bucket.totalItems bucket.totalItems Couchbase couchbase.bucket.totalOperationsPerSecond bucket.totalOperationsPerSecond Couchbase couchbase.bucket.viewFragmentationPercent bucket.viewFragmentationPercent Couchbase couchbase.bucket.writeOperationsPerSecond bucket.writeOperationsPerSecond Couchbase couchbase.bucket.writeRatePerSecond bucket.writeRatePerSecond Couchbase couchbase.cluster.autoFailoverCount cluster.autoFailoverCount Couchbase couchbase.cluster.autoFailoverEnabled cluster.autoFailoverEnabled Couchbase couchbase.cluster.databaseFragmentationThreshold cluster.databaseFragmentationThreshold Couchbase couchbase.cluster.diskFreeInBytes cluster.diskFreeInBytes Couchbase couchbase.cluster.diskQuotaTotalInBytes cluster.diskQuotaTotalInBytes Couchbase couchbase.cluster.diskTotalInBytes cluster.diskTotalInBytes Couchbase couchbase.cluster.diskUsedByDataInBytes cluster.diskUsedByDataInBytes Couchbase couchbase.cluster.diskUsedInBytes cluster.diskUsedInBytes Couchbase couchbase.cluster.indexFragmentationThreshold cluster.indexFragmentationThreshold Couchbase couchbase.cluster.maximumBucketCount cluster.maximumBucketCount Couchbase couchbase.cluster.memoryQuotaTotalInBytes cluster.memoryQuotaTotalInBytes Couchbase couchbase.cluster.memoryQuotaTotalPerNodeInBytes cluster.memoryQuotaTotalPerNodeInBytes Couchbase couchbase.cluster.memoryQuotaUsedInBytes cluster.memoryQuotaUsedInBytes Couchbase couchbase.cluster.memoryQuotaUsedPerNodeInBytes cluster.memoryQuotaUsedPerNodeInBytes Couchbase couchbase.cluster.memoryTotalInBytes cluster.memoryTotalInBytes Couchbase couchbase.cluster.memoryUsedByDataInBytes cluster.memoryUsedByDataInBytes Couchbase couchbase.cluster.memoryUsedInBytes cluster.memoryUsedInBytes Couchbase couchbase.cluster.viewFragmentationThreshold cluster.viewFragmentationThreshold Couchbase couchbase.node.backgroundFetches node.backgroundFetches Couchbase couchbase.node.cmdGet node.cmdGet Couchbase couchbase.node.couchDocsActualDiskSizeInBytes node.couchDocsActualDiskSizeInBytes Couchbase couchbase.node.couchDocsDataSizeInBytes node.couchDocsDataSizeInBytes Couchbase couchbase.node.couchSpatialDataSizeInBytes node.couchSpatialDataSizeInBytes Couchbase couchbase.node.couchSpatialDiskSizeInBytes node.couchSpatialDiskSizeInBytes Couchbase couchbase.node.couchViewsActualDiskSizeInBytes node.couchViewsActualDiskSizeInBytes Couchbase couchbase.node.couchViewsDataSizeInBytes node.couchViewsDataSizeInBytes Couchbase couchbase.node.cpuUtilization node.cpuUtilization Couchbase couchbase.node.currentItems node.currentItems Couchbase couchbase.node.currentItemsTotal node.currentItemsTotal Couchbase couchbase.node.getHits node.getHits Couchbase couchbase.node.memoryFreeInBytes node.memoryFreeInBytes Couchbase couchbase.node.memoryTotalInBytes node.memoryTotalInBytes Couchbase couchbase.node.memoryUsedInBytes node.memoryUsedInBytes Couchbase couchbase.node.ops node.ops Couchbase couchbase.node.swapTotalInBytes node.swapTotalInBytes Couchbase couchbase.node.swapUsedInBytes node.swapUsedInBytes Couchbase couchbase.node.uptimeInMilliseconds node.uptimeInMilliseconds Couchbase couchbase.node.vbucketActiveNonResidentItems node.vbucketActiveNonResidentItems Couchbase couchbase.node.vbucketInMemoryItems node.vbucketInMemoryItems Couchbase couchbase.queryengine.activeRequests queryengine.activeRequests Couchbase couchbase.queryengine.averageRequestTimeInMilliseconds queryengine.averageRequestTimeInMilliseconds Couchbase couchbase.queryengine.completedLimit queryengine.completedLimit Couchbase couchbase.queryengine.completedRequests queryengine.completedRequests Couchbase couchbase.queryengine.completedThresholdInMilliseconds queryengine.completedThresholdInMilliseconds Couchbase couchbase.queryengine.cores queryengine.cores Couchbase couchbase.queryengine.garbageCollectionNumber queryengine.garbageCollectionNumber Couchbase couchbase.queryengine.garbageCollectionPaused queryengine.garbageCollectionPaused Couchbase couchbase.queryengine.garbageCollectionTimePausedInMilliseconds queryengine.garbageCollectionTimePausedInMilliseconds Couchbase couchbase.queryengine.medianRequestTimeInMilliseconds queryengine.medianRequestTimeInMilliseconds Couchbase couchbase.queryengine.preparedStatementUtilization queryengine.preparedStatementUtilization Couchbase couchbase.queryengine.requestsLast15MinutesPerSecond queryengine.requestsLast15MinutesPerSecond Couchbase couchbase.queryengine.requestsLast1MinutesPerSecond queryengine.requestsLast1MinutesPerSecond Couchbase couchbase.queryengine.requestsLast5MinutesPerSecond queryengine.requestsLast5MinutesPerSecond Couchbase couchbase.queryengine.requestTime80thPercentileInMilliseconds queryengine.requestTime80thPercentileInMilliseconds Couchbase couchbase.queryengine.requestTime95thPercentileInMilliseconds queryengine.requestTime95thPercentileInMilliseconds Couchbase couchbase.queryengine.requestTime99thPercentileInMilliseconds queryengine.requestTime99thPercentileInMilliseconds Couchbase couchbase.queryengine.systemCpuUtilization queryengine.systemCPUUtilization Couchbase couchbase.queryengine.systemMemoryInBytes queryengine.systemMemoryInBytes Couchbase couchbase.queryengine.totalMemoryInBytes queryengine.totalMemoryInBytes Couchbase couchbase.queryengine.totalThreads queryengine.totalThreads Couchbase couchbase.queryengine.uptimeInMilliseconds queryengine.uptimeInMilliseconds Couchbase couchbase.queryengine.usedMemoryInBytes queryengine.usedMemoryInBytes Couchbase couchbase.queryengine.userCpuUtilization queryengine.userCPUUtilization Docker docker.container.cpuKernelPercent cpuKernelPercent Docker docker.container.cpuLimitCores cpuLimitCores Docker docker.container.cpuPercent cpuPercent Docker docker.container.cpuThrottlePeriods cpuThrottlePeriods Docker docker.container.cpuThrottleTimeMs cpuThrottleTimeMs Docker docker.container.cpuUsedCores cpuUsedCores Docker docker.container.cpuUsedCoresPercent cpuUsedCoresPercent Docker docker.container.cpuUserPercent cpuUserPercent Docker docker.container.ioReadBytesPerSecond ioReadBytesPerSecond Docker docker.container.ioReadCountPerSecond ioReadCountPerSecond Docker docker.container.ioTotalBytes ioTotalBytes Docker docker.container.ioTotalReadBytes ioTotalReadBytes Docker docker.container.ioTotalReadCount ioTotalReadCount Docker docker.container.ioTotalWriteBytes ioTotalWriteBytes Docker docker.container.ioTotalWriteCount ioTotalWriteCount Docker docker.container.ioWriteBytesPerSecond ioWriteBytesPerSecond Docker docker.container.ioWriteCountPerSecond ioWriteCountPerSecond Docker docker.container.memoryCacheBytes memoryCacheBytes Docker docker.container.memoryResidentSizeBytes memoryResidentSizeBytes Docker docker.container.memorySizeLimitBytes memorySizeLimitBytes Docker docker.container.memoryUsageBytes memoryUsageBytes Docker docker.container.memoryUsageLimitPercent memoryUsageLimitPercent Docker docker.container.networkRxBytes networkRxBytes Docker docker.container.networkRxBytesPerSecond networkRxBytesPerSecond Docker docker.container.networkRxDropped networkRxDropped Docker docker.container.networkRxDroppedPerSecond networkRxDroppedPerSecond Docker docker.container.networkRxErrors networkRxErrors Docker docker.container.networkRxErrorsPerSecond networkRxErrorsPerSecond Docker docker.container.networkRxPackets networkRxPackets Docker docker.container.networkRxPacketsPerSecond networkRxPacketsPerSecond Docker docker.container.networkTxBytes networkTxBytes Docker docker.container.networkTxBytesPerSecond networkTxBytesPerSecond Docker docker.container.networkTxDropped networkTxDropped Docker docker.container.networkTxDroppedPerSecond networkTxDroppedPerSecond Docker docker.container.networkTxErrors networkTxErrors Docker docker.container.networkTxErrorsPerSecond networkTxErrorsPerSecond Docker docker.container.networkTxPackets networkTxPackets Docker docker.container.networkTxPacketsPerSecond networkTxPacketsPerSecond Docker docker.container.pids pids Docker docker.container.processCount processCount Docker docker.container.processCountLimit processCountLimit Docker docker.container.restartCount restartCount Docker docker.container.threadCount threadCount Docker docker.container.threadCountLimit threadCountLimit ElasticSearch elasticsearch.cluster.dataNodes cluster.dataNodes ElasticSearch elasticsearch.cluster.nodes cluster.nodes ElasticSearch elasticsearch.cluster.shards.active shards.active ElasticSearch elasticsearch.cluster.shards.initializing shards.initializing ElasticSearch elasticsearch.cluster.shards.primaryActive shards.primaryActive ElasticSearch elasticsearch.cluster.shards.relocating shards.relocating ElasticSearch elasticsearch.cluster.shards.unassigned shards.unassigned ElasticSearch elasticsearch.cluster.tempData temp-data ElasticSearch elasticsearch.index.docs index.docs ElasticSearch elasticsearch.index.docsDeleted index.docsDeleted ElasticSearch elasticsearch.index.primaryShards index.primaryShards ElasticSearch elasticsearch.index.primaryStoreSizeInBytes index.primaryStoreSizeInBytes ElasticSearch elasticsearch.index.replicaShards index.replicaShards ElasticSearch elasticsearch.index.rollup.docsCount primaries.docsnumber ElasticSearch elasticsearch.index.rollup.docsDeleted primaries.docsDeleted ElasticSearch elasticsearch.index.rollup.flushTotal primaries.flushesTotal ElasticSearch elasticsearch.index.rollup.flushTotalTimeInMilliseconds primaries.flushTotalTimeInMilliseconds ElasticSearch elasticsearch.index.rollup.get.documentsExist primaries.get.documentsExist ElasticSearch elasticsearch.index.rollup.get.documentsExistInMilliseconds primaries.get.documentsExistInMilliseconds ElasticSearch elasticsearch.index.rollup.get.documentsMissing primaries.get.documentsMissing ElasticSearch elasticsearch.index.rollup.get.documentsMissingInMilliseconds primaries.get.documentsMissingInMilliseconds ElasticSearch elasticsearch.index.rollup.get.requests primaries.get.requests ElasticSearch elasticsearch.index.rollup.get.requestsCurrent primaries.get.requestsCurrent ElasticSearch elasticsearch.index.rollup.get.requestsInMilliseconds primaries.get.requestsInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyDeleted primaries.index.docsCurrentlyDeleted ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyDeletedInMilliseconds primaries.index.docsCurrentlyDeletedInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyIndexing primaries.index.docsCurrentlyIndexing ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyIndexingInMilliseconds primaries.index.docsCurrentlyIndexingInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsDeleted primaries.index.docsDeleted ElasticSearch elasticsearch.index.rollup.index.docsTotal primaries.index.docsTotal ElasticSearch elasticsearch.index.rollup.indexRefreshesTotal primaries.indexRefreshesTotal ElasticSearch elasticsearch.index.rollup.indexRefreshesTotalInMilliseconds primaries.indexRefreshesTotalInMilliseconds ElasticSearch elasticsearch.index.rollup.merges.current primaries.merges.current ElasticSearch elasticsearch.index.rollup.merges.docsSegmentsCurrentlyMerged primaries.merges.docsSegmentsCurrentlyMerged ElasticSearch elasticsearch.index.rollup.merges.docsTotal primaries.merges.docsTotal ElasticSearch elasticsearch.index.rollup.merges.segmentsCurrentlyMergedInBytes primaries.merges.segmentsCurrentlyMergedInBytes ElasticSearch elasticsearch.index.rollup.merges.segmentsTotal primaries.merges.segmentsTotal ElasticSearch elasticsearch.index.rollup.merges.segmentsTotalInBytes primaries.merges.segmentsTotalInBytes ElasticSearch elasticsearch.index.rollup.merges.segmentsTotalInMilliseconds primaries.merges.segmentsTotalInMilliseconds ElasticSearch elasticsearch.index.rollup.queriesInMilliseconds primaries.queriesInMilliseconds ElasticSearch elasticsearch.index.rollup.queriesTotal primaries.queriesTotal ElasticSearch elasticsearch.index.rollup.queryActive primaries.queryActive ElasticSearch elasticsearch.index.rollup.queryFetches primaries.queryFetches ElasticSearch elasticsearch.index.rollup.queryFetchesInMilliseconds primaries.queryFetchesInMilliseconds ElasticSearch elasticsearch.index.rollup.queryFetchesTotal primaries.queryFetchesTotal ElasticSearch elasticsearch.index.rollup.sizeInBytes primaries.sizeInBytes ElasticSearch elasticsearch.index.storeSizeInBytes index.storeSizeInBytes ElasticSearch elasticsearch.node.activeSearches activeSearches ElasticSearch elasticsearch.node.activeSearchesInMilliseconds activeSearchesInMilliseconds ElasticSearch elasticsearch.node.breakers.estimatedSizeFieldDataCircuitBreakerInBytes breakers.estimatedSizeFieldDataCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.estimatedSizeParentCircuitBreakerInBytes breakers.estimatedSizeParentCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.estimatedSizeRequestCircuitBreakerInBytes breakers.estimatedSizeRequestCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.fieldDataCircuitBreakerTripped breakers.fieldDataCircuitBreakerTripped ElasticSearch elasticsearch.node.breakers.parentCircuitBreakerTripped breakers.parentCircuitBreakerTripped ElasticSearch elasticsearch.node.breakers.requestCircuitBreakerTripped breakers.requestCircuitBreakerTripped ElasticSearch elasticsearch.node.flush.indexRefreshesTotal flush.indexRefreshesTotal ElasticSearch elasticsearch.node.flush.indexRefreshesTotalInMilliseconds flush.indexRefreshesTotalInMilliseconds ElasticSearch elasticsearch.node.fs.bytesAvailableJvmInBytes fs.bytesAvailableJVMInBytes ElasticSearch elasticsearch.node.fs.dataRead fs.bytesReadsInBytes ElasticSearch elasticsearch.node.fs.dataWritten fs.writesInBytes ElasticSearch elasticsearch.node.fs.ioOperations fs.iOOperations ElasticSearch elasticsearch.node.fs.readOperations fs.reads ElasticSearch elasticsearch.node.fs.totalSizeInBytes fs.totalSizeInBytes ElasticSearch elasticsearch.node.fs.unallocatedBytes fs.unallocatedBytesInBYtes ElasticSearch elasticsearch.node.fs.writeOperations fs.writeOperations ElasticSearch elasticsearch.node.get.currentRequestsRunning get.currentRequestsRunning ElasticSearch elasticsearch.node.get.requestsDocumentExists get.requestsDocumentExists ElasticSearch elasticsearch.node.get.requestsDocumentExistsInMilliseconds get.requestsDocumentExistsInMilliseconds ElasticSearch elasticsearch.node.get.requestsDocumentMissing get.requestsDocumentMissing ElasticSearch elasticsearch.node.get.requestsDocumentMissingInMilliseconds get.requestsDocumentMissingInMilliseconds ElasticSearch elasticsearch.node.get.timeGetRequestsInMilliseconds get.timeGetRequestsInMilliseconds ElasticSearch elasticsearch.node.get.totalGetRequests get.totalGetRequests ElasticSearch elasticsearch.node.http.currentOpenConnections http.currentOpenConnections ElasticSearch elasticsearch.node.http.openedConnections http.openedConnections ElasticSearch elasticsearch.node.index.indexingOperationsFailed indices.indexingOperationsFailed ElasticSearch elasticsearch.node.index.indexingWaitedThrottlingInMilliseconds indices.indexingWaitedThrottlingInMilliseconds ElasticSearch elasticsearch.node.index.memoryQueryCacheInBytes indices.memoryQueryCacheInBytes ElasticSearch elasticsearch.node.index.numberIndices indices.numberIndices ElasticSearch elasticsearch.node.index.queryCacheEvictions indices.queryCacheEvictions ElasticSearch elasticsearch.node.index.queryCacheHits indices.queryCacheHits ElasticSearch elasticsearch.node.index.queryCacheMisses indices.queryCacheMisses ElasticSearch elasticsearch.node.index.recoveryOngoingShardSource indices.recoveryOngoingShardSource ElasticSearch elasticsearch.node.index.recoveryOngoingShardTarget indices.recoveryOngoingShardTarget ElasticSearch elasticsearch.node.index.recoveryWaitedThrottlingInMilliseconds indices.recoveryWaitedThrottlingInMilliseconds ElasticSearch elasticsearch.node.index.requestCacheEvictions indices.requestCacheEvictions ElasticSearch elasticsearch.node.index.requestCacheHits indices.requestCacheHits ElasticSearch elasticsearch.node.index.requestCacheMemoryInBytes indices.requestCacheMemoryInBytes ElasticSearch elasticsearch.node.index.requestCacheMisses indices.requestCacheMisses ElasticSearch elasticsearch.node.index.segmentsIndexShard indices.segmentsIndexShard ElasticSearch elasticsearch.node.index.segmentsMemoryUsedDocValuesInBytes indices.segmentsMemoryUsedDocValuesInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedFixedBitSetInBytes indices.segmentsMemoryUsedFixedBitSetInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedIndexSegmentsInBytes indices.segmentsMemoryUsedIndexSegmentsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedIndexWriterInBytes indices.segmentsMemoryUsedIndexWriterInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedNormsInBytes indices.segmentsMemoryUsedNormsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedSegmentVersionMapInBytes indices.segmentsMemoryUsedSegmentVersionMapInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedStoredFieldsInBytes indices.segmentsMemoryUsedStoredFieldsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedTermsInBytes indices.segmentsMemoryUsedTermsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedTermVectorsInBytes indices.segmentsMemoryUsedTermVectorsInBytes ElasticSearch elasticsearch.node.index.translogOperations indices.translogOperations ElasticSearch elasticsearch.node.index.translogOperationsInBytes indices.translogOperationsInBytes ElasticSearch elasticsearch.node.indexing.docsCurrentlyDeleted indexing.docsCurrentlyDeleted ElasticSearch elasticsearch.node.indexing.documentsCurrentlyIndexing indexing.documentsCurrentlyIndexing ElasticSearch elasticsearch.node.indexing.documentsIndexed indexing.documentsIndexed ElasticSearch elasticsearch.node.indexing.timeDeletingDocumentsInMilliseconds indexing.timeDeletingDocumentsInMilliseconds ElasticSearch elasticsearch.node.indexing.timeIndexingDocumentsInMilliseconds indexing.timeIndexingDocumentsInMilliseconds ElasticSearch elasticsearch.node.indexing.totalDocumentsDeleted indexing.totalDocumentsDeleted ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsOldGenerationObjects jvm.gc.majorCollectionsOldGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsOldGenerationObjectsInMilliseconds jvm.gc.majorCollectionsOldGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsYoungGenerationObjects jvm.gc.majorCollectionsYoungGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsYoungGenerationObjectsInMilliseconds jvm.gc.majorCollectionsYoungGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.gc.minorCollectionsYoungGenerationObjects jvm.gc.minorCollectionsYoungGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.minorCollectionsYoungGenerationObjectsInMilliseconds jvm.gc.minorCollectionsYoungGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.mem.heapCommittedInBytes jvm.mem.heapCommittedInBytes ElasticSearch elasticsearch.node.jvm.mem.heapMaxInBytes jvm.mem.heapMaxInBytes ElasticSearch elasticsearch.node.jvm.mem.heapUsed jvm.mem.heapUsed ElasticSearch elasticsearch.node.jvm.mem.heapUsedInBytes jvm.mem.heapUsedInBytes ElasticSearch elasticsearch.node.jvm.mem.maxOldGenerationHeapInBytes jvm.mem.maxOldGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.maxSurvivorSpaceInBytes jvm.mem.maxSurvivorSpaceInBYtes ElasticSearch elasticsearch.node.jvm.mem.maxYoungGenerationHeapInBytes jvm.mem.maxYoungGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.nonHeapCommittedInBytes jvm.mem.nonHeapCommittedInBytes ElasticSearch elasticsearch.node.jvm.mem.nonHeapUsedInBytes jvm.mem.nonHeapUsedInBytes ElasticSearch elasticsearch.node.jvm.mem.usedOldGenerationHeapInBytes jvm.mem.usedOldGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.usedSurvivorSpaceInBytes jvm.mem.usedSurvivorSpaceInBytes ElasticSearch elasticsearch.node.jvm.mem.usedYoungGenerationHeapInBytes jvm.mem.usedYoungGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.threadsActive jvm.ThreadsActive ElasticSearch elasticsearch.node.jvm.threadsPeak jvm.ThreadsPeak ElasticSearch elasticsearch.node.merges.currentActive merges.currentActive ElasticSearch elasticsearch.node.merges.docsSegmentMerges merges.docsSegmentMerges ElasticSearch elasticsearch.node.merges.docsSegmentsMerging merges.docsSegmentsMerging ElasticSearch elasticsearch.node.merges.mergedSegmentsInBytes merges.mergedSegmentsInBytes ElasticSearch elasticsearch.node.merges.segmentMerges merges.segmentMerges ElasticSearch elasticsearch.node.merges.sizeSegmentsMergingInBytes merges.sizeSegmentsMergingInBytes ElasticSearch elasticsearch.node.merges.totalSegmentMergingInMilliseconds merges.totalSegmentMergingInMilliseconds ElasticSearch elasticsearch.node.openFd openFD ElasticSearch elasticsearch.node.queriesTotal queriesTotal ElasticSearch elasticsearch.node.refresh.total refresh.total ElasticSearch elasticsearch.node.refresh.totalInMilliseconds refresh.totalInMilliseconds ElasticSearch elasticsearch.node.searchFetchCurrentlyRunning searchFetchCurrentlyRunning ElasticSearch elasticsearch.node.searchFetches searchFetches ElasticSearch elasticsearch.node.sizeStoreInBytes sizeStoreInBytes ElasticSearch elasticsearch.node.threadpool.activeFetchShardStarted threadpool.activeFetchShardStarted ElasticSearch elasticsearch.node.threadpool.bulkActive threadpool.bulkActive ElasticSearch elasticsearch.node.threadpool.bulkQueue threadpool.bulkQueue ElasticSearch elasticsearch.node.threadpool.bulkRejected threadpool.bulkRejected ElasticSearch elasticsearch.node.threadpool.bulkThreads threadpool.bulkThreads ElasticSearch elasticsearch.node.threadpool.fetchShardStartedQueue threadpool.fetchShardStartedQueue ElasticSearch elasticsearch.node.threadpool.fetchShardStartedRejected threadpool.fetchShardStartedRejected ElasticSearch elasticsearch.node.threadpool.fetchShardStartedThreads threadpool.fetchShardStartedThreads ElasticSearch elasticsearch.node.threadpool.fetchShardStoreActive threadpool.fetchShardStoreActive ElasticSearch elasticsearch.node.threadpool.fetchShardStoreQueue threadpool.fetchShardStoreQueue ElasticSearch elasticsearch.node.threadpool.fetchShardStoreRejected threadpool.fetchShardStoreRejected ElasticSearch elasticsearch.node.threadpool.fetchShardStoreThreads threadpool.fetchShardStoreThreads ElasticSearch elasticsearch.node.threadpool.flushActive threadpool.flushActive ElasticSearch elasticsearch.node.threadpool.flushQueue threadpool.flushQueue ElasticSearch elasticsearch.node.threadpool.flushRejected threadpool.flushRejected ElasticSearch elasticsearch.node.threadpool.flushThreads threadpool.flushThreads ElasticSearch elasticsearch.node.threadpool.forceMergeActive threadpool.forceMergeActive ElasticSearch elasticsearch.node.threadpool.forceMergeQueue threadpool.forceMergeQueue ElasticSearch elasticsearch.node.threadpool.forceMergeRejected threadpool.forceMergeRejected ElasticSearch elasticsearch.node.threadpool.forceMergeThreads threadpool.forceMergeThreads ElasticSearch elasticsearch.node.threadpool.genericActive threadpool.genericActive ElasticSearch elasticsearch.node.threadpool.genericQueue threadpool.genericQueue ElasticSearch elasticsearch.node.threadpool.genericRejected threadpool.genericRejected ElasticSearch elasticsearch.node.threadpool.genericThreads threadpool.genericThreads ElasticSearch elasticsearch.node.threadpool.getActive threadpool.getActive ElasticSearch elasticsearch.node.threadpool.getQueue threadpool.getQueue ElasticSearch elasticsearch.node.threadpool.getRejected threadpool.getRejected ElasticSearch elasticsearch.node.threadpool.getThreads threadpool.getThreads ElasticSearch elasticsearch.node.threadpool.indexActive threadpool.indexActive ElasticSearch elasticsearch.node.threadpool.indexQueue threadpool.indexQueue ElasticSearch elasticsearch.node.threadpool.indexRejected threadpool.indexRejected ElasticSearch elasticsearch.node.threadpool.indexThreads threadpool.indexThreads ElasticSearch elasticsearch.node.threadpool.listenerActive threadpool.listenerActive ElasticSearch elasticsearch.node.threadpool.listenerQueue threadpool.listenerQueue ElasticSearch elasticsearch.node.threadpool.listenerRejected threadpool.listenerRejected ElasticSearch elasticsearch.node.threadpool.listenerThreads threadpool.listenerThreads ElasticSearch elasticsearch.node.threadpool.managementActive threadpool.managementActive ElasticSearch elasticsearch.node.threadpool.managementQueue threadpool.managementQueue ElasticSearch elasticsearch.node.threadpool.managementRejected threadpool.managementRejected ElasticSearch elasticsearch.node.threadpool.managementThreads threadpool.managementThreads ElasticSearch elasticsearch.node.threadpool.refreshActive threadpool.refreshActive ElasticSearch elasticsearch.node.threadpool.refreshQueue threadpool.refreshQueue ElasticSearch elasticsearch.node.threadpool.refreshRejected threadpool.refreshRejected ElasticSearch elasticsearch.node.threadpool.refreshThreads threadpool.refreshThreads ElasticSearch elasticsearch.node.threadpool.searchActive threadpool.searchActive ElasticSearch elasticsearch.node.threadpool.searchQueue threadpool.searchQueue ElasticSearch elasticsearch.node.threadpool.searchRejected threadpool.searchRejected ElasticSearch elasticsearch.node.threadpool.searchThreads threadpool.searchThreads ElasticSearch elasticsearch.node.threadpool.snapshotActive threadpool.snapshotActive ElasticSearch elasticsearch.node.threadpool.snapshotQueue threadpool.snapshotQueue ElasticSearch elasticsearch.node.threadpool.snapshotRejected threadpool.snapshotRejected ElasticSearch elasticsearch.node.threadpool.snapshotThreads threadpool.snapshotThreads ElasticSearch elasticsearch.node.transport.connectionsOpened transport.connectionsOpened ElasticSearch elasticsearch.node.transport.packetsReceived transport.packetsReceived ElasticSearch elasticsearch.node.transport.packetsReceivedInBytes transport.packetsReceivedInBytes ElasticSearch elasticsearch.node.transport.packetsSent transport.packetsSent ElasticSearch elasticsearch.node.transport.packetsSentInBytes transport.packetsSentInBytes F5 f5.node.availabilityState node.availabilityState F5 f5.node.connections node.connections F5 f5.node.connectionsPerSecond node.connectionsPerSecond F5 f5.node.enabled node.enabled F5 f5.node.inDataInBytesPerSecond node.inDataInBytesPerSecond F5 f5.node.monitorStatus node.monitorStatus F5 f5.node.outDataInBytesPerSecond node.outDataInBytesPerSecond F5 f5.node.packetsReceivedPerSecond node.packetsReceivedPerSecond F5 f5.node.packetsSentPerSecond node.packetsSentPerSecond F5 f5.node.requestsPerSecond node.requestsPerSecond F5 f5.node.sessions node.sessions F5 f5.node.sessionStatus node.sessionStatus F5 f5.poolMember.availabilityState member.availabilityState F5 f5.poolMember.connections member.connections F5 f5.poolMember.enabled member.enabled F5 f5.poolMember.inDataInBytesPerSecond member.inDataInBytesPerSecond F5 f5.poolMember.monitorStatus member.monitorStatus F5 f5.poolMember.outDataInBytesPerSecond member.outDataInBytesPerSecond F5 f5.poolMember.packetsReceivedPerSecond member.packetsReceivedPerSecond F5 f5.poolMember.packetsSentPerSecond member.packetsSentPerSecond F5 f5.poolMember.requestsPerSecond member.requestsPerSecond F5 f5.poolMember.sessions member.sessions F5 f5.poolMember.sessionStatus member.sessionStatus F5 f5.pool.activeMembers pool.activeMembers F5 f5.pool.availabilityState pool.availabilityState F5 f5.pool.connections pool.connections F5 f5.pool.connqAgeEdm pool.connqAgeEdm F5 f5.pool.connqAgeEma pool.connqAgeEma F5 f5.pool.connqAgeHead pool.connqAgeHead F5 f5.pool.connqAgeMax pool.connqAgeMax F5 f5.pool.connqAllAgeEdm pool.connqAllAgeEdm F5 f5.pool.connqAllAgeEma pool.connqAllAgeEma F5 f5.pool.connqAllAgeHead pool.connqAllAgeHead F5 f5.pool.connqAllAgeMax pool.connqAllAgeMax F5 f5.pool.connqAllDepth pool.connqAllDepth F5 f5.pool.connqDepth pool.connqDepth F5 f5.pool.currentConnections pool.currentConnections F5 f5.pool.enabled pool.enabled F5 f5.pool.inDataInBytesPerSecond pool.inDataInBytesPerSecond F5 f5.pool.minActiveMembers pool.minActiveMembers F5 f5.pool.outDataInBytesPerSecond pool.outDataInBytesPerSecond F5 f5.pool.packetsReceivedPerSecond pool.packetsReceivedPerSecond F5 f5.pool.packetsSentPerSecond pool.packetsSentPerSecond F5 f5.pool.requestsPerSecond pool.requestsPerSecond F5 f5.pool.sessions pool.sessions F5 f5.system.cpuIdleTicksPerSecond system.cpuIdleTicksPerSecond F5 f5.system.cpuIdleUtilization system.cpuIdleUtilization F5 f5.system.cpuInterruptRequestUtilization system.cpuInterruptRequestUtilization F5 f5.system.cpuIoWaitUtilization system.cpuIOWaitUtilization F5 f5.system.cpuNiceLevelUtilization system.cpuNiceLevelUtilization F5 f5.system.cpuSoftInterruptRequestUtilization system.cpuSoftInterruptRequestUtilization F5 f5.system.cpuStolenUtilization system.cpuStolenUtilization F5 f5.system.cpuSystemTicksPerSecond system.cpuSystemTicksPerSecond F5 f5.system.cpuSystemUtilization system.cpuSystemUtilization F5 f5.system.cpuUserTicksPerSecond system.cpuUserTicksPerSecond F5 f5.system.cpuUserUtilization system.cpuUserUtilization F5 f5.system.memoryFreeInBytes system.memoryFreeInBytes F5 f5.system.memoryTotalInBytes system.memoryTotalInBytes F5 f5.system.memoryUsedInBytes system.memoryUsedInBytes F5 f5.system.otherMemoryFreeInBytes system.otherMemoryFreeInBytes F5 f5.system.otherMemoryTotalInBytes system.otherMemoryTotalInBytes F5 f5.system.otherMemoryUsedInBytes system.otherMemoryUsedInBytes F5 f5.system.swapFreeInBytes system.swapFreeInBytes F5 f5.system.swapTotalInBytes system.swapTotalInBytes F5 f5.system.swapUsedInBytes system.swapUsedInBytes F5 f5.system.tmmMemoryFreeInBytes system.tmmMemoryFreeInBytes F5 f5.system.tmmMemoryTotalInBytes system.tmmMemoryTotalInBytes F5 f5.system.tmmMemoryUsedInBytes system.tmmMemoryUsedInBytes F5 f5.virtualserver.availabilityState virtualserver.availabilityState F5 f5.virtualserver.clientsideConnectionsPerSecond virtualserver.clientsideConnectionsPerSecond F5 f5.virtualserver.connections virtualserver.connections F5 f5.virtualserver.csMaxConnDur virtualserver.csMaxConnDur F5 f5.virtualserver.csMeanConnDur virtualserver.csMeanConnDur F5 f5.virtualserver.csMinConnDur virtualserver.csMinConnDur F5 f5.virtualserver.enabled virtualserver.enabled F5 f5.virtualserver.ephemeralBytesInPerSecond virtualserver.ephemeralBytesInPerSecond F5 f5.virtualserver.ephemeralBytesOutPerSecond virtualserver.ephemeralBytesOutPerSecond F5 f5.virtualserver.ephemeralConnectionsPerSecond virtualserver.ephemeralConnectionsPerSecond F5 f5.virtualserver.ephemeralCurrentConnections virtualserver.ephemeralCurrentConnections F5 f5.virtualserver.ephemeralEvictedConnectionsPerSecond virtualserver.ephemeralEvictedConnectionsPerSecond F5 f5.virtualserver.ephemeralMaxConnections virtualserver.ephemeralMaxConnections F5 f5.virtualserver.ephemeralPacketsReceivedPerSecond virtualserver.ephemeralPacketsReceivedPerSecond F5 f5.virtualserver.ephemeralPacketsSentPerSecond virtualserver.ephemeralPacketsSentPerSecond F5 f5.virtualserver.ephemeralSlowKilledPerSecond virtualserver.ephemeralSlowKilledPerSecond F5 f5.virtualserver.evictedConnsPerSecond virtualserver.evictedConnsPerSecond F5 f5.virtualserver.inDataInBytesPerSecond virtualserver.inDataInBytesPerSecond F5 f5.virtualserver.outDataInBytesPerSecond virtualserver.outDataInBytesPerSecond F5 f5.virtualserver.packetsReceivedPerSecond virtualserver.packetsReceivedPerSecond F5 f5.virtualserver.packetsSentPerSecond virtualserver.packetsSentPerSecond F5 f5.virtualserver.requestsPerSecond virtualserver.requestsPerSecond F5 f5.virtualserver.slowKilledPerSecond virtualserver.slowKilledPerSecond F5 f5.virtualserver.usageRatio virtualserver.usageRatio HAProxy haproxy.backend.activeServers backend.activeServers HAProxy haproxy.backend.averageConnectTimeInSeconds backend.averageConnectTimeInSeconds HAProxy haproxy.backend.averageQueueTimeInSeconds backend.averageQueueTimeInSeconds HAProxy haproxy.backend.averageResponseTimeInSeconds backend.averageResponseTimeInSeconds HAProxy haproxy.backend.averageTotalSessionTimeInSeconds backend.averageTotalSessionTimeInSeconds HAProxy haproxy.backend.backupServers backend.backupServers HAProxy haproxy.backend.bytesInPerSecond backend.bytesInPerSecond HAProxy haproxy.backend.bytesOutPerSecond backend.bytesOutPerSecond HAProxy haproxy.backend.bytesThatBypassedCompressorPerSecond backend.bytesThatBypassedCompressorPerSecond HAProxy haproxy.backend.connectingRequestErrorsPerSecond backend.connectingRequestErrorsPerSecond HAProxy haproxy.backend.connectionRetriesPerSecond backend.connectionRetriesPerSecond HAProxy haproxy.backend.currentQueuedRequestsWithoutServer backend.currentQueuedRequestsWithoutServer HAProxy haproxy.backend.currentSessions backend.currentSessions HAProxy haproxy.backend.dataTransfersAbortedByClientPerSecond backend.dataTransfersAbortedByClientPerSecond HAProxy haproxy.backend.dataTransfersAbortedByServerPerSecond backend.dataTransfersAbortedByServerPerSecond HAProxy haproxy.backend.downtimeInSeconds backend.downtimeInSeconds HAProxy haproxy.backend.http100ResponsesPerSecond backend.http100ResponsesPerSecond HAProxy haproxy.backend.http200ResponsesPerSecond backend.http200ResponsesPerSecond HAProxy haproxy.backend.http300ResponsesPerSecond backend.http300ResponsesPerSecond HAProxy haproxy.backend.http400ResponsesPerSecond backend.http400ResponsesPerSecond HAProxy haproxy.backend.http500ResponsesPerSecond backend.http500ResponsesPerSecond HAProxy haproxy.backend.httpOtherResponsesPerSecond backend.httpOtherResponsesPerSecond HAProxy haproxy.backend.httpRequestsPerSecond backend.httpRequestsPerSecond HAProxy haproxy.backend.httpResponseBytesEmittedByCompressorPerSecond backend.httpResponseBytesEmittedByCompressorPerSecond HAProxy haproxy.backend.httpResponseBytesFedToCompressorPerSecond backend.httpResponseBytesFedToCompressorPerSecond HAProxy haproxy.backend.httpResponsesCompressedPerSecond backend.httpResponsesCompressedPerSecond HAProxy haproxy.backend.interceptedRequestsPerSecond backend.interceptedRequestsPerSecond HAProxy haproxy.backend.maxQueuedRequestsWithoutServer backend.maxQueuedRequestsWithoutServer HAProxy haproxy.backend.maxSessions backend.maxSessions HAProxy haproxy.backend.maxSessionsPerSecond backend.maxSessionsPerSecond HAProxy haproxy.backend.requestRedispatchPerSecond backend.requestRedispatchPerSecond HAProxy haproxy.backend.requestsDenied.securityConcernsPerSecond backend.requestsDenied.securityConcernsPerSecond HAProxy haproxy.backend.responseErrorsPerSecond backend.responseErrorsPerSecond HAProxy haproxy.backend.responsesDenied.securityConcernsPerSecond backend.responsesDenied.securityConcernsPerSecond HAProxy haproxy.backend.serverSelectedPerSecond backend.serverSelectedPerSecond HAProxy haproxy.backend.sessionsPerSecond backend.sessionsPerSecond HAProxy haproxy.backend.timeSinceLastSessionAssignedInSeconds backend.timeSinceLastSessionAssignedInSeconds HAProxy haproxy.backend.timeSinceLastUpDownTransitionInSeconds backend.timeSinceLastUpDownTransitionInSeconds HAProxy haproxy.backend.totalWeight backend.totalWeight HAProxy haproxy.backend.type backend.type HAProxy haproxy.backend.upToDownTransitionsPerSecond backend.upToDownTransitionsPerSecond HAProxy haproxy.frontend.bytesInPerSecond frontend.bytesInPerSecond HAProxy haproxy.frontend.bytesOutPerSecond frontend.bytesOutPerSecond HAProxy haproxy.frontend.connectionsPerSecond frontend.connectionsPerSecond HAProxy haproxy.frontend.currentSessions frontend.currentSessions HAProxy haproxy.frontend.http100ResponsesPerSecond frontend.http100ResponsesPerSecond HAProxy haproxy.frontend.http200ResponsesPerSecond frontend.http200ResponsesPerSecond HAProxy haproxy.frontend.http300ResponsesPerSecond frontend.http300ResponsesPerSecond HAProxy haproxy.frontend.http400ResponsesPerSecond frontend.http400ResponsesPerSecond HAProxy haproxy.frontend.http500ResponsesPerSecond frontend.http500ResponsesPerSecond HAProxy haproxy.frontend.httpOtherResponsesPerSecond frontend.httpOtherResponsesPerSecond HAProxy haproxy.frontend.httpRequests.maxPerSecond frontend.httpRequests.maxPerSecond HAProxy haproxy.frontend.httpRequestsPerSecond frontend.httpRequestsPerSecond HAProxy haproxy.frontend.interceptedRequestsPerSecond frontend.interceptedRequestsPerSecond HAProxy haproxy.frontend.maxConnectionsPerSecond frontend.maxConnectionsPerSecond HAProxy haproxy.frontend.maxSessions frontend.maxSessions HAProxy haproxy.frontend.maxSessionsPerSecond frontend.maxSessionsPerSecond HAProxy haproxy.frontend.requestErrorsPerSecond frontend.requestErrorsPerSecond HAProxy haproxy.frontend.requestsDenied.securityConcernsPerSecond frontend.requestsDenied.securityConcernsPerSecond HAProxy haproxy.frontend.requestsDenied.tcpRequestConnectionRulesPerSecond frontend.requestsDenied.tcpRequestConnectionRulesPerSecond HAProxy haproxy.frontend.requestsDenied.tcpRequestSessionRulesPerSecond frontend.requestsDenied.tcpRequestSessionRulesPerSecond HAProxy haproxy.frontend.responsesDenied.securityConcernsPerSecond frontend.responsesDenied.securityConcernsPerSecond HAProxy haproxy.frontend.sessionsPerSecond frontend.sessionsPerSecond HAProxy haproxy.server.averageConnectTimeInSeconds server.averageConnectTimeInSeconds HAProxy haproxy.server.averageQueueTimeInSeconds server.averageQueueTimeInSeconds HAProxy haproxy.server.averageResponseTimeInSeconds server.averageResponseTimeInSeconds HAProxy haproxy.server.averageTotalSessionTimeInSeconds server.averageTotalSessionTimeInSeconds HAProxy haproxy.server.bytesInPerSecond server.bytesInPerSecond HAProxy haproxy.server.bytesOutPerSecond server.bytesOutPerSecond HAProxy haproxy.server.connectingRequestErrorsPerSecond server.connectingRequestErrorsPerSecond HAProxy haproxy.server.connectionRetriesPerSecond server.connectionRetriesPerSecond HAProxy haproxy.server.currentQueuedRequestsWithoutServer server.currentQueuedRequestsWithoutServer HAProxy haproxy.server.currentSessions server.currentSessions HAProxy haproxy.server.dataTransfersAbortedByClientPerSecond server.dataTransfersAbortedByClientPerSecond HAProxy haproxy.server.dataTransfersAbortedByServerPerSecond server.dataTransfersAbortedByServerPerSecond HAProxy haproxy.server.downtimeInSeconds server.downtimeInSeconds HAProxy haproxy.server.failedChecksPerSecond server.failedChecksPerSecond HAProxy haproxy.server.healthCheckDurationInMilliseconds server.healthCheckDurationInMilliseconds HAProxy haproxy.server.http100ResponsesPerSecond server.http100ResponsesPerSecond HAProxy haproxy.server.http200ResponsesPerSecond server.http200ResponsesPerSecond HAProxy haproxy.server.http300ResponsesPerSecond server.http300ResponsesPerSecond HAProxy haproxy.server.http400ResponsesPerSecond server.http400ResponsesPerSecond HAProxy haproxy.server.http500ResponsesPerSecond server.http500ResponsesPerSecond HAProxy haproxy.server.httpOtherResponsesPerSecond server.httpOtherResponsesPerSecond HAProxy haproxy.server.isActive server.isActive HAProxy haproxy.server.isBackup server.isBackup HAProxy haproxy.server.maxQueuedRequestsWithoutServer server.maxQueuedRequestsWithoutServer HAProxy haproxy.server.maxSessions server.maxSessions HAProxy haproxy.server.maxSessionsPerSecond server.maxSessionsPerSecond HAProxy haproxy.server.requestRedispatchPerSecond server.requestRedispatchPerSecond HAProxy haproxy.server.requestsDenied.securityConcernsPerSecond server.requestsDenied.securityConcernsPerSecond HAProxy haproxy.server.responseErrorsPerSecond server.responseErrorsPerSecond HAProxy haproxy.server.responsesDenied.securityConcernsPerSecond server.responsesDenied.securityConcernsPerSecond HAProxy haproxy.server.serverSelectedPerSecond server.serverSelectedPerSecond HAProxy haproxy.server.serverWeight server.serverWeight HAProxy haproxy.server.sessionsPerSecond server.sessionsPerSecond HAProxy haproxy.server.throttlePercentage server.throttlePercentage HAProxy haproxy.server.timeSinceLastSessionAssignedInSeconds server.timeSinceLastSessionAssignedInSeconds HAProxy haproxy.server.timeSinceLastUpDownTransitionInSeconds server.timeSinceLastUpDownTransitionInSeconds HAProxy haproxy.server.type server.type HAProxy haproxy.server.upToDownTransitionsPerSecond server.upToDownTransitionsPerSecond Kafka kafka.broker.bytesWrittenToTopicPerSecond broker.bytesWrittenToTopicPerSecond Kafka kafka.broker.consumer.requestsExpiredPerSecond consumer.requestsExpiredPerSecond Kafka kafka.broker.follower.requestExpirationPerSecond follower.requestExpirationPerSecond Kafka kafka.broker.ioInPerSecond broker.IOInPerSecond Kafka kafka.broker.ioOutPerSecond broker.IOOutPerSecond Kafka kafka.broker.logFlushPerSecond broker.logFlushPerSecond Kafka kafka.broker.messagesInPerSecond broker.messagesInPerSecond Kafka kafka.broker.net.bytesRejectedPerSecond net.bytesRejectedPerSecond Kafka kafka.broker.replication.isrExpandsPerSecond replication.isrExpandsPerSecond Kafka kafka.broker.replication.isrShrinksPerSecond replication.isrShrinksPerSecond Kafka kafka.broker.replication.leaderElectionPerSecond replication.leaderElectionPerSecond Kafka kafka.broker.replication.uncleanLeaderElectionPerSecond replication.uncleanLeaderElectionPerSecond Kafka kafka.broker.replication.unreplicatedPartitions replication.unreplicatedPartitions Kafka kafka.broker.request.avgTimeFetch request.avgTimeFetch Kafka kafka.broker.request.avgTimeMetadata request.avgTimeMetadata Kafka kafka.broker.request.avgTimeMetadata99Percentile request.avgTimeMetadata99Percentile Kafka kafka.broker.request.avgTimeOffset request.avgTimeOffset Kafka kafka.broker.request.avgTimeOffset99Percentile request.avgTimeOffset99Percentile Kafka kafka.broker.request.avgTimeProduceRequest request.avgTimeProduceRequest Kafka kafka.broker.request.avgTimeUpdateMetadata request.avgTimeUpdateMetadata Kafka kafka.broker.request.avgTimeUpdateMetadata99Percentile request.avgTimeUpdateMetadata99Percentile Kafka kafka.broker.request.clientFetchesFailedPerSecond request.clientFetchesFailedPerSecond Kafka kafka.broker.request.fetchConsumerRequestsPerSecond request.fetchConsumerRequestsPerSecond Kafka kafka.broker.request.fetchFollowerRequestsPerSecond request.fetchFollowerRequestsPerSecond Kafka kafka.broker.request.fetchTime99Percentile request.fetchTime99Percentile Kafka kafka.broker.request.handlerIdle request.handlerIdle Kafka kafka.broker.request.listGroupsRequestsPerSecond request.listGroupsRequestsPerSecond Kafka kafka.broker.request.metadataRequestsPerSecond request.metadataRequestsPerSecond Kafka kafka.broker.request.offsetCommitRequestsPerSecond request.offsetCommitRequestsPerSecond Kafka kafka.broker.request.produceRequestsFailedPerSecond request.produceRequestsFailedPerSecond Kafka kafka.broker.request.produceRequestsPerSecond request.produceRequestsPerSecond Kafka kafka.broker.request.produceTime99Percentile request.produceTime99Percentile Kafka kafka.broker.topic.diskSize topic.diskSize Kafka kafka.topic.bytesInPerSec topic.BytesInPerSec Kafka kafka.topic.bytesOutPerSec topic.BytesOutPerSec Kafka kafka.topic.messagesInPerSec topic.MessagesInPerSec Kafka kafka.topic.partitionsWithNonPreferredLeader topic.partitionsWithNonPreferredLeader Kafka kafka.topic.respondsToMetadataRequests topic.respondsToMetadataRequests Kafka kafka.topic.retentionBytesOrTime topic.retentionBytesOrTime Kafka kafka.topic.underReplicatedPartitions topic.underReplicatedPartitions Kafka kafka.producer.ageMetadataUsedInMilliseconds producer.ageMetadataUsedInMilliseconds Kafka kafka.producer.availableBufferInBytes producer.availableBufferInBytes Kafka kafka.producer.avgBytesSentPerRequestInBytes producer.avgBytesSentPerRequestInBytes Kafka kafka.producer.avgCompressionRateRecordBatches producer.avgCompressionRateRecordBatches Kafka kafka.producer.avgRecordAccumulatorsInMilliseconds producer.avgRecordAccumulatorsInMilliseconds Kafka kafka.producer.avgRecordSizeInBytes producer.avgRecordSizeInBytes Kafka kafka.producer.avgRecordsSentPerSecond producer.avgRecordsSentPerSecond Kafka kafka.producer.avgRecordsSentPerTopicPerSecond producer.avgRecordsSentPerTopicPerSecond Kafka kafka.producer.avgRequestLatency producer.avgRequestLatencyPerSecond Kafka kafka.producer.avgThrottleTime producer.avgThrottleTime Kafka kafka.producer.bufferMemoryAvailableInBytes producer.bufferMemoryAvailableInBytes Kafka kafka.producer.bufferpoolWaitTime producer.bufferpoolWaitTime Kafka kafka.producer.bytesOutPerSecond producer.bytesOutPerSecond Kafka kafka.producer.compressionRateRecordBatches producer.compressionRateRecordBatches Kafka kafka.producer.ioWaitTime producer.ioWaitTime Kafka kafka.producer.maxBytesSentPerRequestInBytes producer.maxBytesSentPerRequestInBytes Kafka kafka.producer.maxRecordSizeInBytes producer.maxRecordSizeInBytes Kafka kafka.producer.maxRequestLatencyInMilliseconds producer.maxRequestLatencyInMilliseconds Kafka kafka.producer.maxThrottleTime producer.maxThrottleTime Kafka kafka.producer.requestPerSecond producer.requestPerSecond Kafka kafka.producer.requestsWaitingResponse producer.requestsWaitingResponse Kafka kafka.producer.responsePerSecond producer.responsePerSecond Kafka kafka.producer.threadsWaiting producer.threadsWaiting Kafka kafka.consumer.avgFetchSizeInBytes consumer.avgFetchSizeInBytes Kafka kafka.consumer.avgRecordConsumedPerTopic consumer.avgRecordConsumedPerTopic Kafka kafka.consumer.avgRecordConsumedPerTopicPerSecond consumer.avgRecordConsumedPerTopicPerSecond Kafka kafka.consumer.bytesInPerSecond consumer.bytesInPerSecond Kafka kafka.consumer.fetchPerSecond consumer.fetchPerSecond Kafka kafka.consumer.hwm consumer.hwm Kafka kafka.consumer.lag consumer.lag Kafka kafka.consumer.maxFetchSizeInBytes consumer.maxFetchSizeInBytes Kafka kafka.consumer.maxLag consumer.maxLag Kafka kafka.consumer.messageConsumptionPerSecond consumer.messageConsumptionPerSecond Kafka kafka.consumer.offset consumer.offset Kafka kafka.consumer.totalLag consumer.totalLag Kafka kafka.consumerGroup.maxLag consumerGroup.maxLag Kafka kafka.consumerGroup.totalLag consumerGroup.totalLag Kubernetes k8s.apiserver.goGoroutines goGoroutines Kubernetes k8s.apiserver.goThreads goThreads Kubernetes k8s.apiserver.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.apiserver.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.controllermanager.goGoroutines goGoroutines Kubernetes k8s.controllermanager.goThreads goThreads Kubernetes k8s.controllermanager.leaderElectionMasterStatus leaderElectionMasterStatus Kubernetes k8s.controllermanager.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.controllermanager.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.etcd.goGoroutines goGoroutines Kubernetes k8s.etcd.goThreads goThreads Kubernetes k8s.etcd.mvccDbTotalSizeInBytes etcdMvccDbTotalSizeInBytes Kubernetes k8s.etcd.networkClientGrpcReceivedBytesRate etcdNetworkClientGrpcReceivedBytesRate Kubernetes k8s.etcd.networkClientGrpcSentBytesRate etcdNetworkClientGrpcSentBytesRate Kubernetes k8s.etcd.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.etcd.process.maxFds processMaxFds Kubernetes k8s.etcd.process.openFds processOpenFds Kubernetes k8s.etcd.process.processFdsUtilization processFdsUtilization Kubernetes k8s.etcd.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.etcd.serverHasLeader etcdServerHasLeader Kubernetes k8s.etcd.serverLeaderChangesSeenDelta etcdServerLeaderChangesSeenDelta Kubernetes k8s.etcd.serverProposalsAppliedDelta etcdServerProposalsAppliedDelta Kubernetes k8s.etcd.serverProposalsAppliedRate etcdServerProposalsAppliedRate Kubernetes k8s.etcd.serverProposalsCommittedDelta etcdServerProposalsCommittedDelta Kubernetes k8s.etcd.serverProposalsCommittedRate etcdServerProposalsCommittedRate Kubernetes k8s.etcd.serverProposalsFailedDelta etcdServerProposalsFailedDelta Kubernetes k8s.etcd.serverProposalsFailedRate etcdServerProposalsFailedRate Kubernetes k8s.etcd.serverProposalsPending etcdServerProposalsPending Kubernetes k8s.scheduler.goGoroutines goGoroutines Kubernetes k8s.scheduler.goThreads goThreads Kubernetes k8s.scheduler.leaderElectionMasterStatus leaderElectionMasterStatus Kubernetes k8s.scheduler.podPreemptionVictims schedulerPodPreemptionVictims Kubernetes k8s.scheduler.preemptionAttemptsDelta schedulerPreemptionAttemptsDelta Kubernetes k8s.scheduler.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.scheduler.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.container.cpuCfsPeriodsDelta containerCpuCfsPeriodsDelta Kubernetes k8s.container.cpuCfsPeriodsTotal containerCpuCfsPeriodsTotal Kubernetes k8s.container.cpuCfsThrottledPeriodsDelta containerCpuCfsThrottledPeriodsDelta Kubernetes k8s.container.cpuCfsThrottledPeriodsTotal containerCpuCfsThrottledPeriodsTotal Kubernetes k8s.container.cpuCfsThrottledSecondsDelta containerCpuCfsThrottledSecondsDelta Kubernetes k8s.container.cpuCfsThrottledSecondsTotal containerCpuCfsThrottledSecondsTotal Kubernetes k8s.container.cpuCoresUtilization cpuCoresUtilization Kubernetes k8s.container.cpuLimitCores cpuLimitCores Kubernetes k8s.container.cpuRequestedCores cpuRequestedCores Kubernetes k8s.container.cpuUsedCores cpuUsedCores Kubernetes k8s.container.fsAvailableBytes fsAvailableBytes Kubernetes k8s.container.fsCapacityBytes fsCapacityBytes Kubernetes k8s.container.fsInodes fsInodes Kubernetes k8s.container.fsInodesFree fsInodesFree Kubernetes k8s.container.fsInodesUsed fsInodesUsed Kubernetes k8s.container.fsUsedBytes fsUsedBytes Kubernetes k8s.container.fsUsedPercent fsUsedPercent Kubernetes k8s.container.isReady isReady Kubernetes k8s.container.memoryLimitBytes memoryLimitBytes Kubernetes k8s.container.memoryMappedFileBytes containerMemoryMappedFileBytes Kubernetes k8s.container.memoryRequestedBytes memoryRequestedBytes Kubernetes k8s.container.memoryUsedBytes memoryUsedBytes Kubernetes k8s.container.memoryUtilization memoryUtilization Kubernetes k8s.container.memoryWorkingSetBytes memoryWorkingSetBytes Kubernetes k8s.container.requestedCpuCoresUtilization requestedCpuCoresUtilization Kubernetes k8s.container.requestedMemoryUtilization requestedMemoryUtilization Kubernetes k8s.container.restartCount restartCount Kubernetes k8s.daemonset.createdAt createdAt Kubernetes k8s.daemonset.metadataGeneration metadataGeneration Kubernetes k8s.daemonset.podsAvailable podsAvailable Kubernetes k8s.daemonset.podsDesired podsDesired Kubernetes k8s.daemonset.podsMisscheduled podsMisscheduled Kubernetes k8s.daemonset.podsReady podsReady Kubernetes k8s.daemonset.podsScheduled podsScheduled Kubernetes k8s.daemonset.podsUnavailable podsUnavailable Kubernetes k8s.daemonset.podsUpdatedScheduled podsUpdatedScheduled Kubernetes k8s.deployment.createdAt createdAt Kubernetes k8s.deployment.podsAvailable podsAvailable Kubernetes k8s.deployment.podsDesired podsDesired Kubernetes k8s.deployment.podsMaxUnavailable podsMaxUnavailable Kubernetes k8s.deployment.podsTotal podsTotal Kubernetes k8s.deployment.podsUnavailable podsUnavailable Kubernetes k8s.deployment.podsUpdated podsUpdated Kubernetes k8s.endpoint.addressAvailable addressAvailable Kubernetes k8s.endpoint.addressNotReady addressNotReady Kubernetes k8s.endpoint.createdAt createdAt Kubernetes k8s.namespace.createdAt createdAt Kubernetes k8s.node.allocatableAttachableVolumes* allocatableAttachableVolumes* Kubernetes k8s.node.allocatableCpuCores allocatableCpuCores Kubernetes k8s.node.allocatableCpuCoresUtilization allocatableCpuCoresUtilization Kubernetes k8s.node.allocatableEphemeralStorageBytes allocatableEphemeralStorageBytes Kubernetes k8s.node.allocatableHugepages* allocatableHugepages* Kubernetes k8s.node.allocatableMemoryBytes allocatableMemoryBytes Kubernetes k8s.node.allocatableMemoryUtilization allocatableMemoryUtilization Kubernetes k8s.node.allocatablePods allocatablePods Kubernetes k8s.node.capacityAttachableVolumes* capacityAttachableVolumes* Kubernetes k8s.node.capacityCpuCores capacityCpuCores Kubernetes k8s.node.capacityEphemeralStorageBytes capacityEphemeralStorageBytes Kubernetes k8s.node.capacityHugepages* capacityHugepages* Kubernetes k8s.node.capacityMemoryBytes capacityMemoryBytes Kubernetes k8s.node.capacityPods capacityPods Kubernetes k8s.node.cpuUsedCoreMilliseconds cpuUsedCoreMilliseconds Kubernetes k8s.node.cpuUsedCores cpuUsedCores Kubernetes k8s.node.fsAvailableBytes fsAvailableBytes Kubernetes k8s.node.fsCapacityBytes fsCapacityBytes Kubernetes k8s.node.fsCapacityUtilization fsCapacityUtilization Kubernetes k8s.node.fsInodes fsInodes Kubernetes k8s.node.fsInodesFree fsInodesFree Kubernetes k8s.node.fsInodesUsed fsInodesUsed Kubernetes k8s.node.fsUsedBytes fsUsedBytes Kubernetes k8s.node.memoryAvailableBytes memoryAvailableBytes Kubernetes k8s.node.memoryMajorPageFaultsPerSecond memoryMajorPageFaultsPerSecond Kubernetes k8s.node.memoryPageFaults memoryPageFaults Kubernetes k8s.node.memoryRssBytes memoryRssBytes Kubernetes k8s.node.memoryUsedBytes memoryUsedBytes Kubernetes k8s.node.memoryWorkingSetBytes memoryWorkingSetBytes Kubernetes k8s.node.netErrorsPerSecond net.errorsPerSecond Kubernetes k8s.node.netRxBytesPerSecond net.rxBytesPerSecond Kubernetes k8s.node.netTxBytesPerSecond net.txBytesPerSecond Kubernetes k8s.node.runtimeAvailableBytes runtimeAvailableBytes Kubernetes k8s.node.runtimeCapacityBytes runtimeCapacityBytes Kubernetes k8s.node.runtimeInodes runtimeInodes Kubernetes k8s.node.runtimeInodesFree runtimeInodesFree Kubernetes k8s.node.runtimeInodesUsed runtimeInodesUsed Kubernetes k8s.node.runtimeUsedBytes runtimeUsedBytes Kubernetes k8s.pod.createdAt createdAt Kubernetes k8s.pod.isReady isReady Kubernetes k8s.pod.isScheduled isScheduled Kubernetes k8s.pod.netErrorsPerSecond net.errorsPerSecond Kubernetes k8s.pod.netRxBytesPerSecond net.rxBytesPerSecond Kubernetes k8s.pod.netTxBytesPerSecond net.txBytesPerSecond Kubernetes k8s.pod.startTime startTime Kubernetes k8s.replicaset.createdAt createdAt Kubernetes k8s.replicaset.observedGeneration observedGeneration Kubernetes k8s.replicaset.podsDesired podsDesired Kubernetes k8s.replicaset.podsFullyLabeled podsFullyLabeled Kubernetes k8s.replicaset.podsMissing podsMissing Kubernetes k8s.replicaset.podsReady podsReady Kubernetes k8s.replicaset.podsTotal podsTotal Kubernetes k8s.service.createdAt createdAt Kubernetes k8s.statefulset.createdAt createdAt Kubernetes k8s.statefulset.currentRevision currentRevision Kubernetes k8s.statefulset.metadataGeneration metadataGeneration Kubernetes k8s.statefulset.observedGeneration observedGeneration Kubernetes k8s.statefulset.podsCurrent podsCurrent Kubernetes k8s.statefulset.podsDesired podsDesired Kubernetes k8s.statefulset.podsReady podsReady Kubernetes k8s.statefulset.podsTotal podsTotal Kubernetes k8s.statefulset.podsUpdated podsUpdated Kubernetes k8s.statefulset.updateRevision updateRevision Kubernetes k8s.volume.fsAvailableBytes fsAvailableBytes Kubernetes k8s.volume.fsCapacityBytes fsCapacityBytes Kubernetes k8s.volume.fsInodes fsInodes Kubernetes k8s.volume.fsInodesFree fsInodesFree Kubernetes k8s.volume.fsInodesUsed fsInodesUsed Kubernetes k8s.volume.fsUsedBytes fsUsedBytes Kubernetes k8s.volume.fsUsedPercent fsUsedPercent Memcached memcached.server.activeSlabs activeSlabs Memcached memcached.server.avgItemSizeInBytes avgItemSizeInBytes Memcached memcached.server.bytesReadServerPerSecond bytesReadServerPerSecond Memcached memcached.server.bytesUsedServerInBytes bytesUsedServerInBytes Memcached memcached.server.bytesWrittenServerPerSecond bytesWrittenServerPerSecond Memcached memcached.server.casHitRatePerSecond casHitRatePerSecond Memcached memcached.server.casMissRatePerSecond casMissRatePerSecond Memcached memcached.server.casWrongRatePerSecond casWrongRatePerSecond Memcached memcached.server.cmdFlushRatePerSecond cmdFlushRatePerSecond Memcached memcached.server.cmdGetRatePerSecond cmdGetRatePerSecond Memcached memcached.server.cmdSetRatePerSecond cmdSetRatePerSecond Memcached memcached.server.connectionRateServerPerSecond connectionRateServerPerSecond Memcached memcached.server.connectionStructuresAllocated connectionStructuresAllocated Memcached memcached.server.currentItemsStoredServer currentItemsStoredServer Memcached memcached.server.deleteCmdNoneRemovedPerSecond deleteCmdNoneRemovedPerSecond Memcached memcached.server.deleteCmdRemovedPerSecond deleteCmdRemovedPerSecond Memcached memcached.server.evictionsPerSecond evictionsPerSecond Memcached memcached.server.getHitPercent getHitPercent Memcached memcached.server.getHitPerSecond getHitPerSecond Memcached memcached.server.getMissPerSecond getMissPerSecond Memcached memcached.server.itemsStoredPerSecond itemsStoredPerSecond Memcached memcached.server.limitBytesStorage limitBytesStorage Memcached memcached.server.limitMaxBytes limitMaxBytes Memcached memcached.server.maxConnectionLimitPerSecond serverMaxConnectionLimitPerSecond Memcached memcached.server.memAllocatedSlabsInBytes memAllocatedSlabsInBytes Memcached memcached.server.openConnectionsServer openConnectionsServer Memcached memcached.server.pointerSize pointerSize Memcached memcached.server.rusageSystem usageRate Memcached memcached.server.rusageUser executionTime Memcached memcached.server.storingItemsPercentMemory storingItemsPercentMemory Memcached memcached.server.threads threads Memcached memcached.server.uptimeInMilliseconds uptimeInMilliseconds Memcached memcached.slab.activeItemsBumpedPerSecond activeItemsBumpedPerSecond Memcached memcached.slab.casBadValPerSecond casBadValPerSecond Memcached memcached.slab.casModifiedSlabPerSecond casModifiedSlabPerSecond Memcached memcached.slab.chunkSizeInBytes chunkSizeInBytes Memcached memcached.slab.chunksPerPage chunksPerPage Memcached memcached.slab.cmdSetRateSlabPerSecond cmdSetRateSlabPerSecond Memcached memcached.slab.decrsModifySlabPerSecond decrsModifySlabPerSecond Memcached memcached.slab.deleteRateSlabPerSecond deleteRateSlabPerSecond Memcached memcached.slab.entriesReclaimedPerSecond entriesReclaimedPerSecond Memcached memcached.slab.evictionsBeforeExpirationPerSecond evictionsBeforeExpirationPerSecond Memcached memcached.slab.evictionsBeforeExplicitExpirationPerSecond evictionsBeforeExplicitExpirationPerSecond Memcached memcached.slab.expiredItemsReclaimedPerSecond expiredItemsReclaimedPerSecond Memcached memcached.slab.freedChunks freedChunks Memcached memcached.slab.freedChunksEnd freedChunksEnd Memcached memcached.slab.getHitRateSlabPerSecond getHitRateSlabPerSecond Memcached memcached.slab.incrsModifySlabPerSecond incrsModifySlabPerSecond Memcached memcached.slab.itemsCold itemsCold Memcached memcached.slab.itemsColdPerSecond itemsColdPerSecond Memcached memcached.slab.itemsDirectReclaimedPerSecond itemsDirectReclaimedPerSecond Memcached memcached.slab.itemsFreedCrawlerPerSecond itemsFreedCrawlerPerSecond Memcached memcached.slab.itemsHot itemsHot Memcached memcached.slab.itemsOldestInMilliseconds itemsOldestInMilliseconds Memcached memcached.slab.itemsRefcountLockedPerSecond itemsRefcountLockedPerSecond Memcached memcached.slab.itemsSlabClass itemsSlabClass Memcached memcached.slab.itemsTimeSinceEvictionInMilliseconds itemsTimeSinceEvictionInMilliseconds Memcached memcached.slab.itemsWarm itemsWarm Memcached memcached.slab.itemsWarmPerSecond itemsWarmPerSecond Memcached memcached.slab.memRequestedSlabInBytesPerSecond memRequestedSlabInBytesPerSecond Memcached memcached.slab.outOfMemoryPerSecond outOfMemoryPerSecond Memcached memcached.slab.selfHealedSlabPerSecond selfHealedSlabPerSecond Memcached memcached.slab.totalChunksSlab totalChunksSlab Memcached memcached.slab.totalPagesSlab totalPagesSlab Memcached memcached.slab.touchHitSlabPerSecond touchHitSlabPerSecond Memcached memcached.slab.usedChunksItems usedChunksItems Memcached memcached.slab.usedChunksPerSecond usedChunksPerSecond Memcached memcached.slab.validItemsEvictedPerSecond validItemsEvictedPerSecond MongoDB mongo.index.accesses collection.indexAccesses MongoDB mongo.index.sizeInBytes collection.indexSizeInBytes MongoDB mongo.collection.avgObjSizeInBytes collection.avgObjSizeInBytes MongoDB mongo.collection.capped collection.capped MongoDB mongo.collection.count collection.count MongoDB mongo.collection.max collection.max MongoDB mongo.collection.maxSizeInBytes collection.maxSizeInBytes MongoDB mongo.collection.nindexes collection.nindexes MongoDB mongo.collection.sizeInBytes collection.sizeInBytes MongoDB mongo.collection.storageSizeInBytes collection.storageSizeInBytes MongoDB mongo.configServer.asserts.messagesPerSecond asserts.messagesPerSecond MongoDB mongo.configServer.asserts.regularPerSecond asserts.regularPerSecond MongoDB mongo.configServer.asserts.rolloversPerSecond asserts.rolloversPerSecond MongoDB mongo.configServer.asserts.userPerSecond asserts.userPerSecond MongoDB mongo.configServer.asserts.warningPerSecond asserts.warningPerSecond MongoDB mongo.configServer.commands.countFailedPerSecond commands.countFailedPerSecond MongoDB mongo.configServer.commands.countPerSecond commands.countPerSecond MongoDB mongo.configServer.commands.createIndexesFailedPerSecond commands.createIndexesFailedPerSecond MongoDB mongo.configServer.commands.createIndexesPerSecond commands.createIndexesPerSecond MongoDB mongo.configServer.commands.deleteFailedPerSecond commands.deleteFailedPerSecond MongoDB mongo.configServer.commands.deletePerSecond commands.deletePerSecond MongoDB mongo.configServer.commands.evalFailedPerSecond commands.evalFailedPerSecond MongoDB mongo.configServer.commands.evalPerSecond commands.evalPerSecond MongoDB mongo.configServer.commands.findAndModifyFailedPerSecond commands.findAndModifyFailedPerSecond MongoDB mongo.configServer.commands.findAndModifyPerSecond commands.findAndModifyPerSecond MongoDB mongo.configServer.commands.insertFailedPerSecond commands.insertFailedPerSecond MongoDB mongo.configServer.commands.insertPerSecond commands.insertPerSecond MongoDB mongo.configServer.commands.updateFailedPerSecond commands.updateFailedPerSecond MongoDB mongo.configServer.commands.updatePerSecond commands.updatePerSecond MongoDB mongo.configServer.connections.available connections.available MongoDB mongo.configServer.connections.current connections.current MongoDB mongo.configServer.connections.totalCreated connections.totalCreated MongoDB mongo.configServer.cursor.openNoTimeout cursor.openNoTimeout MongoDB mongo.configServer.cursor.openPinned cursor.openPinned MongoDB mongo.configServer.cursor.openTotal cursor.openTotal MongoDB mongo.configServer.cursor.timedOutPerSecond cursor.timedOutPerSecond MongoDB mongo.configServer.document.deletedPerSecond document.deletedPerSecond MongoDB mongo.configServer.document.insertedPerSecond document.insertedPerSecond MongoDB mongo.configServer.document.returnedPerSecond document.returnedPerSecond MongoDB mongo.configServer.document.updatedPerSecond document.updatedPerSecond MongoDB mongo.configServer.dur.commits dur.commits MongoDB mongo.configServer.dur.commitsInWriteLock dur.commitsInWriteLock MongoDB mongo.configServer.dur.compression dur.compression MongoDB mongo.configServer.dur.earlyCommits dur.earlyCommits MongoDB mongo.configServer.dur.preparingInMilliseconds dur.preparingInMilliseconds MongoDB mongo.configServer.dur.remappingInMilliseconds dur.remappingInMilliseconds MongoDB mongo.configServer.dur.timeCollectedCommitsInMilliseconds dur.timeCollectedCommitsInMilliseconds MongoDB mongo.configServer.dur.writingDataFilesInMilliseconds dur.writingDataFilesInMilliseconds MongoDB mongo.configServer.dur.writingJournalInMilliseconds dur.writingJournalInMilliseconds MongoDB mongo.configServer.flush.averageInMilliseconds flush.averageInMilliseconds MongoDB mongo.configServer.flush.flushesDisk flush.flushesDisk MongoDB mongo.configServer.flush.lastInMilliseconds flush.lastInMilliseconds MongoDB mongo.configServer.flush.totalInMilliseconds flush.totalInMilliseconds MongoDB mongo.configServer.getlasterror.wtimeMillisPerSecond getlasterror.wtimeMillisPerSecond MongoDB mongo.configServer.getlasterror.wtimeoutsPerSecond getlasterror.wtimeoutsPerSecond MongoDB mongo.configServer.globallock.activeClientsReaders globallock.activeClientsReaders MongoDB mongo.configServer.globallock.activeClientsTotal globallock.activeClientsTotal MongoDB mongo.configServer.globallock.activeClientsWriters globallock.activeClientsWriters MongoDB mongo.configServer.globallock.currentQueueReaders globallock.currentQueueReaders MongoDB mongo.configServer.globallock.currentQueueTotal globallock.currentQueueTotal MongoDB mongo.configServer.globallock.currentQueueWriters globallock.currentQueueWriters MongoDB mongo.configServer.globallock.totalTime globallock.totaltime MongoDB mongo.configServer.locks.collectionAcquireExclusive locks.collectionAcquireExclusive MongoDB mongo.configServer.locks.collectionAcquireIntentExclusive locks.collectionAcquireIntentExclusive MongoDB mongo.configServer.locks.collectionAcquireIntentShared locks.collectionAcquireIntentShared MongoDB mongo.configServer.locks.collectionAcquireWaitCountExclusive locks.collectionAcquireWaitCountExclusive MongoDB mongo.configServer.locks.collectionTimeAcquiringMicrosExclusive locks.collectionTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.databaseAcquireExclusive locks.databaseAcquireExclusive MongoDB mongo.configServer.locks.databaseAcquireIntentExclusive locks.databaseAcquireIntentExclusive MongoDB mongo.configServer.locks.databaseAcquireIntentShared locks.databaseAcquireIntentShared MongoDB mongo.configServer.locks.databaseAcquireShared locks.databaseAcquireShared MongoDB mongo.configServer.locks.databaseAcquireWaitExclusive locks.databaseAcquireWaitExclusive MongoDB mongo.configServer.locks.databaseAcquireWaitIntentExclusive locks.databaseAcquireWaitIntentExclusive MongoDB mongo.configServer.locks.databaseAcquireWaitIntentShared locks.databaseAcquireWaitIntentShared MongoDB mongo.configServer.locks.databaseAcquireWaitShared locks.databaseAcquireWaitShared MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosExclusive locks.databaseTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosIntentExclusive locks.databaseTimeAcquiringMicrosIntentExclusive MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosIntentShared locks.databaseTimeAcquiringMicrosIntentShared MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosShared locks.databaseTimeAcquiringMicrosShared MongoDB mongo.configServer.locks.globalAcquireExclusive locks.globalAcquireExclusive MongoDB mongo.configServer.locks.globalAcquireIntentExclusive locks.globalAcquireIntentExclusive MongoDB mongo.configServer.locks.globalAcquireIntentShared locks.globalAcquireIntentShared MongoDB mongo.configServer.locks.globalAcquireShared locks.globalAcquireShared MongoDB mongo.configServer.locks.globalAcquireWaitExclusive locks.globalAcquireWaitExclusive MongoDB mongo.configServer.locks.globalAcquireWaitIntentExclusive locks.globalAcquireWaitIntentExclusive MongoDB mongo.configServer.locks.globalAcquireWaitIntentShared locks.globalAcquireWaitIntentShared MongoDB mongo.configServer.locks.globalAcquireWaitShared locks.globalAcquireWaitShared MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosExclusive locks.globalTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosIntentExclusive locks.globalTimeAcquiringMicrosIntentExclusive MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosIntentShared locks.globalTimeAcquiringMicrosIntentShared MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosShared locks.globalTimeAcquiringMicrosShared MongoDB mongo.configServer.locks.metadataAcquireExclusive locks.metadataAcquireExclusive MongoDB mongo.configServer.locks.oplogAcquireExclusive locks.oplogAcquireExclusive MongoDB mongo.configServer.locks.oplogAcquireIntentExclusive locks.oplogAcquireIntentExclusive MongoDB mongo.configServer.locks.oplogAcquireIntentSha",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 256.15967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em> metrics",
        "sections": "On-host <em>integrations</em> metrics",
        "body": " transport.packetsReceived ElasticSearch elasticsearch.node.transport.packetsReceivedInBytes transport.packetsReceivedInBytes ElasticSearch elasticsearch.node.transport.packetsSent transport.packetsSent ElasticSearch elasticsearch.node.transport.packetsSentInBytes transport.packetsSentInBytes <em>F5</em> <em>f5</em>.node.availabilityState"
      },
      "id": "603e8a8a64441f69a34e8841"
    },
    {
      "sections": [
        "View your OpenTelemetry data in New Relic",
        "Explorer: Get the big picture along with the details",
        "Find your service (entity)",
        "Narrow down your data with filters",
        "Summary page",
        "Distributed tracing",
        "Find traces and their associated spans",
        "Tip",
        "View spans with errors",
        "View span events",
        "Databases",
        "Errors",
        "Externals",
        "JVMs",
        "Logs",
        "Metrics explorer",
        "Transactions",
        "Data explorer and query builder"
      ],
      "title": "View your OpenTelemetry data in New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Open source telemetry integrations",
        "OpenTelemetry"
      ],
      "external_id": "a5213cb2206f4c161dd97c015a7c6679b08e867b",
      "image": "https://docs.newrelic.com/static/490779aac8c10802682d86f0b785b6a2/a4078/explorer_otel_services.png",
      "url": "https://docs.newrelic.com/docs/integrations/open-source-telemetry-integrations/opentelemetry/view-your-opentelemetry-data-new-relic/",
      "published_at": "2021-09-27T15:53:21Z",
      "updated_at": "2021-09-27T15:53:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you import OpenTelemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic Explorer tab is a good place to start gathering information about your services. It offers you a way to filter services and then filter the data to show a variety of views into your data. Find your service (entity) To get started in Explorer, you need to find your service: Go to one.newrelic.com. In the left sidebar, click Services - OpenTelemetry: In the center pane, click the service you want to know more about, or find your service by entering the name in the top filter bar. Narrow down your data with filters Once you have your entity, you can then filter for data from your service. With the filter bar Narrow data to..., you can highlight a specific facet of the telemetry recorded for your service. For example, you may want to see the error rate for a particular version of the service that you've deployed in a canary instance, so you add a filter for service.version='1.2.3'. Filters are preserved when navigating between different views of your data for a service. For example, the filter for service.version='1.2.3' carries over to the Transactions view, so that you would see telemetry on requests to the endpoints (transactions) that are running version 1.2.3 of your service, and not any other versions. Filters are preserved when navigating between the Summary, Transactions, Databases, Externals, Errors, and JVMs views. Filters are also preserved when navigating to the Distributed tracing view, but with limitations. Only filter conditions that use the equals operator (\"=\") are currently supported when navigating to Distributed tracing. If you navigate back from the Distributed tracing page, the filters you selected on the previous view will come back. Once you filter your data, the UI has various views in the left-navigation pane. See our descriptions below for view details. Summary page After you click on a service in the Explorer tab, you see the Summary page listing various golden signals about your entity. Golden signals are key monitoring details such as response time, throughput, and error rate. By using this information, you can quickly decide if you need to dig deeper. For your data to appear in this section, make sure it has the following: UI area Attribute Response time span.kind = server or consumer Throughput span.kind = server or consumer Error rate span.kind = server or consumer otel.status_code = ERROR Service instances pane service.instance.id (usually set via the OTel resource API) Distributed tracing In Distributed tracing, you can locate traces and examine span details. For your trace data to appear in the New Relic UI, it needs to conform to the OpenTelemetry trace semantic conventions. Also, in the Traces section of our best practices guide, you can find some tips about making sure your traces and spans appear in New Relic. The following attributes are typically not added explicitly to spans. Rather, they are usually set when creating a span or performing operations (for example, recording an error) on a span using the OpenTelemetry SDK. Attribute Description name A span’s name is generally set when starting a span. The name can generally be anything, but the OpenTelemetry specification provides guidance for certain types of spans like Database spans or HTTP spans. span.kind A span’s kind is generally set when starting a span. New Relic uses span.kind to infer that a span is an entry point to a given service. When span.kind = server or consumer it is considered an entry point. When span.kind = client or producer, it is considered a call to an external service or database system. otel.status_code A span’s status is set using the span API. The otel.status_code attribute is how it is manifested by New Relic. The UI primarily uses otel.status_code for the purpose of identifying errors. Find traces and their associated spans Here are some ways to target your searches: To find the traces you want, you can run queries like these in the filter bar: service.name = YOUR_SERVICE_NAME trace.id = YOUR_TRACE_ID When you find an interesting trace, click on it to display a waterfall diagram showing the spans of the trace. Click on specific spans within the trace to display span details in the right panel. Tip For more ways to filter traces, see our distributed tracing UI page. View spans with errors After you click on a span in the trace waterfall view, you can see span errors in the right panel under Error details. The error details are populated by spans containing otel.status_code = ERROR and display the content of otel.status_description. To narrow your search for spans with errors, you can enter otel.status_code = ERROR directly in the distributed tracing filter bar. View span events If you send span events as described by the OpenTelemetry specification, you can view them in the New Relic UI. Span events have two general types: Exceptions Non-exceptions (for example, logs) If you have span events, links for these appear in the right pane: Click on a span in the waterfall view. In the right pane, click View span events, or you can expand Error details and click the link at the bottom of the errors. When you're in span events and only want to view exceptions, slide the toggle Only show exceptions. Tip OpenTelemetry exceptions handled by the app/service are displayed independently of span error status and are not necessarily associated with a span error status. Databases The Databases page shows an application's database and cache data. The page shows individual database transactions as a sortable table, and shows operations, throughput, and response time as charts. For your data to appear in this section, make sure it has the following: UI area Attribute Top database calls span.kind = client or producer db.system Facets by span name Top databases (by query time) span.kind = client or producer db.system Facets by db.system Top databases (by throughput) span.kind = client or producer db.system Facets by db.system Errors On the Errors page, you can see total errors as well as charts showing error count and error rate. For your data to appear in this section, make sure it has the following: span.kind = server or consumer otel.status_code = ERROR Facets by span name Externals Externals capture calls to out-of-process services such as web services, resources in the cloud, and other network entities. For your data to appear in this section, make sure it has the following: span.kind = client or producer db.system is not present JVMs When you drill into a specific JVM, the UI display charts driven by JVM metric data: JVM metrics follow the general semantic conventions for runtime environment metrics. The Java specific runtime metrics are not well documented. The implementation is effectively the documentation and may be subject to change. For your data to appear in this section, make sure it has the following: Requires a unique service.instance.id attribute for rendering the list of JVMs Service.instance.id is an OpenTelemetry resource attribute Logs The Logs page displays logs from your application. For more information about how to associate log data to your application in New Relic, see our OpenTelemetry and logging documentation. For your data to appear in this section, make sure it has the following: service.name To correlate with trace data, the logs should contain the trace.id and span.id attributes. Metrics explorer For selected OpenTelemetry languages, you can see information about your metrics in this section. Also, if you are using the Prometheus exporter with OpenTelemetry, you can view your metric data here. Transactions Use Transactions to identify slow or error transactions that might be causing a spike in your application's response time. To get a list of transactions: From the Transaction Summary page, select the transactions table. For your data to appear in this section, make sure it has the following: UI area Description Top Transactions span.kind = server or consumer Facets by span name Throughput span.kind = server or consumer Facets by span name Data explorer and query builder Explore your metrics and traces using the data explorer, or write your own queries in query builder using NRQL. For more on how to query your data once it's in New Relic, see Query your data and Introduction to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.77676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View your <em>OpenTelemetry</em> data in New Relic",
        "sections": "View your <em>OpenTelemetry</em> data in New Relic",
        "tags": "<em>Open</em> <em>source</em> telemetry <em>integrations</em>",
        "body": "After you import <em>Open</em>Telemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic Explorer tab is a good place to start gathering information"
      },
      "id": "6044e5dfe7b9d283d3579a04"
    }
  ],
  "/docs/integrations/host-integrations/open-source-host-integrations-list/memcached-open-source-integration": [
    {
      "sections": [
        "New Relic guided install overview",
        "Why it matters",
        "Some technical detail",
        "Important",
        "On-host integration (OHI) recipes",
        "Troubleshoot common problems",
        "MySQL: Incorrect user permissions",
        "NGINX: No status URL"
      ],
      "title": "New Relic guided install overview",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Observe everything",
        "Get started"
      ],
      "external_id": "2058522f6cb1e82dbbe111a176c22ec4aa515ae5",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/",
      "published_at": "2021-09-29T01:39:46Z",
      "updated_at": "2021-08-20T13:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Instrument your systems and send telemetry data to New Relic with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install Our infrastructure agent discovers the applications and infrastructure and log sources running in your environment, and recommends which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Why it matters With our guided install, you can instrument your applications and infrastructure and start seeing your data in New Relic in minutes. The guided install uses our command line interface (CLI), the infrastructure agent for your host environment, and a library of installation recipes to instrument your applications and infrastructure for you. That means less toil for you. Because our instrumentation recipes are open source, you can modify existing recipes, or build new ones, to suit your needs. Some technical detail The New Relic guided install uses open source installation recipes to instrument on-host integrations. These recipes include installation and setup commands, information about logs, and metadata related to what’s being installed. They're collected in a YAML file for each type of system and have all of the installation details necessary to install the infrastructure agent for a specific integration. Important On Windows, our guided install only supports Microsoft SQL Server, logs, and the infrastructure agent. All other integrations are only supported on Linux. On-host integration (OHI) recipes The guided install automates the discovery, configuration, and installation of OHIs. However, there may be times when you want to instrument them one-by-one using the CLI install command. To install any individual on-host integration, run this command: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=API_KEY NEW_RELIC_ACCOUNT_ID=ACCOUNT_ID /usr/local/bin/newrelic install -n INTEGRATION-FLAG Copy For example: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=<API_KEY> NEW_RELIC_ACCOUNT_ID=<ACCOUNT_ID> /usr/local/bin/newrelic install -n apache-open-source-integration Copy The table lists the integrations supported by the guided install CLI command. The specific on-host integration commands are provided for your reference. Our open source integrations send performance metrics and inventory data from your servers and applications to the New Relic platform. You can view pre-built dashboards of your metric data, create alert policies, and create your own custom queries and charts. Integration Command Apache newrelic install -n apache-open-source-integration Cassandra newrelic install -n cassandra-open-source-integration Couchbase newrelic install -n couchbase-open-source-integration ElasticSearch newrelic install -n elasticsearch-open-source-integration HAProxy newrelic install -n haproxy-open-source-integration HashiCorp Consul newrelic install -n hashicorp-consul-open-source-integration Memcached newrelic install -n memcached-open-source-integration Microsoft SQL Server (Windows only) newrelic install -n mssql-server-integration-installer MongoDB newrelic install -n mongodb-open-source-integration MySQL newrelic install -n mysql-open-source-integration Nagios newrelic install -n nagios-open-source-integration Nginx newrelic install -n nginx-open-source-integration PostgreSQL newrelic install -n postgres-open-source-integration RabbitMQ newrelic install -n rabbitmq-open-source-integration Redis newrelic install -n redis-open-source-integration Varnish Cache newrelic install -n varnish-cache-open-source-integration Troubleshoot common problems As we identify areas where the guided install fails, we'll document them here and provide some troubleshooting guidance. MySQL: Incorrect user permissions To monitor MySQL health data, you need a valid username and password with specific permissions. These commands will create a user and grant the required permissions: Create a user newrelic@localhost with a specific password. sudo mysql -e \"CREATE USER 'newrelic'@'localhost' IDENTIFIED BY 'YOUR_SELECTED_PASSWORD';\" Copy Give replication privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Give select privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Once done, your next guided install attempt should work. NGINX: No status URL To monitor your NGINX server, you'll need to configure a valid status URL. status_url: The URL set up to provide the metrics using the status module. If the default value of 127.0.0.1 is incorrect, substitute the address/FQDN/URL for your system. Example: status_url: http://127.0.0.1/status You can read more about the status_url in these NGINX docs: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module There are different ways to set status_url, depending on how NGINX was installed: If enabled via Kubernetes: See Monitor services running on Kubernetes. If enabled via Amazon ECS: See Monitor services running on ECS. If installed on-host: Edit the config in the integration's YAML config file, nginx-config.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 449.86298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "On-host <em>integration</em> (OHI) recipes",
        "body": " install -n hashicorp-consul-<em>open</em>-<em>source</em>-<em>integration</em> <em>Memcached</em> newrelic install -n <em>memcached</em>-<em>open</em>-<em>source</em>-<em>integration</em> Microsoft SQL Server (Windows only) newrelic install -n mssql-server-<em>integration</em>-installer MongoDB newrelic install -n mongodb-<em>open</em>-<em>source</em>-<em>integration</em> MySQL newrelic install -n mysql"
      },
      "id": "604130a7e7b9d299cb2a07c0"
    },
    {
      "sections": [
        "View your OpenTelemetry data in New Relic",
        "Explorer: Get the big picture along with the details",
        "Find your service (entity)",
        "Narrow down your data with filters",
        "Summary page",
        "Distributed tracing",
        "Find traces and their associated spans",
        "Tip",
        "View spans with errors",
        "View span events",
        "Databases",
        "Errors",
        "Externals",
        "JVMs",
        "Logs",
        "Metrics explorer",
        "Transactions",
        "Data explorer and query builder"
      ],
      "title": "View your OpenTelemetry data in New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Open source telemetry integrations",
        "OpenTelemetry"
      ],
      "external_id": "a5213cb2206f4c161dd97c015a7c6679b08e867b",
      "image": "https://docs.newrelic.com/static/490779aac8c10802682d86f0b785b6a2/a4078/explorer_otel_services.png",
      "url": "https://docs.newrelic.com/docs/integrations/open-source-telemetry-integrations/opentelemetry/view-your-opentelemetry-data-new-relic/",
      "published_at": "2021-09-27T15:53:21Z",
      "updated_at": "2021-09-27T15:53:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you import OpenTelemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic Explorer tab is a good place to start gathering information about your services. It offers you a way to filter services and then filter the data to show a variety of views into your data. Find your service (entity) To get started in Explorer, you need to find your service: Go to one.newrelic.com. In the left sidebar, click Services - OpenTelemetry: In the center pane, click the service you want to know more about, or find your service by entering the name in the top filter bar. Narrow down your data with filters Once you have your entity, you can then filter for data from your service. With the filter bar Narrow data to..., you can highlight a specific facet of the telemetry recorded for your service. For example, you may want to see the error rate for a particular version of the service that you've deployed in a canary instance, so you add a filter for service.version='1.2.3'. Filters are preserved when navigating between different views of your data for a service. For example, the filter for service.version='1.2.3' carries over to the Transactions view, so that you would see telemetry on requests to the endpoints (transactions) that are running version 1.2.3 of your service, and not any other versions. Filters are preserved when navigating between the Summary, Transactions, Databases, Externals, Errors, and JVMs views. Filters are also preserved when navigating to the Distributed tracing view, but with limitations. Only filter conditions that use the equals operator (\"=\") are currently supported when navigating to Distributed tracing. If you navigate back from the Distributed tracing page, the filters you selected on the previous view will come back. Once you filter your data, the UI has various views in the left-navigation pane. See our descriptions below for view details. Summary page After you click on a service in the Explorer tab, you see the Summary page listing various golden signals about your entity. Golden signals are key monitoring details such as response time, throughput, and error rate. By using this information, you can quickly decide if you need to dig deeper. For your data to appear in this section, make sure it has the following: UI area Attribute Response time span.kind = server or consumer Throughput span.kind = server or consumer Error rate span.kind = server or consumer otel.status_code = ERROR Service instances pane service.instance.id (usually set via the OTel resource API) Distributed tracing In Distributed tracing, you can locate traces and examine span details. For your trace data to appear in the New Relic UI, it needs to conform to the OpenTelemetry trace semantic conventions. Also, in the Traces section of our best practices guide, you can find some tips about making sure your traces and spans appear in New Relic. The following attributes are typically not added explicitly to spans. Rather, they are usually set when creating a span or performing operations (for example, recording an error) on a span using the OpenTelemetry SDK. Attribute Description name A span’s name is generally set when starting a span. The name can generally be anything, but the OpenTelemetry specification provides guidance for certain types of spans like Database spans or HTTP spans. span.kind A span’s kind is generally set when starting a span. New Relic uses span.kind to infer that a span is an entry point to a given service. When span.kind = server or consumer it is considered an entry point. When span.kind = client or producer, it is considered a call to an external service or database system. otel.status_code A span’s status is set using the span API. The otel.status_code attribute is how it is manifested by New Relic. The UI primarily uses otel.status_code for the purpose of identifying errors. Find traces and their associated spans Here are some ways to target your searches: To find the traces you want, you can run queries like these in the filter bar: service.name = YOUR_SERVICE_NAME trace.id = YOUR_TRACE_ID When you find an interesting trace, click on it to display a waterfall diagram showing the spans of the trace. Click on specific spans within the trace to display span details in the right panel. Tip For more ways to filter traces, see our distributed tracing UI page. View spans with errors After you click on a span in the trace waterfall view, you can see span errors in the right panel under Error details. The error details are populated by spans containing otel.status_code = ERROR and display the content of otel.status_description. To narrow your search for spans with errors, you can enter otel.status_code = ERROR directly in the distributed tracing filter bar. View span events If you send span events as described by the OpenTelemetry specification, you can view them in the New Relic UI. Span events have two general types: Exceptions Non-exceptions (for example, logs) If you have span events, links for these appear in the right pane: Click on a span in the waterfall view. In the right pane, click View span events, or you can expand Error details and click the link at the bottom of the errors. When you're in span events and only want to view exceptions, slide the toggle Only show exceptions. Tip OpenTelemetry exceptions handled by the app/service are displayed independently of span error status and are not necessarily associated with a span error status. Databases The Databases page shows an application's database and cache data. The page shows individual database transactions as a sortable table, and shows operations, throughput, and response time as charts. For your data to appear in this section, make sure it has the following: UI area Attribute Top database calls span.kind = client or producer db.system Facets by span name Top databases (by query time) span.kind = client or producer db.system Facets by db.system Top databases (by throughput) span.kind = client or producer db.system Facets by db.system Errors On the Errors page, you can see total errors as well as charts showing error count and error rate. For your data to appear in this section, make sure it has the following: span.kind = server or consumer otel.status_code = ERROR Facets by span name Externals Externals capture calls to out-of-process services such as web services, resources in the cloud, and other network entities. For your data to appear in this section, make sure it has the following: span.kind = client or producer db.system is not present JVMs When you drill into a specific JVM, the UI display charts driven by JVM metric data: JVM metrics follow the general semantic conventions for runtime environment metrics. The Java specific runtime metrics are not well documented. The implementation is effectively the documentation and may be subject to change. For your data to appear in this section, make sure it has the following: Requires a unique service.instance.id attribute for rendering the list of JVMs Service.instance.id is an OpenTelemetry resource attribute Logs The Logs page displays logs from your application. For more information about how to associate log data to your application in New Relic, see our OpenTelemetry and logging documentation. For your data to appear in this section, make sure it has the following: service.name To correlate with trace data, the logs should contain the trace.id and span.id attributes. Metrics explorer For selected OpenTelemetry languages, you can see information about your metrics in this section. Also, if you are using the Prometheus exporter with OpenTelemetry, you can view your metric data here. Transactions Use Transactions to identify slow or error transactions that might be causing a spike in your application's response time. To get a list of transactions: From the Transaction Summary page, select the transactions table. For your data to appear in this section, make sure it has the following: UI area Description Top Transactions span.kind = server or consumer Facets by span name Throughput span.kind = server or consumer Facets by span name Data explorer and query builder Explore your metrics and traces using the data explorer, or write your own queries in query builder using NRQL. For more on how to query your data once it's in New Relic, see Query your data and Introduction to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.77661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View your <em>OpenTelemetry</em> data in New Relic",
        "sections": "View your <em>OpenTelemetry</em> data in New Relic",
        "tags": "<em>Open</em> <em>source</em> telemetry <em>integrations</em>",
        "body": "After you import <em>Open</em>Telemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic Explorer tab is a good place to start gathering information"
      },
      "id": "6044e5dfe7b9d283d3579a04"
    },
    {
      "sections": [
        "Introduction to OpenTelemetry with New Relic",
        "Benefits of OpenTelemetry",
        "Should I use OpenTelemetry instrumentation or New Relic agents?",
        "OpenTelemetry: A work in progress",
        "New Relic's APM agents",
        "How OpenTelemetry works with New Relic",
        "Important",
        "Traces",
        "Metrics",
        "Logs",
        "Next steps"
      ],
      "title": "Introduction to OpenTelemetry with New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Open source telemetry integrations",
        "OpenTelemetry"
      ],
      "external_id": "c87898d2d5835c00930c173eabd1bf93040badea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/open-source-telemetry-integrations/opentelemetry/introduction-opentelemetry-new-relic/",
      "published_at": "2021-09-27T15:16:23Z",
      "updated_at": "2021-09-27T15:16:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Are you already familiar with OpenTelemetry and want to begin the setup? Check out our quick start: Quick start If you don't have one already, create a New Relic account. It's free, forever. If you're just getting acquainted with OpenTelemetry, this is what we'll explore here: Benefits of OpenTelemetry Should I use OpenTelemetry or New Relic agents? How OpenTelemetry works with New Relic Benefits of OpenTelemetry OpenTelemetry provides a secure, vendor-neutral specification for service instrumentation so that you can export data to distinct backends of your choice, such as New Relic. OpenTelemetry offers a single set of APIs and libraries that standardize how you collect and transfer telemetry data for your services. The following components make up the OpenTelemetry project: Specifications for the core pillars of observability to drive consistency across all projects. New Relic supports all of these signals: traces, metrics, and logs (see details below) APIs that contain interfaces and implementations based on the specifications SDKs (reference implementations of the APIs) created specifically for languages like Java, Python, Go, Erlang, and more Collectors that offer a vendor-agnostic implementation for processing and exporting Exporters that enable you to send data to a backend of your choice The components of OpenTelemetry work together to create some distinct advantages for capturing telemetry data: Feature Description Ubiquitous instrumentation A single, open standard of instrumentation provides better coverage and flexibility as engineers from all over the world contribute to the instrumentation. Future proof As the instrumentation gets built into libraries and frameworks, and as more vendors move to support this open standard, you can be confident that you won’t need to change your instrumentation. Support for newer technologies When new technologies emerge, contributors can build integrations into OpenTelemetry or add instrumentation directly to source code, ensuring end users can easily monitor these new technologies. Simplified choice You don’t need to decide which instrumentation option to use (a proprietary option or one of the other open standards). Cross-platform compatibility OpenTelemetry supports a variety of languages and backends. It represents a vendor-neutral path for capturing and transmitting telemetry to backends without altering existing instrumentation. Streamlined observability It is easier for vendors to support and test against a single standard as they don’t need to develop their own agents or collectors. High dimensionality OpenTelemetry uses dimensional metrics, so you can filter and facet on more aspects of the data, such as AWS regions, Kubernetes clusters, or service versions. Dimensional metrics also lead to less time between occurrence and reporting. Efficiency OpenTelemetry’s fire-and-forget trace-centric approach to instrumentation often has lower overhead than New Relic agents, especially for asynchronous workloads. It will also result in better handling of trace data for asynchronous requests. Should I use OpenTelemetry instrumentation or New Relic agents? As you consider OpenTelemetry, you may also be looking at New Relic APM agents that also capture telemetry data. As you'd expect, there is a lot of overlap between features available from OpenTelemetry agents and SDKs versus those available from New Relic APM agents. This is especially true if you're interested in distributed tracing telemetry data. The choice you make depends on what you need. We recommend that you explore both New Relic and OpenTelemetry instrumentation or discuss this with us in our CNCF Slack channel to decide what works best for you. OpenTelemetry: A work in progress OpenTelemetry is still an emerging standard, so your choices may be affected by what's available. You can check on the current state of the specification at the OpenTelemetry site. The current state of language-specific OpenTelemetry APIs and SDKs varies: some languages are still pre-alpha and may be missing instructions on how to instrument your service. Most languages have some implementation of traces that is sufficient to start exporting data to New Relic. Check out this table in GitHub that provides an overview of the state of OpenTelemetry specification compliance for each language. For languages that New Relic does not currently provide an agent or SDK, OpenTelemetry may offer you a good alternative. Also, in cases where you want explicit control over sampling of your telemetry data, OpenTelemetry provides a lot of flexibility. As OpenTelemetry matures, New Relic will continue to support new OpenTelemetry data models and to provide a curated UI experience for our Full Stack Observability customers. New Relic's APM agents In general, New Relic's APM agents will collect more telemetry data for your services, and they offer a wide range of configuration options and an extensive set of auto-instrumentation capabilities. New Relic's APM agents offer detailed transaction trace visibility for individual services. They also offer predefined sampling to balance the performance impact of your instrumentation against the need to capture enough data to gain helpful insights. How OpenTelemetry works with New Relic New Relic supports the native OpenTelemetry Protocol (OTLP) for exporting telemetry data. This allows you to use the vendor neutral components developed by the OpenTelemetry community to export your data to New Relic. The following tables show the supported features for each telemetry signal. If you have questions about these or have an unsupported use case, please contact us in our CNCF Slack channel, and watch this page for future updates. Important New Relic's exporters for OpenTelemetry are now deprecated in favor of exporting data to New Relic using OTLP. Traces New Relic offers support for the OTLP ingest of trace signals. The maturity of the upstream specification is stable. OpenTelemetry traces and spans are compatible with New Relic traces and spans. OpenTelemetry spans optionally include attributes (name-value pairs) and resource attributes which map directly to dimensions that can be used to facet or filter span data at query time. OpenTelemetry span metadata (for example, name, kind, and trace_id) also map directly to dimensions on NewRelic spans. At this time, New Relic does not support span links or array attributes. For details, see the Traces section of our best practices guide. Feature Supported Span events ✅ Span linking ❌ Array of primitives (homogeneous) ❌ Metrics New Relic offers support for the OTLP ingest of metric signals. Note that the maturity of the upstream specification is experimental. We intend to follow potentially breaking upstream changes. Here are the OpenTelemetry data types we support and their associated mappings. For details, see the Metrics section of our best practices guide. Metric Type Supported Delta sums ✅ Cumulative sums ✅ Gauges ✅ Delta histograms ✅ Summary ✅ Cumulative histograms ❌ Exemplars ❌ Array of primitives (homogeneous) ❌ Logs New Relic offers support for the OTLP ingest of log signals. Note that the maturity of the upstream specification is experimental. We intend to follow potentially breaking upstream changes. OpenTelemetry logs are compatible with New Relic logs. OpenTelemetry logs optionally include attributes (name-value pairs) and resource attributes which map directly to dimensions that can be used to facet or filter log data at query time. OpenTelemetry log metadata (for example, name, severity_text, and trace_id) also map directly to dimensions on New Relic logs. NewRelic currently supports all OpenTelemetry log message types except for arrays. For more details, see the Logs section of our best practices guide. Feature Supported Description LogRecord body ✅ Supported types: string, boolean, int, double, bytes LogRecord attributes ✅ Supported types: string, boolean, int, double, bytes LogRecord fields ✅ Examples: name, severity_text, trace_id Array messages ❌ Array attributes ❌ Next steps Follow the OpenTelemetry quick start to help you get started. You'll also want to review the best practices guide for getting the most out of the data you export to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.44469,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>OpenTelemetry</em> with New Relic",
        "sections": "Introduction to <em>OpenTelemetry</em> with New Relic",
        "tags": "<em>Open</em> <em>source</em> telemetry <em>integrations</em>",
        "body": " won’t need to change your instrumentation. Support for newer technologies When new technologies emerge, contributors can build integrations into <em>Open</em>Telemetry or add instrumentation directly to <em>source</em> code, ensuring end users can easily monitor these new technologies. Simplified choice You don’t need"
      },
      "id": "603e81ba196a67304da83dab"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/not-seeing-host-integration-data": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.73087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.9969,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    },
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "JMX Instance Settings",
        "Labels and custom attributes",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-09-27T01:46:48Z",
      "updated_at": "2021-09-19T01:54:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files The configuration file has common settings applicable to all integrations, such as interval, timeout, or inventory_source. To read all about these common settings refer to our configuration format document. Important If you're still using our legacy configuration/definition files, refer to the standard configuration doc for help. Specific settings related to JMX are defined using the env section of the configuration file. These settings control the connection to your JMX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. Config options are below. For an example configuration, see the example config file. JMX Instance Settings The JMX integration collects both metrics (M) and inventory (I) information. Check the Applies To column below to find which settings can be used for each specific collection. For an example, see the host connection file example. Setting Description Default Applies To JMX_HOST The host JMX is running on. localhost M/I JMX_PORT The port JMX is running on. 9999 M/I JMX_URI_PATH The path portion of the JMX Service URI. This is useful for nonstandard service uris. N/A M/I JMX_USER The username for the JMX connection. N/A M/I JMX_PASS The password for the JMX connection. N/A M/I JMX_REMOTE (JBoss specific) Whether or not to use the JMX remote URL connection format. Connection defaults to JBoss Domain-mode if true. false M/I JMX_REMOTE_JBOSS_STANDLONE (JBoss specific) Whether or not to use the JBoss standalone connection format. Only relevant if jmx_remote is set. false M/I CONNECTION_URL Full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" N/A M/I COLLECTION_FILES A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. N/A M/I KEY_STORE The filepath of the keystore containing the JMX client's SSL certificate. N/A M/I KEY_STORE_PASSWORD The password for the SSL key store. N/A M/I LOCAL_ENTITY Collect all metrics on the local entity. Only use when monitoring localhost. false M/I TIMEOUT The timeout for individual JMX queries, in milliseconds. 10000 M/I TRUST_STORE The filepath of the keystore containing the JMX server's SSL certificate. N/A M/I TRUST_STORE_PASSWORD The password for the trust store. N/A M/I METRIC_LIMIT Number of metrics that can be collected per entity. If this limit is exceeded the entity will not be reported. A limit of 0 implies no limit. 200 M/I METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0 or higher. Read more here or see the example below. Using secrets management. Use this to protect sensible information (such as passwords) from being exposed in plain text on the configuration file. For more information, see secrets management. Labels and custom attributes You can further decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics, which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels. These aren't mandatory, and you can remove, modify, or add new ones of your choice. labels: env: production role: jmx Copy Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integrations: - name: nri-jmx env: COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" JMX_HOST: jmx-host.localnet JMX_PASS: admin JMX_PORT: 9999 JMX_USER: admin interval: 15s labels: env: production Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.6731,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ", it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration"
      },
      "id": "6043a8c3196a679722960f3f"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/pass-infrastructure-agent-parameters-host-integration": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.73077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.99686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    },
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "JMX Instance Settings",
        "Labels and custom attributes",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-09-27T01:46:48Z",
      "updated_at": "2021-09-19T01:54:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files The configuration file has common settings applicable to all integrations, such as interval, timeout, or inventory_source. To read all about these common settings refer to our configuration format document. Important If you're still using our legacy configuration/definition files, refer to the standard configuration doc for help. Specific settings related to JMX are defined using the env section of the configuration file. These settings control the connection to your JMX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. Config options are below. For an example configuration, see the example config file. JMX Instance Settings The JMX integration collects both metrics (M) and inventory (I) information. Check the Applies To column below to find which settings can be used for each specific collection. For an example, see the host connection file example. Setting Description Default Applies To JMX_HOST The host JMX is running on. localhost M/I JMX_PORT The port JMX is running on. 9999 M/I JMX_URI_PATH The path portion of the JMX Service URI. This is useful for nonstandard service uris. N/A M/I JMX_USER The username for the JMX connection. N/A M/I JMX_PASS The password for the JMX connection. N/A M/I JMX_REMOTE (JBoss specific) Whether or not to use the JMX remote URL connection format. Connection defaults to JBoss Domain-mode if true. false M/I JMX_REMOTE_JBOSS_STANDLONE (JBoss specific) Whether or not to use the JBoss standalone connection format. Only relevant if jmx_remote is set. false M/I CONNECTION_URL Full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" N/A M/I COLLECTION_FILES A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. N/A M/I KEY_STORE The filepath of the keystore containing the JMX client's SSL certificate. N/A M/I KEY_STORE_PASSWORD The password for the SSL key store. N/A M/I LOCAL_ENTITY Collect all metrics on the local entity. Only use when monitoring localhost. false M/I TIMEOUT The timeout for individual JMX queries, in milliseconds. 10000 M/I TRUST_STORE The filepath of the keystore containing the JMX server's SSL certificate. N/A M/I TRUST_STORE_PASSWORD The password for the trust store. N/A M/I METRIC_LIMIT Number of metrics that can be collected per entity. If this limit is exceeded the entity will not be reported. A limit of 0 implies no limit. 200 M/I METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0 or higher. Read more here or see the example below. Using secrets management. Use this to protect sensible information (such as passwords) from being exposed in plain text on the configuration file. For more information, see secrets management. Labels and custom attributes You can further decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics, which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels. These aren't mandatory, and you can remove, modify, or add new ones of your choice. labels: env: production role: jmx Copy Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integrations: - name: nri-jmx env: COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" JMX_HOST: jmx-host.localnet JMX_PASS: admin JMX_PORT: 9999 JMX_USER: admin interval: 15s labels: env: production Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.67305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ", it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration"
      },
      "id": "6043a8c3196a679722960f3f"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/run-integrations-manually": [
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.73077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "NGINX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " the infrastructure agent. Additional notes: Advanced: <em>Integrations</em> are also available in tarball format to allow for install outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "SNMP monitoring integration (legacy)",
        "Important",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Windows",
        "Configuration",
        "Configure the integration",
        "SNMP Instance Settings",
        "Metric collection files",
        "Tip",
        "Devices",
        "Metric Sets",
        "Inventory",
        "Example configurations",
        "SNMP v2 configuration example",
        "SNMP v2 configuration with retries example",
        "SNMP v3 configuration example",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Check the source code"
      ],
      "title": "SNMP monitoring integration (legacy)",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "9a2481256bfd53c471dee20cc7382fbeab785063",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration/",
      "published_at": "2021-09-27T16:29:51Z",
      "updated_at": "2021-09-20T19:36:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Have you tried our new Network Performance Monitoring? Collect both SNMP and Network Flows to answer the question Is it the network? faster. Our SNMP integration monitors any application that exposes metrics with SNMP. Read on to install the integration, and to configure a YAML file to start collecting metrics. This doc also contains sample YAML files to help you get started. Compatibility and requirements Our integration is compatible with SNMP version 2 or 3. Before installing the integration, make sure that you meet the following requirements: SNMP monitoring enabled device or application. If SNMP is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running SNMP. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Install and activate To install the SNMP integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-snmp. Change directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration and metrics files: sudo cp snmp-config.yml.sample snmp-config.yml Copy sudo cp snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Windows Download the nri-snmp .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-snmp/nri-snmp-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-snmp-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration and metrics files by running: copy snmp-config.yml.sample snmp-config.yml Copy copy snmp-metrics.yml.sample snmp-metrics.yml Copy Edit the snmp-config.yml file as described in the configuration settings. Edit the snmp-metrics.yml file as described in the metric collection files. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, snmp-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations, such as interval, timeout, inventory_source. To read all about these common settings, refer to our Configuration Format document. Important If you are still using our legacy configuration/definition files, please refer to this document for help. Specific settings related to SNMP are defined using the env section of the configuration file. These settings control the connection to your SNMP instance as well as other security settings and features. The list of valid settings is described in the next section of this document. SNMP Instance Settings The SNMP integration collects both metrics and inventory information. The type of metrics collected is determined by the information added to the metrics collection file: Setting Description Default SNMP_HOST Hostname or IP where SNMP is running. localhost SNMP_PORT Port on which SNMP is listening. 161 TIMEOUT Request timeout in seconds. 10 RETRIES Number of retries in case of timeout. 0 EXPONENTIAL_TIMEOUT Doubles timeout value in each retry attempt. false V3 Use SNMP version 3. false COMMUNITY The SNMP community string. Only for SNMP v2. public USERNAME Security identifier for v3 user. Only for SNMP v3. N/A SECURITY_LEVEL Security level. Only for SNMP v3. Valid options are: noAuthnoPriv authNoPriv authPriv N/A AUTH_PROTOCOL Authentication protocol. Only for SNMP v3. Valid options are: MD5 SHA MD5 AUTH_PASSPHRASE Password used to generate the key for authentication. Only for SNMP v3. N/A PRIV_PROTOCOL Encryption protocol. Only for SNMP v3. Valid options are: AES DES AES PRIV_PASSPHRASE Password used to generate the key used to encrypt messages. Only for SNMP v3. N/A COLLECTION_FILES Comma-separated list of full file paths to metric collection definition files. N/A The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see the example below. Using secrets management. Use this to protect sensitive information, such as passwords that would be exposed in plain text on the configuration file. For more information, see Secrets management. Metric collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Sample metrics collection file: /etc/newrelic-infra/integrations.d/snmp-metrics.yml.sample Tip You can write different collection files to ease organization and maintenance. See configuration file below for an example. Devices A collection file collects and organizes metrics. Each file contains a single collect: block which contains one or more devices. For each device, the following keys are defined: device: The name of the SNMP device from which metrics are being collected. This field is required. metrics_sets: A list of metric sets that organize metrics to collect from this device. See Metric Sets. inventory: A list of Object Identifiers (OIDs) to collect from this device and report as inventory. See Inventory. Metric Sets Metrics Set represents a logical grouping of SNMP Object Identifiers (OIDs) to get from the SNMP device and report to New Relic. For each metric set, the following keys are defined: name: The metric set name. event_type: The event type name for a collection from this metric set. For tips on naming event types, see Naming tips. type: The metric set type. Use scalar to describe a metric set of SNMP scalar OIDs or table to describe a metric set that corresponds to the metrics from an SNMP table. root_oid: If type is a table, enter the root OID of the table. The integration performs an SNMP walk from this OID to get the table metrics. index: If type is a table, enter one or more table column index OIDs that define the table's row uniquely. For each index OID, the following keys are defined: oid: The OID name to collect, e.g., .1.3.6.1.4.1.52032.1.2.1.1.1. This field is required. name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metrics: List of SNMP OIDs to be collected as part of this metric set. Enter a list of scalar OIDs or table column OIDs as appropriate for the type. oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.2.0​. This field is required. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the OID name. metric_type: The New Relic metric type to collect this attribute as. Options are gauge, delta, pdelta, rate, prate or attribute. If unspecified, the integration attempts to infer the metric type . Inventory Inventory is an array of SNMP Object Identifiers (OIDs) to be collected and reported as inventory items. For each OID, the following keys are defined: oid: The OID name to collect, e.g., 1.3.6.1.4.1.52032.1.1.4.0. This field is required. category: The category name under which the inventory item will appear in New Relic. This field is required. name: The name under which the inventory item will appear in New Relic. This field is required. Example configurations SNMP v2 configuration example This is the basic configuration used to collect SNMP v2 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v2 configuration with retries example In this configuration we collect SNMP v2 metrics and inventory using a timeout of 5 seconds, 3 retries and exponential timeout. With this configuration the integration will make 3 requests with the following timeouts: 1st request: 5 seconds 2nd request: 10 seconds 3rd request: 20 seconds integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 TIMEOUT: 5 RETRIES: 3 EXPONENTIAL_TIMEOUT: true COMMUNITY: public COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy SNMP v3 configuration example This is the basic configuration used to collect SNMP v3 metrics and inventory from your localhost: integrations: - name: nri-snmp env: SNMP_HOST: localhost SNMP_PORT: 161 V3: true USERNAME: snmp_user SECURITY_LEVEL: authNoPriv AUTH_PROTOCOL: SHA AUTH_PASSPHRASE: my_auth_password PRIV_PROTOCOL: AES PRIV_PASSPHRASE: my_priv_password COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/snmp-metrics.yml\" interval: 30s labels: targets: routers inventory_source: config/snmp Copy Example metrics collection file collect: # Sample dataset for New Relic SNMP test application - device: NR-SNMP-MIB metric_sets: - name: ScalarSet type: scalar event_type: SNMPSample metrics: - metric_name: counterSample oid: .1.3.6.1.4.1.52032.1.1.1 metric_type: auto - metric_name: rateSample oid: .1.3.6.1.4.1.52032.1.1.2 metric_type: auto - metric_name: displayStringSample oid: .1.3.6.1.4.1.52032.1.1.3 metric_type: auto - name: CityWeatherTable type: table event_type: SNMPSample root_oid: .1.3.6.1.4.1.52032.1.2.1 index: - metric_name: cityName oid: .1.3.6.1.4.1.52032.1.2.1.1.1 metric_type: auto metrics: - metric_name: temperature oid: .1.3.6.1.4.1.52032.1.2.1.1.2 metric_type: gauge - metric_name: humidity oid: .1.3.6.1.4.1.52032.1.2.1.1.3 metric_type: gauge - metric_name: wind oid: .1.3.6.1.4.1.52032.1.2.1.1.4 metric_type: gauge - metric_name: windDirection oid: .1.3.6.1.4.1.52032.1.2.1.1.5 metric_type: gauge inventory: - oid: .1.3.6.1.4.1.52032.1.1.4.0 category: version name: buildNumber Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the SNMP data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is not reported to an integration dashboard because the samples gathered are generally unique to the device being monitored. You will need to build your own dashboard. SNMP metrics are attached to the user defined event type specified in the configuration file. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the collection they are collecting from. This metadata should be used in NRQL queries to filter and facet the data so that the query returns only the data for the desired metric set. Each event contains the following metadata: Name Description device The device name for these metrics. host The SNMP host the metrics are being collected from. port The SNMP port the metrics are being collected from. displayName The metric set name for these metrics. Inventory data The SNMP integration captures the configuration parameters of the SNMP integration. The data is available on the Infrastructure Inventory page, under the config/snmp source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, you can check the log file for this message: Important \"Metric Set x has n metrics, the current limit is 200. This metric set will not be reported.\" If you see this error message, lower the number of metrics being sent for the reported metric set. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.99686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SNMP monitoring <em>integration</em> (legacy)",
        "sections": "SNMP monitoring <em>integration</em> (legacy)",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " outside of a package manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Configure the integration There are several ways to configure the integration, depending on how it was installed"
      },
      "id": "60450996196a678a6f960f4f"
    },
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "JMX Instance Settings",
        "Labels and custom attributes",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-09-27T01:46:48Z",
      "updated_at": "2021-09-19T01:54:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files The configuration file has common settings applicable to all integrations, such as interval, timeout, or inventory_source. To read all about these common settings refer to our configuration format document. Important If you're still using our legacy configuration/definition files, refer to the standard configuration doc for help. Specific settings related to JMX are defined using the env section of the configuration file. These settings control the connection to your JMX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. Config options are below. For an example configuration, see the example config file. JMX Instance Settings The JMX integration collects both metrics (M) and inventory (I) information. Check the Applies To column below to find which settings can be used for each specific collection. For an example, see the host connection file example. Setting Description Default Applies To JMX_HOST The host JMX is running on. localhost M/I JMX_PORT The port JMX is running on. 9999 M/I JMX_URI_PATH The path portion of the JMX Service URI. This is useful for nonstandard service uris. N/A M/I JMX_USER The username for the JMX connection. N/A M/I JMX_PASS The password for the JMX connection. N/A M/I JMX_REMOTE (JBoss specific) Whether or not to use the JMX remote URL connection format. Connection defaults to JBoss Domain-mode if true. false M/I JMX_REMOTE_JBOSS_STANDLONE (JBoss specific) Whether or not to use the JBoss standalone connection format. Only relevant if jmx_remote is set. false M/I CONNECTION_URL Full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" N/A M/I COLLECTION_FILES A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. N/A M/I KEY_STORE The filepath of the keystore containing the JMX client's SSL certificate. N/A M/I KEY_STORE_PASSWORD The password for the SSL key store. N/A M/I LOCAL_ENTITY Collect all metrics on the local entity. Only use when monitoring localhost. false M/I TIMEOUT The timeout for individual JMX queries, in milliseconds. 10000 M/I TRUST_STORE The filepath of the keystore containing the JMX server's SSL certificate. N/A M/I TRUST_STORE_PASSWORD The password for the trust store. N/A M/I METRIC_LIMIT Number of metrics that can be collected per entity. If this limit is exceeded the entity will not be reported. A limit of 0 implies no limit. 200 M/I METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0 or higher. Read more here or see the example below. Using secrets management. Use this to protect sensible information (such as passwords) from being exposed in plain text on the configuration file. For more information, see secrets management. Labels and custom attributes You can further decorate your metrics using labels. Labels allow you to add key/value pair attributes to your metrics, which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels. These aren't mandatory, and you can remove, modify, or add new ones of your choice. labels: env: production role: jmx Copy Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integrations: - name: nri-jmx env: COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" JMX_HOST: jmx-host.localnet JMX_PASS: admin JMX_PORT: 9999 JMX_USER: admin interval: 15s labels: env: production Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.67305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ", it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration"
      },
      "id": "6043a8c3196a679722960f3f"
    }
  ],
  "/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting": [
    {
      "sections": [
        "Remote monitoring in on-host integrations",
        "Important",
        "Effects of activating remote_monitoring",
        "Alert verification",
        "New entity attributes",
        "Changes in recorded metrics",
        "Unrecorded attributes",
        "Updated hostname"
      ],
      "title": "Remote monitoring in on-host integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "1cfea4c65b855ce9ac5078d2a36ba11b63a6101b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/remote-monitoring-host-integrations/",
      "published_at": "2021-09-26T22:07:52Z",
      "updated_at": "2021-03-16T06:05:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "From a New Relic perspective, entity is a broad concept. An entity is anything New Relic can identify that has data you can monitor. Integrations can be configured to create their own entity, called a remote entity, by setting the remote_monitoring option to true. If set to false, an integration will be considered a local entity, and the data related to it will be attached to the host entity that the agent creates. Remote monitoring requires infrastructure agent version 1.2.25 or higher. For the Apache, Cassandra, MySQL, NGINX, and Redis integrations, remote monitoring (and multi-tenancy) is enabled by activating the configuration parameter remote_monitoring. Important If your Apache, Cassandra, MySQL, NGINX, or Redis service is located in the same host as the agent, when you activate remote monitoring the resulting entity will be considered as remote, regardless of its actual location. This may affect alerts, alter attributes, and have other effects, as explained here. Effects of activating remote_monitoring By enabling remote_monitoring, the integration becomes a different entity which is no longer attached to the infrastructure agent. As a result, the following items may be affected: Alert verification Enabling remote monitoring can affect your configured alerts in case they are using any of the values that are affected by this new feature. We strongly recommend checking your existing alerts to make sure they keep on working as expected. New entity attributes These attributes are modified in the resulting entity: Display name: New entity unique key (instead of using the display name) Entity GUID: New entity GUID Entity ID: New entity ID Entity key: New entity unique key (instead of using the display name) External key: Using integration entity name (instead of using the agent display) Changes in recorded metrics When remote monitoring is enabled, we will add the hostname and port values to all metrics. If the nricluster name or nriservice are defined in the integration configuration file, they will also be decorated. Unrecorded attributes Since the integration is now an independent entity which is not attached to the agent, the following agent attributes are not collected: agentName agentVersion coreCount criticalViolationCount fullHostname instanceType kernelVersion linuxDistribution entityType operatingSystem processorCount systemMemoryBytes warningViolationCount Your custom attributes Updated hostname For the ApacheSample, RedisSample, CassandraSample, and NginxSample integration metrics, we will use the integration configuration hostname instead of the short hostname from the agent. When the integration hostname is a loopback address, the agent will replace it in order to guarantee uniqueness.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 189.11528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Remote monitoring in <em>on</em>-<em>host</em> <em>integrations</em>",
        "sections": "Remote monitoring in <em>on</em>-<em>host</em> <em>integrations</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " will be considered a local entity, and the <em>data</em> related to it will be attached to the <em>host</em> entity that the agent creates. Remote monitoring requires infrastructure agent version 1.2.25 or higher. For the Apache, Cassandra, MySQL, NGINX, and Redis <em>integrations</em>, remote monitoring (and multi-tenancy"
      },
      "id": "603ec000e7b9d216732a07ef"
    },
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "Find <em>and</em> <em>use</em> <em>data</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " and <em>use</em> <em>data</em> <em>Data</em> from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this <em>data</em> for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and <em>use</em> your <em>data</em>, see <em>Understand</em> integration <em>data</em>"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Find and use your Kubernetes data",
        "Query Kubernetes data",
        "Event types",
        "Manage alerts",
        "Create an alert condition",
        "Use the predefined alert types and thresholds",
        "Select alert notifications",
        "Pod alert notification example",
        "Container resource notification example",
        "Create alert conditions using NRQL",
        "Kubernetes attributes and metrics",
        "Node data",
        "Namespace data",
        "Deployment data",
        "ReplicaSet data",
        "DaemonSet data",
        "StatefulSet data",
        "Pod data",
        "Cluster data",
        "Container data",
        "Volume data",
        "API server data",
        "Controller manager data",
        "Scheduler data",
        "ETCD data",
        "Endpoint data",
        "Service data",
        "Horizontal Pod Autoscaler data",
        "Kubernetes metadata in APM-monitored applications",
        "For more help"
      ],
      "title": "Find and use your Kubernetes data",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Understand and use data"
      ],
      "external_id": "d36002ee54b0e3573ec4efef9f9c5ee940f49f96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/understand-use-data/find-use-your-kubernetes-data/",
      "published_at": "2021-09-26T22:16:39Z",
      "updated_at": "2021-08-08T13:47:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own charts and query all your Kubernetes integration data using the query builder and the NerdGraph API. Our integration collects Kubernetes data by instrumenting the container orchestration layer. For a simpler and more visual experience, use the cluster explorer. one.newrelic.com > Dashboards: Using the query builder you can query your Kubernetes data and create clear visualizations. Query Kubernetes data The simplest way to query your Kubernetes data is using the query builder, which accepts NRQL queries. Alternatively, you can use the NerdGraph API to retrieve Kubernetes data. Event types Kubernetes data is attached to the following event types: Event name Type of Kubernetes data Available since K8sNodeSample Node data v1.0.0 K8sNamespaceSample Namespace data v1.0.0 K8sDeploymentSample Deployment data v1.0.0 K8sReplicasetSample ReplicaSet data v1.0.0 K8sDaemonsetSample DaemonSet data v1.13.0 K8sStatefulsetSample StatefulSet data v1.13.0 K8sPodSample Pod data v1.0.0 K8sClusterSample Cluster data v1.0.0 K8sContainerSample Container data v1.0.0 K8sVolumeSample Volume data v1.0.0 K8sApiServerSample API server data v1.11.0 K8sControllerManagerSample Controller manager data v1.11.0 K8sSchedulerSample Scheduler data v1.11.0 K8sEtcdSample ETCD data v1.11.0 K8sEndpointSample Endpoint data v1.13.0 K8sServiceSample Service data v1.13.0 K8sHpaSample Horizontal Pod Autoscaler data v2.3.0 Manage alerts You can be notified about alert violations for your Kubernetes data: Create an alert condition To create an alert condition for the Kubernetes integration: Go to one.newrelic.com > Infrastructure > Settings > Alerts > Kubernetes, then select Create alert condition. To filter the alert to Kubernetes entities that only have the chosen attributes, select Filter. Select the threshold settings. For more on the Trigger an alert when... options, see Alert types. Select an existing alert policy, or create a new one. Select Create. When an alert condition's threshold is triggered, New Relic sends a notification to the policy's notification channels. Use the predefined alert types and thresholds The Kubernetes integration comes with its own alert policy and alert conditions. To see what the predefined alert conditions are, see Kubernetes integration: Predefined alert policy. In addition, you can create an alert condition for any metric collected by any New Relic integration you use, including the Kubernetes integration: Select the alert type Integrations. From the Select a data source dropdown, select a Kubernetes (K8s) data source. Select alert notifications When an alert condition's threshold is triggered, New Relic sends a message to the notification channel(s) chosen in the alert policy. Depending on the type of notification, you may have the following options: View the incident. Acknowledge the incident. Go to a chart of the incident data by selecting the identifier name. The entity identifier that triggered the alert appears near the top of the notification message. The format of the identifier depends on the alert type: Available pods are less than desired pods alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:replicaset:REPLICASET_NAME Copy CPU or memory usage alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:POD_NAME:container:CONTAINER_NAME Copy Here are some examples. Pod alert notification example For Available pods are less than desired pods alerts, the ID of the ReplicaSet triggering the issue might look like this: k8s:beam-production:default:replicaset:nginx-deployment-1623441481 Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: default ReplicaSet name: nginx-deployment-1623441481 Container resource notification example For container CPU or memory usage alerts, the entity might look like this: k8s:beam-production:kube-system:kube-state-metrics-797bb87c75-zncwn:container:kube-state-metrics Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: kube-system Pod namespace: kube-state-metrics-797bb87c75-zncwn Container name: kube-state-metrics Create alert conditions using NRQL Follow standard procedures to create alert conditions for NRQL queries. Kubernetes attributes and metrics The Kubernetes integration collects the following metrics and other attributes. Node data Query the K8sNodeSample event for node data: Node attribute Description allocatableCpuCores Node allocatable CPU cores allocatableMemoryBytes Node allocatable memory bytes allocatablePods Node allocatable pods allocatableEphemeralStorageBytes Node allocatable ephemeral-storage bytes capacityCpuCores Node CPU capacity capacityMemoryBytes Node memory capacity (in bytes) capacityPods Pod capacity of the node capacityEphemeralStorageBytes Node ephemeral-storage capacity clusterName Name that you assigned to the cluster when you installed the Kubernetes integration condition.{conditionName}={conditionValue} Status of the current observed node condition. The reported conditions can vary depending on your Kubernetes flavor and installed operators. Examples of common conditions are: Ready, DiskPressure, MemoryPressure, PIDPressure and NetworkUnavailable. Condition values can be 1 (true), 0 (false), or -1 (unknown). cpuUsedCoreMilliseconds Node CPU usage measured in core milliseconds cpuUsedCores Node CPU usage measured in cores cpuRequestedCores Total amount of CPU cores requested allocatableCpuCoresUtilization Percentage of CPU cores actually used with respect to the CPU cores allocatable fsAvailableBytes Bytes available in the node filesystem fsCapacityBytes Total capacity of the node filesystem in bytes fsInodes Total number of inodes in the node filesystem fsInodesFree Free inodes in the node filesystem fsInodesUsed Used inodes in the node filesystem fsUsedBytes Used bytes in the node filesystem fsCapacityUtilization Percentage of used bytes in the node filesystem with respect to the capacity memoryAvailableBytes Bytes of memory available in the node memoryMajorPageFaultsPerSecond Number of major page faults per second in the node memoryPageFaults Number of page faults in the node memoryRssBytes Bytes of rss memory memoryUsedBytes Bytes of memory used memoryWorkingSetBytes Bytes of memory in the working set memoryRequestedBytes Total amount of requested memory allocatableMemoryUtilization Percentage of bytes of memory in the working set with respect to the node allocatable memory net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network nodeName Host name that the pod is running on runtimeAvailableBytes Bytes available to the container runtime filesystem runtimeCapacityBytes Total capacity assigned to the container runtime filesystem in bytes runtimeInodes Total number of inodes in the container runtime filesystem runtimeInodesFree Free inodes in the container runtime filesystem runtimeInodesUsed Used inodes in the container runtime filesystem runtimeUsedBytes Used bytes in the container runtime filesystem unschedulable Status of node schedulability of new pods. Its value can be 0 (false) or 1 (true) label.LABEL_NAME Labels associated with your node, so you can filter and query for specific nodes Namespace data Query the K8sNamespaceSample event for namespace data: Namespace attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of the namespace when it was created namespace Name of the namespace to be used as an identifier label.LABEL_NAME Labels associated with your namespace, so you can filter and query for specific namespaces status Current status of the namespace. The value can be Active or Terminated Deployment data Query the K8sDeploymentSample event for deployment data: Deployment attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the deployment was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the deployment belongs to label.LABEL_NAME Labels associated with your deployment, so you can filter and query for specific deployments podsAvailable Number of replicas that are currently available podsDesired Number of replicas that you defined in the deployment podsTotal Total number of replicas that are currently running podsUnavailable Number of replicas that are currently unavailable podsUpdated Number of replicas that have been updated to achieve the desired state of the deployment podsMissing Total number of replicas that are missing (number of desired replicas, podsDesired, minus the total number of replicas, podsTotal) ReplicaSet data Query the K8sReplicasetSample event for ReplicaSet data: Replica attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the ReplicaSet was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the ReplicaSet belongs to observedGeneration Integer representing generation observed by the ReplicaSet podsDesired Number of replicas that you defined in the deployment podsFullyLabeled Number of pods that have labels that match the ReplicaSet pod template labels podsReady Number of replicas that are ready for this ReplicaSet podsTotal Total number of replicas that are currently running podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) replicasetName Name of the ReplicaSet to be used as an identifier DaemonSet data Query the K8sDaemonsetSample event for DaemonSet data: DaemonSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the DaemonSet was created namespaceName Name of the namespace that the DaemonSet belongs to label.LABEL_NAME Labels associated with your DaemonSet, so you can filter and query for specific DaemonSet daemonsetName Name associated with the DaemonSet podsDesired The number of nodes that should be running the daemon pod podsScheduled The number of nodes running at least one daemon pod and are supposed to podsAvailable The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available podsReady The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready podsUnavailable The number of nodes that should be running the daemon pod and have none of the daemon pod running and available podsMisscheduled The number of nodes running a daemon pod but are not supposed to podsUpdatedScheduled The total number of nodes that are running updated daemon pod podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) metadataGeneration Sequence number representing a specific generation of the desired state StatefulSet data Query the K8sStatefulsetSample event for StatefulSet data: StatefulSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the StatefulSet was created namespaceName Name of the namespace that the StatefulSet belongs to label.LABEL_NAME Labels associated with your StatefulSet, so you can filter and query for specific StatefulSet statefulsetName Name associated with the StatefulSet podsDesired Number of desired pods for a StatefulSet podsReady The number of ready replicas per StatefulSet podsCurrent The number of current replicas per StatefulSet podsTotal The number of replicas per StatefulSet podsUpdated The number of updated replicas per StatefulSet podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) observedGeneration The generation observed by the StatefulSet controller metadataGeneration Sequence number representing a specific generation of the desired state for the StatefulSet currentRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between 0 and podsCurrent updateRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between podsDesired-podsUpdated and podsDesired Pod data Query the K8sPodSample event for pod data: Pod attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the pod was created in epoch seconds createdBy Name of the Kubernetes object that created the pod. For example, newrelic-infra createdKind Kind of Kubernetes object that created the pod. For example, DaemonSet. deploymentName Name of the deployment to be used as an identifier isReady Boolean representing whether or not the pod is ready to serve requests isScheduled Boolean representing whether or not the pod has been scheduled to run on a node label.LABEL_NAME Labels associated with your pod, so you can filter and query for specific pods message Details related to the last pod status change namespace Name of the namespace that the pod belongs to net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network net.errorsPerSecond Number of errors per second net.rxBytesPerSecond Number of bytes per second received over the network net.txBytesPerSecond Number of bytes per second transmitted over the network nodeIP Host IP address that the pod is running on nodeName Host name that the pod is running on podIP IP address of the pod. If it doesn't have an IP, it'll be empty podName Name of the pod to be used as an identifier reason Reason why the pod is in the current status startTime Timestamp of when the pod started running in epoch seconds status Current status of the pod. Value can be Pending, Running, Succeeded, Failed, Unknown Cluster data Query the K8sClusterSample event to see cluster data: Cluster attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration clusterK8sVersion Kubernetes version that the cluster is running Container data Query the K8sContainerSample event for container data: Container attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration containerID Unique ID associated with the container. If you are running Docker, this is the Docker container id containerImage Name of the image that the container is running containerImageID Unique ID associated with the image that the container is running containerName Name associated with the container cpuLimitCores Integer representing limit CPU cores defined for the container in the pod specification cpuRequestedCores Requested CPU cores defined for the container in the pod specification cpuUsedCores CPU cores actually used by the container cpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU limit specified. This percentage is based on this calculation: (cpuUsedCores / cpuLimitCores) * 100 requestedCpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU request specified deploymentName Name of the deployment to be used as an identifier isReady Boolean. Whether or not the container's readiness check succeeded label.LABEL_NAME Labels associated with your container, so you can filter and query for specific containers memoryLimitBytes Integer representing limit bytes of memory defined for the container in the pod specification memoryRequestedBytes Integer. Requested bytes of memory defined for the container in the pod specification memoryUsedBytes Integer. Bytes of memory actually used by the container memoryUtilization Percentage of memory actually used by the container with respect to the memory limit specified requestedMemoryUtilization Percentage of memory actually used by the container with respect to the memory request specified memoryWorkingSetBytes Integer. Bytes of memory in the working set memoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory limit specified requestedMemoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory request specified namespace Name of the namespace that the container belongs to nodeIP Host IP address the container is running on nodeName Host name that the container is running on podName Name of the pod that the container is in, to be used as an identifier reason Provides a reason why the container is in the current status restartCount Number of times the container has been restarted status Current status of the container. Value can be Running, Terminated, or Unknown containerCpuCfsPeriodsDelta Delta change of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsDelta Delta change of throttled period intervals containerCpuCfsThrottledSecondsDelta Delta change of duration the container has been throttled, in seconds containerCpuCfsPeriodsTotal Total number of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsTotal Total number of throttled period intervals containerCpuCfsThrottledSecondsTotal Total time duration the container has been throttled, in seconds containerMemoryMappedFileBytes Total size of memory mapped files used by this container, in bytes Volume data Query the K8sVolumeSample event for volume data: Volume attribute Description volumeName Name that you assigned to the volume at creation clusterName Cluster where the volume is configured namespace Namespace where the volume is configured podName The pod that the volume is attached to. The Kubernetes monitoring integration lists Volumes that are attached to a pod persistent If this is a persistent volume, this value is set to true pvcNamespace Namespace where the Persistent Volume Claim is configured pvcName Name that you assigned to the Persistent Volume Claim at creation fsCapacityBytes Capacity of the volume, in bytes fsUsedBytes Usage of the volume, in bytes fsAvailableBytes Capacity available of the volume, in bytes fsUsedPercent Usage of the volume in percentage fsInodes Total inodes of the volume fsInodesUsed inodes used in the volume fsInodesFree inodes available in the volume Volume data is available for volume plugins that implement the MetricsProvider interface: AWSElasticBlockStore AzureDisk AzureFile Cinder Flexvolume Flocker GCEPersistentDisk GlusterFS iSCSI StorageOS VsphereVolume API server data Query the K8sApiServerSample event to see API Server data. For more information, see Configure control plane monitoring: API server attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent, in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist apiserverRequestDelta_verb_VERB_code_CODE Difference of the number of apiserver requests, broken out for each verb and HTTP response code apiserverRequestRate_verb_VERB_code_CODE Rate of apiserver requests, broken out for each verb and HTTP response code restClientRequestsDelta_code_CODE_method_METHOD Difference of the number of HTTP requests, partitioned by method and code restClientRequestsRate_code_CODE_method_METHOD Rate of the number of HTTP requests, partitioned by method and code etcdObjectCounts_resource_RESOURCE-KIND Number of stored objects at the time of last check, split by kind Controller manager data Query the K8sControllerManagerSample event to see Controller manager data. For more information, see Configure control plane monitoring: Controller manager attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist workqueueAddsDelta_name_WORK-QUEUE-NAME Difference of the total number of adds handled by workqueue workqueueDepth_name_WORK-QUEUE-NAME Current depth of workqueue workqueueRetriesDelta_name_WORK-QUEUE-NAME Difference of the total number of retries handled by workqueue leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master Scheduler data Query the K8sSchedulerSample event in New Relic Insights to see Scheduler data. For more information, see Configure control plane monitoring: Scheduler attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master httpRequestDurationMicroseconds_handler_HANDLER_quantile_QUANTILE The HTTP request latencies in microseconds, per quantile httpRequestDurationMicroseconds_handler_HANDLER_sum The sum of the HTTP request latencies, in microseconds httpRequestDurationMicroseconds_handler_HANDLER_count The number of observed HTTP requests events restClientRequestsDelta_code_CODE_host_HOST_method_METHOD Difference of the number of HTTP requests, partitioned by status code, method, and host restClientRequestsRate_code_CODE_host_HOST_method_METHOD Rate of the number of HTTP requests, partitioned by status code, method, and host schedulerScheduleAttemptsDelta_result_RESULT Difference of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerScheduleAttemptsRate_result_RESULT Rate of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerSchedulingDurationSeconds_operation_OPERATION_quantile_QUANTILE Scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_sum The sum of scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_count The number of observed events of schedulings split by sub-parts of the scheduling operation. schedulerPreemptionAttemptsDelta Difference of the total preemption attempts in the cluster till now schedulerPodPreemptionVictims Number of selected preemption victims ETCD data Query the K8sEtcdSample event to see ETCD data. For more information, see Configure control plane monitoring: ETCD attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist etcdServerHasLeader Whether or not a leader exists. 1 is existence, 0 is not etcdServerLeaderChangesSeenDelta Difference of the number of leader changes seen etcdMvccDbTotalSizeInBytes Total size of the underlying database physically allocated, in bytes etcdServerProposalsCommittedDelta Difference of the total number of consensus proposals committed etcdServerProposalsCommittedRate Rate of the total number of consensus proposals committed etcdServerProposalsAppliedDelta Difference of the total number of consensus proposals applied etcdServerProposalsAppliedRate Rate of the total number of consensus proposals applied etcdServerProposalsPending The current number of pending proposals to commit etcdServerProposalsFailedDelta Difference of the total number of failed proposals seen etcdServerProposalsFailedRate Rate of the total number of failed proposals seen processOpenFds Number of open file descriptors processMaxFds Maximum number of open file descriptors processFdsUtilization Percentage open file descriptors with respect to the maximum number that can be opened etcdNetworkClientGrpcReceivedBytesRate Rate of the total number of bytes received from gRPC clients etcdNetworkClientGrpcSentBytesRate Rate of the total number of bytes sent to gRPC clients Endpoint data Query the K8sEndpointSample event in New Relic Insights for endpoint data: Endpoint attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the endpoint was created namespaceName Name of the namespace that the endpoint belongs to endpointName Name associated with the endpoint label.LABEL_NAME Labels associated with your endpoint, so you can filter and query for specific endpoints addressAvailable Number of addresses available in endpoint addressNotReady Number of addresses not ready in endpoint Service data Query the K8sServiceSample event for service data: Service attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the service was created namespaceName Name of the namespace that the service belongs to label.LABEL_NAME Labels associated with your service, so you can filter and query for specific service serviceName Name associated with the service loadBalancerIP The IP of the external load balancer, if Spectype is LoadBalancer. externalName The external name value, if Spectype is ExternalName clusterIP The internal cluster IP, if Spectype is ClusterIP specType Type of the service selector.LABEL_NAME The label selector that this service targets Horizontal Pod Autoscaler data Query the K8sHpaSample event in New Relic Insights for Horizontal Pod Autoscaler data: HPA attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration label.LABEL_NAME Labels associated with your HPA, so you can filter and query for specific autoscaler currentReplicas Current number of replicas of pods managed by this autoscaler desiredReplicas Desired number of replicas of pods managed by this autoscaler minReplicas Lower limit for the number of pods that can be set by the autoscaler, 1 by default maxReplicas Upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than minReplicas targetMetric The metric specifications used by this autoscaler when calculating the desired replica count isAble Boolean representing whether or not the autoscaler is able to fetch and update scales, as well as whether or not any backoff-related conditions would prevent scaling isActive Boolean representing whether or not the autoscaler is enabled (if it's able to calculate the desired scales) isLimited Boolean representing whether or not the autoscaler is capped, either up or down, by the maximum or minimum replicas configured labels Number of Kubernetes labels converted to Prometheus labels metadataGeneration The generation observed by the HorizontalPodAutoscaler controller Kubernetes metadata in APM-monitored applications By linking your applications with Kubernetes, the following attributes are added to application trace and distributed trace: nodeName containerName podName clusterName deploymentName namespaceName For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.97949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find <em>and</em> <em>use</em> your Kubernetes <em>data</em>",
        "sections": "Find <em>and</em> <em>use</em> your Kubernetes <em>data</em>",
        "tags": "<em>Understand</em> <em>and</em> <em>use</em> <em>data</em>",
        "body": " Relic integration you <em>use</em>, including the Kubernetes integration: Select the alert type <em>Integrations</em>. From the Select a <em>data</em> source dropdown, select a Kubernetes (K8s) <em>data</em> source. Select alert notifications When an alert condition&#x27;s threshold is triggered, New Relic sends a message to the notification"
      },
      "id": "603eb9a4196a678bfca83dbb"
    }
  ],
  "/docs/integrations/host-integrations/understand-use-data/remote-monitoring-host-integrations": [
    {
      "sections": [
        "On-host integration data collection and reporting",
        "Data collection and reporting process",
        "File structure and specifications"
      ],
      "title": "On-host integration data collection and reporting",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "76942c8b7c37f1eaf368770c80177e3a43d8ca4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting/",
      "published_at": "2021-09-26T18:21:57Z",
      "updated_at": "2021-03-16T06:04:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how New Relic on-host integrations collect and report data to New Relic. Data collection and reporting process This is how an infrastructure on-host integration sends data to New Relic: On startup, the infrastructure agent scans the directory that contains the integration's definition files. The infrastructure agent registers every integration executable defined in the definition file. The agent scans a dedicated directory for integration configuration files. If those config files specify integrations that have been registered with the infrastructure agent, the agent sets up and schedules the integrations. At the scheduled interval (the default is 15 seconds), the agent harvests the data from the integration and prepares it for transmission. Every 60 seconds, it sends that data to New Relic, along with any other infrastructure data. After a successful collection pass, the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-host integrations can help you customize your integration, understand and use your data, and troubleshoot problems. On-host integrations adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host integration. For an explanation of these file specifications, see File specs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.00119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>On</em>-<em>host</em> <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "sections": "<em>On</em>-<em>host</em> <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ", the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-<em>host</em> <em>integrations</em> can help you customize your integration, <em>understand</em> and <em>use</em> your <em>data</em>, and troubleshoot problems. On-<em>host</em> <em>integrations</em> adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-<em>host</em> integration. For an explanation of these file specifications, see File specs."
      },
      "id": "603e8553196a67ca20a83dd5"
    },
    {
      "sections": [
        "NGINX monitoring integration",
        "Tip",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate the integration",
        "ECS",
        "Kubernetes",
        "Linux",
        "Configuration",
        "Enabling your NGINX Server",
        "Configure the integration",
        "Important",
        "NGINX Instance Settings",
        "Labels/Custom Attributes",
        "Example configurations",
        "BASIC CONFIGURATION",
        "HTTP BASIC AUTHENTICATION",
        "METRICS ONLY WITH SELF-SIGNED CERTIFICATE",
        "ENVIRONMENT VARIABLES REPLACEMENT",
        "MULTI-INSTANCE MONITORING",
        "Find and use data",
        "Metrics",
        "NGINX Open Source",
        "NGINX Plus",
        "Inventory data",
        "System metadata",
        "Check the source code"
      ],
      "title": "NGINX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "07889751e13462278f4874ff42fd2cdbd11ad12a",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration/",
      "published_at": "2021-09-27T01:39:52Z",
      "updated_at": "2021-09-26T01:44:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Want to help make this doc better? Try our beta NGINX monitoring integration doc and give us feedback by creating a GitHub issue. Help us continue creating great experiences for you! Our NGINX integration collects and sends inventory and metrics from your NGINX server to our platform, where you can see data on connections and client requests so that you can find the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with both NGINX Open Source and NGINX Plus. Before installing the integration, make sure that you meet the following requirements: A New Relic account. Don't have one? Sign up for free! No credit card required. NGINX extension enabled, as described in the Configure the integration section. If NGINX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running NGINX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. Quick start Instrument your NGINX server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the NGINX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your NGINX server. Install and activate the integration To install the NGINX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the general instructions for installing an integration, using the filename nri-nginx. Then continue on to the steps below. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp nginx-config.yml.sample nginx-config.yml Copy Edit the configuration file nginx-config.yml. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configuration Enabling your NGINX Server To capture data from the NGINX integration, you must first enable and configure the applicable extension module: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module Configure the integration There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, nginx-config.yml. An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. The configuration file has common settings applicable to all integrations like interval, timeout, inventory_source. To read all about these common settings refer to our Configuration Format document. Important If you are still using our Legacy configuration/definition files please refer to this document for help. Specific settings related to NGINX are defined using the env section of the configuration file. These settings control the connection to your NGINX instance as well as other security settings and features. The list of valid settings is described in the next section of this document. NGINX Instance Settings The NGINX integration collects both Metrics and Inventory information. Check the Applies To column below to find which settings can be used for each specific collection: Setting Description Default Applies To STATUS_URL The URL set up to provide the metrics using the status module. http://127.0.0.1/status Metrics/Inventory STATUS_MODULE Name of NGINX status module. Valid options are: discover ngx_http_stub_status_module ngx_http_status_module ngx_http_api_module\" discover Metrics CONNECTION_TIMEOUT Connection timeout to the NGINX instance in seconds. 5 Metrics VALIDATE_CERTS Set to false if the status URL is HTTPS with a self-signed certificate. true Metrics CONFIG_PATH The path to the NGINX configuration file. N/A Inventory REMOTE_MONITORING Enable multi-tenancy monitoring. true Metrics/Inventory METRICS Set to true to enable Metrics only collection. false INVENTORY Set to true to enable Inventory only collection. false The values for these settings can be defined in several ways: Adding the value directly in the config file. This is the most common way. Replacing the values from environment variables using the {{}} notation. This requires infrastructure agent v1.14.0+. Read more here or see example below. Using Secrets management. Use this to protect sensible information such as passwords to be exposed in plain text on the configuration file. For more information, see Secrets management. Labels/Custom Attributes You can further decorate your metrics using labels. Labels allow you to add key/value pairs attributes to your metrics which you can then use to query, filter or group your metrics on. Our default sample config file includes examples of labels but, as they are not mandatory, you can remove, modify or add new ones of your choice. labels: env: production role: load_balancer Copy Example configurations BASIC CONFIGURATION This is the very basic configuration to collect Metrics and Inventory from your localhost: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy HTTP BASIC AUTHENTICATION This configuration collects Metrics and Inventory from your localhost protected with basic authentication. Replace the username and password on the STATUS_URL with your credentials: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://username:password@127.0.0.1/status STATUS_MODULE: discover REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: http://username:password@127.0.0.1/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx Copy METRICS ONLY WITH SELF-SIGNED CERTIFICATE In this configuration we only have 1 integration block with METRICS: true to collect only metrics and added VALIDATE_CERTS: false to prevent validation of the server's SSL certificate when using a self-signed one: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://my_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy ENVIRONMENT VARIABLES REPLACEMENT In this configuration we are using the environment variable NGINX_STATUS to populate the STATUS_URL setting of the integration: integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: {{NGINX_STATUS}} STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy MULTI-INSTANCE MONITORING In this configuration we are monitoring multiple NGINX servers from the same integration. For the first instance (STATUS_URL: https://1st_nginx_host/status) we are collecting metrics and inventory while for the second instance (STATUS_URL: https://2nd_nginx_host/status) we will only collect metrics. integrations: - name: nri-nginx env: METRICS: \"true\" STATUS_URL: https://1st_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer - name: nri-nginx env: INVENTORY: \"true\" STATUS_URL: https://1st_nginx_host/status CONFIG_PATH: /etc/nginx/nginx.conf REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/nginx - name: nri-nginx env: METRICS: \"true\" STATUS_URL: http://2nd_nginx_host/status STATUS_MODULE: discover VALIDATE_CERTS: false REMOTE_MONITORING: true interval: 30s labels: env: production role: load_balancer Copy Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metrics The NGINX integration collects the following metric data attributes. To find these attributes, query the NginxSample event type. NGINX Open Source Metric Description net.connectionsActive Number of connections that are currently active net.connectionsAcceptedPerSecond Number of accepted client connections per second net.connectionsDroppedPerSecond Number of connections per second that were accepted but could not he handled and hence dropped net.connectionsReading Current number of connections where NGINX is reading the request header net.connectionsWaiting Current number of idle client connections waiting for a request net.connectionsWriting Current number of connections where NGINX is writing the response back to the client net.requestsPerSecond Total number of client requests per second NGINX Plus Our integration retrieves all available metric data from the following HTTP API endpoints: /nginx, /processes, /connections, /http/requests, and /ssl. Metric Description net.connectionsAcceptedPerSecond Accepted client connections as requests per second net.connectionsDroppedPerSecond Dropped client connections as requests per second net.connectionsActive Current number of active client connections net.connectionsIdle Current number of idle client connections net.requests Current number of requests net.requestsPerSecond Current number of requests per second processes.respawned Current number of abnormally terminated and respawned child processes ssl.handshakes Current number for successful SSL handshakes ssl.failedHandshakes Current number of failed SSL handshakes ssl.sessionReuses Current number of session reuses during SSL handshake Inventory data The integration captures configuration options defined in the NGINX master config file (usually nginx.conf). Tip The master NGINX config file can contain \"include OTHER_FILE_NAME\" commands for splitting the configuration into multiple files. The Infrastructure agent ignores (does not parse) configuration set via include commands. System metadata The integration collects these additional attributes about the NGINX service: Name Description software.edition The NGINX edition: either \"open source\" or \"plus\". software.version The version of NGINX. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.91672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NGINX monitoring <em>integration</em>",
        "sections": "Find <em>and</em> <em>use</em> <em>data</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " and <em>use</em> <em>data</em> <em>Data</em> from this service is reported to an integration dashboard. Metrics are attached to the NginxSample event type. You can query this <em>data</em> for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and <em>use</em> your <em>data</em>, see <em>Understand</em> integration <em>data</em>"
      },
      "id": "6043a323196a67ee9a960f24"
    },
    {
      "sections": [
        "Find and use your Kubernetes data",
        "Query Kubernetes data",
        "Event types",
        "Manage alerts",
        "Create an alert condition",
        "Use the predefined alert types and thresholds",
        "Select alert notifications",
        "Pod alert notification example",
        "Container resource notification example",
        "Create alert conditions using NRQL",
        "Kubernetes attributes and metrics",
        "Node data",
        "Namespace data",
        "Deployment data",
        "ReplicaSet data",
        "DaemonSet data",
        "StatefulSet data",
        "Pod data",
        "Cluster data",
        "Container data",
        "Volume data",
        "API server data",
        "Controller manager data",
        "Scheduler data",
        "ETCD data",
        "Endpoint data",
        "Service data",
        "Horizontal Pod Autoscaler data",
        "Kubernetes metadata in APM-monitored applications",
        "For more help"
      ],
      "title": "Find and use your Kubernetes data",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Understand and use data"
      ],
      "external_id": "d36002ee54b0e3573ec4efef9f9c5ee940f49f96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/understand-use-data/find-use-your-kubernetes-data/",
      "published_at": "2021-09-26T22:16:39Z",
      "updated_at": "2021-08-08T13:47:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own charts and query all your Kubernetes integration data using the query builder and the NerdGraph API. Our integration collects Kubernetes data by instrumenting the container orchestration layer. For a simpler and more visual experience, use the cluster explorer. one.newrelic.com > Dashboards: Using the query builder you can query your Kubernetes data and create clear visualizations. Query Kubernetes data The simplest way to query your Kubernetes data is using the query builder, which accepts NRQL queries. Alternatively, you can use the NerdGraph API to retrieve Kubernetes data. Event types Kubernetes data is attached to the following event types: Event name Type of Kubernetes data Available since K8sNodeSample Node data v1.0.0 K8sNamespaceSample Namespace data v1.0.0 K8sDeploymentSample Deployment data v1.0.0 K8sReplicasetSample ReplicaSet data v1.0.0 K8sDaemonsetSample DaemonSet data v1.13.0 K8sStatefulsetSample StatefulSet data v1.13.0 K8sPodSample Pod data v1.0.0 K8sClusterSample Cluster data v1.0.0 K8sContainerSample Container data v1.0.0 K8sVolumeSample Volume data v1.0.0 K8sApiServerSample API server data v1.11.0 K8sControllerManagerSample Controller manager data v1.11.0 K8sSchedulerSample Scheduler data v1.11.0 K8sEtcdSample ETCD data v1.11.0 K8sEndpointSample Endpoint data v1.13.0 K8sServiceSample Service data v1.13.0 K8sHpaSample Horizontal Pod Autoscaler data v2.3.0 Manage alerts You can be notified about alert violations for your Kubernetes data: Create an alert condition To create an alert condition for the Kubernetes integration: Go to one.newrelic.com > Infrastructure > Settings > Alerts > Kubernetes, then select Create alert condition. To filter the alert to Kubernetes entities that only have the chosen attributes, select Filter. Select the threshold settings. For more on the Trigger an alert when... options, see Alert types. Select an existing alert policy, or create a new one. Select Create. When an alert condition's threshold is triggered, New Relic sends a notification to the policy's notification channels. Use the predefined alert types and thresholds The Kubernetes integration comes with its own alert policy and alert conditions. To see what the predefined alert conditions are, see Kubernetes integration: Predefined alert policy. In addition, you can create an alert condition for any metric collected by any New Relic integration you use, including the Kubernetes integration: Select the alert type Integrations. From the Select a data source dropdown, select a Kubernetes (K8s) data source. Select alert notifications When an alert condition's threshold is triggered, New Relic sends a message to the notification channel(s) chosen in the alert policy. Depending on the type of notification, you may have the following options: View the incident. Acknowledge the incident. Go to a chart of the incident data by selecting the identifier name. The entity identifier that triggered the alert appears near the top of the notification message. The format of the identifier depends on the alert type: Available pods are less than desired pods alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:replicaset:REPLICASET_NAME Copy CPU or memory usage alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:POD_NAME:container:CONTAINER_NAME Copy Here are some examples. Pod alert notification example For Available pods are less than desired pods alerts, the ID of the ReplicaSet triggering the issue might look like this: k8s:beam-production:default:replicaset:nginx-deployment-1623441481 Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: default ReplicaSet name: nginx-deployment-1623441481 Container resource notification example For container CPU or memory usage alerts, the entity might look like this: k8s:beam-production:kube-system:kube-state-metrics-797bb87c75-zncwn:container:kube-state-metrics Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: kube-system Pod namespace: kube-state-metrics-797bb87c75-zncwn Container name: kube-state-metrics Create alert conditions using NRQL Follow standard procedures to create alert conditions for NRQL queries. Kubernetes attributes and metrics The Kubernetes integration collects the following metrics and other attributes. Node data Query the K8sNodeSample event for node data: Node attribute Description allocatableCpuCores Node allocatable CPU cores allocatableMemoryBytes Node allocatable memory bytes allocatablePods Node allocatable pods allocatableEphemeralStorageBytes Node allocatable ephemeral-storage bytes capacityCpuCores Node CPU capacity capacityMemoryBytes Node memory capacity (in bytes) capacityPods Pod capacity of the node capacityEphemeralStorageBytes Node ephemeral-storage capacity clusterName Name that you assigned to the cluster when you installed the Kubernetes integration condition.{conditionName}={conditionValue} Status of the current observed node condition. The reported conditions can vary depending on your Kubernetes flavor and installed operators. Examples of common conditions are: Ready, DiskPressure, MemoryPressure, PIDPressure and NetworkUnavailable. Condition values can be 1 (true), 0 (false), or -1 (unknown). cpuUsedCoreMilliseconds Node CPU usage measured in core milliseconds cpuUsedCores Node CPU usage measured in cores cpuRequestedCores Total amount of CPU cores requested allocatableCpuCoresUtilization Percentage of CPU cores actually used with respect to the CPU cores allocatable fsAvailableBytes Bytes available in the node filesystem fsCapacityBytes Total capacity of the node filesystem in bytes fsInodes Total number of inodes in the node filesystem fsInodesFree Free inodes in the node filesystem fsInodesUsed Used inodes in the node filesystem fsUsedBytes Used bytes in the node filesystem fsCapacityUtilization Percentage of used bytes in the node filesystem with respect to the capacity memoryAvailableBytes Bytes of memory available in the node memoryMajorPageFaultsPerSecond Number of major page faults per second in the node memoryPageFaults Number of page faults in the node memoryRssBytes Bytes of rss memory memoryUsedBytes Bytes of memory used memoryWorkingSetBytes Bytes of memory in the working set memoryRequestedBytes Total amount of requested memory allocatableMemoryUtilization Percentage of bytes of memory in the working set with respect to the node allocatable memory net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network nodeName Host name that the pod is running on runtimeAvailableBytes Bytes available to the container runtime filesystem runtimeCapacityBytes Total capacity assigned to the container runtime filesystem in bytes runtimeInodes Total number of inodes in the container runtime filesystem runtimeInodesFree Free inodes in the container runtime filesystem runtimeInodesUsed Used inodes in the container runtime filesystem runtimeUsedBytes Used bytes in the container runtime filesystem unschedulable Status of node schedulability of new pods. Its value can be 0 (false) or 1 (true) label.LABEL_NAME Labels associated with your node, so you can filter and query for specific nodes Namespace data Query the K8sNamespaceSample event for namespace data: Namespace attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of the namespace when it was created namespace Name of the namespace to be used as an identifier label.LABEL_NAME Labels associated with your namespace, so you can filter and query for specific namespaces status Current status of the namespace. The value can be Active or Terminated Deployment data Query the K8sDeploymentSample event for deployment data: Deployment attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the deployment was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the deployment belongs to label.LABEL_NAME Labels associated with your deployment, so you can filter and query for specific deployments podsAvailable Number of replicas that are currently available podsDesired Number of replicas that you defined in the deployment podsTotal Total number of replicas that are currently running podsUnavailable Number of replicas that are currently unavailable podsUpdated Number of replicas that have been updated to achieve the desired state of the deployment podsMissing Total number of replicas that are missing (number of desired replicas, podsDesired, minus the total number of replicas, podsTotal) ReplicaSet data Query the K8sReplicasetSample event for ReplicaSet data: Replica attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the ReplicaSet was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the ReplicaSet belongs to observedGeneration Integer representing generation observed by the ReplicaSet podsDesired Number of replicas that you defined in the deployment podsFullyLabeled Number of pods that have labels that match the ReplicaSet pod template labels podsReady Number of replicas that are ready for this ReplicaSet podsTotal Total number of replicas that are currently running podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) replicasetName Name of the ReplicaSet to be used as an identifier DaemonSet data Query the K8sDaemonsetSample event for DaemonSet data: DaemonSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the DaemonSet was created namespaceName Name of the namespace that the DaemonSet belongs to label.LABEL_NAME Labels associated with your DaemonSet, so you can filter and query for specific DaemonSet daemonsetName Name associated with the DaemonSet podsDesired The number of nodes that should be running the daemon pod podsScheduled The number of nodes running at least one daemon pod and are supposed to podsAvailable The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available podsReady The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready podsUnavailable The number of nodes that should be running the daemon pod and have none of the daemon pod running and available podsMisscheduled The number of nodes running a daemon pod but are not supposed to podsUpdatedScheduled The total number of nodes that are running updated daemon pod podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) metadataGeneration Sequence number representing a specific generation of the desired state StatefulSet data Query the K8sStatefulsetSample event for StatefulSet data: StatefulSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the StatefulSet was created namespaceName Name of the namespace that the StatefulSet belongs to label.LABEL_NAME Labels associated with your StatefulSet, so you can filter and query for specific StatefulSet statefulsetName Name associated with the StatefulSet podsDesired Number of desired pods for a StatefulSet podsReady The number of ready replicas per StatefulSet podsCurrent The number of current replicas per StatefulSet podsTotal The number of replicas per StatefulSet podsUpdated The number of updated replicas per StatefulSet podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) observedGeneration The generation observed by the StatefulSet controller metadataGeneration Sequence number representing a specific generation of the desired state for the StatefulSet currentRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between 0 and podsCurrent updateRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between podsDesired-podsUpdated and podsDesired Pod data Query the K8sPodSample event for pod data: Pod attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the pod was created in epoch seconds createdBy Name of the Kubernetes object that created the pod. For example, newrelic-infra createdKind Kind of Kubernetes object that created the pod. For example, DaemonSet. deploymentName Name of the deployment to be used as an identifier isReady Boolean representing whether or not the pod is ready to serve requests isScheduled Boolean representing whether or not the pod has been scheduled to run on a node label.LABEL_NAME Labels associated with your pod, so you can filter and query for specific pods message Details related to the last pod status change namespace Name of the namespace that the pod belongs to net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network net.errorsPerSecond Number of errors per second net.rxBytesPerSecond Number of bytes per second received over the network net.txBytesPerSecond Number of bytes per second transmitted over the network nodeIP Host IP address that the pod is running on nodeName Host name that the pod is running on podIP IP address of the pod. If it doesn't have an IP, it'll be empty podName Name of the pod to be used as an identifier reason Reason why the pod is in the current status startTime Timestamp of when the pod started running in epoch seconds status Current status of the pod. Value can be Pending, Running, Succeeded, Failed, Unknown Cluster data Query the K8sClusterSample event to see cluster data: Cluster attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration clusterK8sVersion Kubernetes version that the cluster is running Container data Query the K8sContainerSample event for container data: Container attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration containerID Unique ID associated with the container. If you are running Docker, this is the Docker container id containerImage Name of the image that the container is running containerImageID Unique ID associated with the image that the container is running containerName Name associated with the container cpuLimitCores Integer representing limit CPU cores defined for the container in the pod specification cpuRequestedCores Requested CPU cores defined for the container in the pod specification cpuUsedCores CPU cores actually used by the container cpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU limit specified. This percentage is based on this calculation: (cpuUsedCores / cpuLimitCores) * 100 requestedCpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU request specified deploymentName Name of the deployment to be used as an identifier isReady Boolean. Whether or not the container's readiness check succeeded label.LABEL_NAME Labels associated with your container, so you can filter and query for specific containers memoryLimitBytes Integer representing limit bytes of memory defined for the container in the pod specification memoryRequestedBytes Integer. Requested bytes of memory defined for the container in the pod specification memoryUsedBytes Integer. Bytes of memory actually used by the container memoryUtilization Percentage of memory actually used by the container with respect to the memory limit specified requestedMemoryUtilization Percentage of memory actually used by the container with respect to the memory request specified memoryWorkingSetBytes Integer. Bytes of memory in the working set memoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory limit specified requestedMemoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory request specified namespace Name of the namespace that the container belongs to nodeIP Host IP address the container is running on nodeName Host name that the container is running on podName Name of the pod that the container is in, to be used as an identifier reason Provides a reason why the container is in the current status restartCount Number of times the container has been restarted status Current status of the container. Value can be Running, Terminated, or Unknown containerCpuCfsPeriodsDelta Delta change of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsDelta Delta change of throttled period intervals containerCpuCfsThrottledSecondsDelta Delta change of duration the container has been throttled, in seconds containerCpuCfsPeriodsTotal Total number of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsTotal Total number of throttled period intervals containerCpuCfsThrottledSecondsTotal Total time duration the container has been throttled, in seconds containerMemoryMappedFileBytes Total size of memory mapped files used by this container, in bytes Volume data Query the K8sVolumeSample event for volume data: Volume attribute Description volumeName Name that you assigned to the volume at creation clusterName Cluster where the volume is configured namespace Namespace where the volume is configured podName The pod that the volume is attached to. The Kubernetes monitoring integration lists Volumes that are attached to a pod persistent If this is a persistent volume, this value is set to true pvcNamespace Namespace where the Persistent Volume Claim is configured pvcName Name that you assigned to the Persistent Volume Claim at creation fsCapacityBytes Capacity of the volume, in bytes fsUsedBytes Usage of the volume, in bytes fsAvailableBytes Capacity available of the volume, in bytes fsUsedPercent Usage of the volume in percentage fsInodes Total inodes of the volume fsInodesUsed inodes used in the volume fsInodesFree inodes available in the volume Volume data is available for volume plugins that implement the MetricsProvider interface: AWSElasticBlockStore AzureDisk AzureFile Cinder Flexvolume Flocker GCEPersistentDisk GlusterFS iSCSI StorageOS VsphereVolume API server data Query the K8sApiServerSample event to see API Server data. For more information, see Configure control plane monitoring: API server attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent, in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist apiserverRequestDelta_verb_VERB_code_CODE Difference of the number of apiserver requests, broken out for each verb and HTTP response code apiserverRequestRate_verb_VERB_code_CODE Rate of apiserver requests, broken out for each verb and HTTP response code restClientRequestsDelta_code_CODE_method_METHOD Difference of the number of HTTP requests, partitioned by method and code restClientRequestsRate_code_CODE_method_METHOD Rate of the number of HTTP requests, partitioned by method and code etcdObjectCounts_resource_RESOURCE-KIND Number of stored objects at the time of last check, split by kind Controller manager data Query the K8sControllerManagerSample event to see Controller manager data. For more information, see Configure control plane monitoring: Controller manager attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist workqueueAddsDelta_name_WORK-QUEUE-NAME Difference of the total number of adds handled by workqueue workqueueDepth_name_WORK-QUEUE-NAME Current depth of workqueue workqueueRetriesDelta_name_WORK-QUEUE-NAME Difference of the total number of retries handled by workqueue leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master Scheduler data Query the K8sSchedulerSample event in New Relic Insights to see Scheduler data. For more information, see Configure control plane monitoring: Scheduler attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master httpRequestDurationMicroseconds_handler_HANDLER_quantile_QUANTILE The HTTP request latencies in microseconds, per quantile httpRequestDurationMicroseconds_handler_HANDLER_sum The sum of the HTTP request latencies, in microseconds httpRequestDurationMicroseconds_handler_HANDLER_count The number of observed HTTP requests events restClientRequestsDelta_code_CODE_host_HOST_method_METHOD Difference of the number of HTTP requests, partitioned by status code, method, and host restClientRequestsRate_code_CODE_host_HOST_method_METHOD Rate of the number of HTTP requests, partitioned by status code, method, and host schedulerScheduleAttemptsDelta_result_RESULT Difference of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerScheduleAttemptsRate_result_RESULT Rate of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerSchedulingDurationSeconds_operation_OPERATION_quantile_QUANTILE Scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_sum The sum of scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_count The number of observed events of schedulings split by sub-parts of the scheduling operation. schedulerPreemptionAttemptsDelta Difference of the total preemption attempts in the cluster till now schedulerPodPreemptionVictims Number of selected preemption victims ETCD data Query the K8sEtcdSample event to see ETCD data. For more information, see Configure control plane monitoring: ETCD attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist etcdServerHasLeader Whether or not a leader exists. 1 is existence, 0 is not etcdServerLeaderChangesSeenDelta Difference of the number of leader changes seen etcdMvccDbTotalSizeInBytes Total size of the underlying database physically allocated, in bytes etcdServerProposalsCommittedDelta Difference of the total number of consensus proposals committed etcdServerProposalsCommittedRate Rate of the total number of consensus proposals committed etcdServerProposalsAppliedDelta Difference of the total number of consensus proposals applied etcdServerProposalsAppliedRate Rate of the total number of consensus proposals applied etcdServerProposalsPending The current number of pending proposals to commit etcdServerProposalsFailedDelta Difference of the total number of failed proposals seen etcdServerProposalsFailedRate Rate of the total number of failed proposals seen processOpenFds Number of open file descriptors processMaxFds Maximum number of open file descriptors processFdsUtilization Percentage open file descriptors with respect to the maximum number that can be opened etcdNetworkClientGrpcReceivedBytesRate Rate of the total number of bytes received from gRPC clients etcdNetworkClientGrpcSentBytesRate Rate of the total number of bytes sent to gRPC clients Endpoint data Query the K8sEndpointSample event in New Relic Insights for endpoint data: Endpoint attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the endpoint was created namespaceName Name of the namespace that the endpoint belongs to endpointName Name associated with the endpoint label.LABEL_NAME Labels associated with your endpoint, so you can filter and query for specific endpoints addressAvailable Number of addresses available in endpoint addressNotReady Number of addresses not ready in endpoint Service data Query the K8sServiceSample event for service data: Service attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the service was created namespaceName Name of the namespace that the service belongs to label.LABEL_NAME Labels associated with your service, so you can filter and query for specific service serviceName Name associated with the service loadBalancerIP The IP of the external load balancer, if Spectype is LoadBalancer. externalName The external name value, if Spectype is ExternalName clusterIP The internal cluster IP, if Spectype is ClusterIP specType Type of the service selector.LABEL_NAME The label selector that this service targets Horizontal Pod Autoscaler data Query the K8sHpaSample event in New Relic Insights for Horizontal Pod Autoscaler data: HPA attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration label.LABEL_NAME Labels associated with your HPA, so you can filter and query for specific autoscaler currentReplicas Current number of replicas of pods managed by this autoscaler desiredReplicas Desired number of replicas of pods managed by this autoscaler minReplicas Lower limit for the number of pods that can be set by the autoscaler, 1 by default maxReplicas Upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than minReplicas targetMetric The metric specifications used by this autoscaler when calculating the desired replica count isAble Boolean representing whether or not the autoscaler is able to fetch and update scales, as well as whether or not any backoff-related conditions would prevent scaling isActive Boolean representing whether or not the autoscaler is enabled (if it's able to calculate the desired scales) isLimited Boolean representing whether or not the autoscaler is capped, either up or down, by the maximum or minimum replicas configured labels Number of Kubernetes labels converted to Prometheus labels metadataGeneration The generation observed by the HorizontalPodAutoscaler controller Kubernetes metadata in APM-monitored applications By linking your applications with Kubernetes, the following attributes are added to application trace and distributed trace: nodeName containerName podName clusterName deploymentName namespaceName For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.97949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find <em>and</em> <em>use</em> your Kubernetes <em>data</em>",
        "sections": "Find <em>and</em> <em>use</em> your Kubernetes <em>data</em>",
        "tags": "<em>Understand</em> <em>and</em> <em>use</em> <em>data</em>",
        "body": " Relic integration you <em>use</em>, including the Kubernetes integration: Select the alert type <em>Integrations</em>. From the Select a <em>data</em> source dropdown, select a Kubernetes (K8s) <em>data</em> source. Select alert notifications When an alert condition&#x27;s threshold is triggered, New Relic sends a message to the notification"
      },
      "id": "603eb9a4196a678bfca83dbb"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/cloud-integrations-account-status-dashboard": [
    {
      "sections": [
        "Configure polling frequency and data collection for cloud integrations",
        "Overview of settings",
        "Caution",
        "Change polling frequency",
        "Specify data to be fetched",
        "Data collection",
        "Filters",
        "Potential impact on alerts and charts"
      ],
      "title": "Configure polling frequency and data collection for cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "b900b7545f9032201c212449be114e10176bf789",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations/",
      "published_at": "2021-09-26T22:07:52Z",
      "updated_at": "2021-07-27T15:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our cloud integrations get data from cloud provider APIs. In New Relic, you can change some of the data collection-related settings for your cloud integrations. Read on to see what changes you can make and the reasons for making them. Overview of settings New Relic cloud integrations get data from cloud providers' APIs. Data is generally collected from monitoring APIs such as AWS CloudWatch, Azure Monitor, and GCP Stackdriver, and inventory metadata is collected from the specific services' APIs. You can use the account status dashboard to see how your cloud integrations are handling data from a cloud service provider. If you want to report more or less data from your cloud integrations, or if you need to control the use of the cloud providers' APIs to prevent reaching rate and throttling limits in your cloud account, you can change the configuration settings to modify the amount of data they report. The two main controls are: Change polling frequency Change what data is reported Examples of business reasons for wanting to change your polling frequency include: Billing: If you need to manage your AWS CloudWatch bill, you may want to decrease the polling frequency. Before you do this, make sure that any alert conditions set for your cloud integrations are not affected by this reduction. New services: If you are deploying a new service or configuration and you want to collect data more often, you may want to increase the polling frequency temporarily. Caution Changing the configuration settings for your integrations may impact alert conditions and chart trends. Change polling frequency The polling frequency configuration determines how often New Relic reports data from your cloud provider for each service. By default, the polling frequency is set to the maximum frequency that is available for each service. To change the polling frequency for a cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Use the dropdowns next to Data polling interval every to select how frequently you want New Relic to capture your cloud integration data. Specify data to be fetched You can specify which information you want captured for your cloud integration by enabling the collection of additional data and by applying multiple filters to each integration. To change this settings for your cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Under Data collections and filters, turn the toggles you want On. For filters, select or enter the values that you want included in your reported data. Data collection For some cloud integrations, an additional number of calls to the cloud provider APIs are needed in order to collect data. For example, to fetch tags for AWS Elastic Map Reduce clusters, an additional call to the service API is required. To better control the amount of API calls that are sent to your cloud account for these integrations, you can specify when you need these types of data to be collected. Different data collection toggles are available, depending on the integration. Toggle Description Collect tags Some integrations require additional API calls to the cloud provider to report tags. Tag collection is enabled by default. Switch this to Off if you don't want the integration to collect your cloud resource tags and thus reduce the volume of API calls. Collect extended inventory Some integrations can collect extended inventory metadata about your cloud resources by making additional API calls to the cloud provider. The metadata included within the extended inventory for each cloud integration is described in the integration documentation. Extended inventory collection is disabled by default. Switch this to On if you want to monitor extended inventory. This will increase the volume of API calls. Collect shards data Available for AWS Kinesis Streams integration. By default, we don't report shard metrics. Switch this to On if you want to monitor shard metrics in addition to data stream metrics. Collect Lambda@Edge data Available for AWS CloudFront integration. By default, we don't report Lambda@Edge data. Switch this to On if you're using Lambda@Edge in AWS CloudFront and want to get Lambda execution location metadata. Collect node data Available for AWS Elasticsearch integration. By default, we don't report Elasticsearch node metrics. Switch this to On if you want to monitor node metrics in addition to cluster metrics. Collect NAT Gateway data and Collect VPN data Available for AWS VPC integration. By default, we don't report NAT Gateway nor VPN metrics. Switch these to On if you want to monitor NAT Gateway and VPN metrics and inventory, in addition to other VPC related entities inventory. Collect IP addresses Available for AWS EC2 integration. By default, we collect EC2 instance metadata that includes public and private IP addresses, and network interface details. Switch this to Off if you don't want New Relic to store and display these IP data. Filters When a filter is On, you specify the data that you want to be collected; for example, if the Limit to AWS region is On, the regions that you select will be the ones that data will be collected for. There are different filters available, depending on the integration: Filter Description Region Select the regions that include the resources that you want to monitor. Queue prefixes Available for AWS SQS integration. Enter each name or prefix for the queues that you want to monitor. Filter values are case-sensitive. Load balancer prefixes Available for AWS ALB integration. Enter each name or prefix for the application load balancers that you want to monitor. Filter values are case-sensitive. Stage name prefixes Available for AWS API Gateway integration. Enter each name or prefix for the stages that you want to monitor. Filter values are case-sensitive. Tag key Enter one tag key that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag value filter. Tag value Enter one tag value that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag key. Resource group Select the resource groups that are associated with the resources that you want to monitor. Potential impact on alerts and charts If you change an integration's configuration, it can impact alert conditions and charts. Here are some things to consider: If you change this setting... It may have this impact... Any configuration setting When you change the configuration settings, the data that New Relic displays in infrastructure charts, on the inventory page, and in the events feed changes as well. Any filters When you create alert conditions after you set filters, make sure that your alerts are not triggered by resources that you filtered out. Filter for regions If you filter for specific regions, it may lower the amount of data reported to New Relic, which could trigger an alert. If you create an alert condition for a specific region and then filter that region out, the region would no longer report data and would never trigger the alert. Polling frequency When you create an alert, make sure that you define the threshold for a time period that is longer than the polling frequency. Tags and extended inventory If you turn on tags and/or extended inventory, New Relic makes more API calls to the cloud provider, which could increase your cloud provider API usage bill.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.43712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "sections": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Our <em>cloud</em> <em>integrations</em> get data from <em>cloud</em> provider APIs. In New Relic, you can change some of the data collection-related settings for your <em>cloud</em> <em>integrations</em>. Read on to see what changes you can make and the reasons for making them. Overview of settings New Relic <em>cloud</em> <em>integrations</em> get data from"
      },
      "id": "603e8eef64441fcc7e4e8853"
    },
    {
      "sections": [
        "On-host integration configuration overview",
        "Overview of how configuration works",
        "Configuration file location",
        "Configuration formats"
      ],
      "title": "On-host integration configuration overview",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "b580c10bb0a6142dcb204639762561b65bd6ceb9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integration-configuration-overview/",
      "published_at": "2021-09-27T16:00:43Z",
      "updated_at": "2021-09-27T16:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's on-host integrations send data to the infrastructure agent, which in turn sends that data to New Relic. How integrations interact with the agent is controlled by each integration's config. Understanding more about configuration can help you troubleshoot issues with your on-host integration. Overview of how configuration works New Relic's on-host integrations are external programs executed by the infrastructure agent. Each integration monitors a specific service. An integration has, at minimum, these files: An executable that exports various types of data in a JSON format expected by the agent One or more YAML-format config files (for example, the Apache integration configuration). (We recommend linting YAML config files before use to avoid formatting issues.) Note that in addition to the specific on-host integration's configuration, you can also edit the infrastructure agent's configuration. Configuration file location With standard on-host integration installations, the configuration is located in the infrastructure agent's directory. The agent determines this config location by a setting in its own configuration file. For some implementations, the integration's configuration will be located elsewhere. For example: Services running on Kubernetes: The configuration is located in the Kubernetes integration config file. Services running on Amazon ECS: The configuration is placed in the AWS console. Configuration formats On-host integrations use two configuration formats: Standard: Starting December 2019, infrastructure agent version 1.8.0 began supporting a new format used by some integrations. This format uses a single configuration file and provides other improvements. For more details, see Standard configuration. Legacy: This is the format used by most on-host integrations. This configuration uses two files: a definition file and a configuration file. For more details, see Legacy configuration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.629616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> configuration overview",
        "sections": "On-host <em>integration</em> configuration overview",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": "New Relic&#x27;s on-host <em>integrations</em> send data to the <em>infrastructure</em> agent, which in turn sends that data to New Relic. How <em>integrations</em> interact with the agent is controlled by each integration&#x27;s config. Understanding more about configuration can help you troubleshoot issues with your on-host"
      },
      "id": "6044091d28ccbc95852c60cb"
    },
    {
      "sections": [
        "On-host integrations: Standard configuration format",
        "Configuration structure",
        "Tip",
        "Important",
        "List of configuration properties",
        "Select an integration to run",
        "name",
        "exec",
        "cli_args",
        "when",
        "Pass configuration to the integration executable",
        "env",
        "config",
        "config_template_path",
        "Configure how the agent executes your integrations",
        "integration_user",
        "interval",
        "inventory_source",
        "labels",
        "timeout",
        "working_dir",
        "Update older integration configuration"
      ],
      "title": "On-host integrations: Standard configuration format ",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "3b4c5ab77b2b8025ca8de375403f24bc75b3dca7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integrations-standard-configuration-format/",
      "published_at": "2021-09-27T16:02:13Z",
      "updated_at": "2021-09-27T16:02:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In December 2019, Infrastructure agent version 1.8.0 began supporting this new configuration format that makes use of a single configuration file (instead of two separate files), and provides other improvements. This document will explain how this newer format works. The older legacy configuration format is also supported by current Infrastructure agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration's configuration YAML must have an integrations top-level section containing a YAML array, where each entry represents an integration and its configuration. For each integration entry, only the name property is mandatory. The other properties are optional. Here's an example configuration featuring two integrations: our built-in Docker integration, which requires no configuration, and our MySQL integration: integrations: # New Relic integration that does not require any configuration - name: nri-docker # New Relic integration that gets its configuration from the environment - name: nri-mysql env: PORT: 3306 USERNAME: newrelic PASSWORD: 123456789 # to hide this field, read the secrets management documentation # Any free-form integration executed via a user-provided command - name: my-own-integration exec: python /opt/integrations/my-script.py --host=127.0.0.1 Copy You can have as many configuration YAML files as you want and can group your integration instances. Tip We recommend linting the YAML configuration files before using them to avoid formatting issues. Each configuration YAML file can also contain discovery and variables top-level sections. Important This configuration format does not require an agent restart. When saved, changes are detected and implemented immediately. This means that saving intermediate configuration changes may cause the integration to stop working. List of configuration properties This is a list of the general properties used to configure an integration. For more details about using these properties, including example values, see the documentation following the table. Config Description name Name of the integration. This is the only mandatory configuration property across all on-host integrations. If the exec field is not set it will also be the name of the integration executable. cli_args Optional list of command line arguments when name is used to provide the integration executable. Available since agent version 1.13.0. exec Full path to the integration executable, plus arguments. It may be a single-line string or a string array. If left unspecified, the exec field defaults to the name field. env YAML map containing the environment variables to be passed to the integration, where key is the environment variable name, and value is the variable value. config Configuration that is written as an external file and the path that is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. config_template_path Any external file whose path is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. Its usage allows applying discovery and secrets binding to any external configuration. integration_user Name of the user who runs the integration. interval Time between consecutive executions of the integration. It must be a number followed by a time unit (s, m or h), without spaces. inventory_source Allows overriding the category and term of the inventory source. labels Map with labels that decorate the data (metrics, events, inventory) reported by the integration. timeout A number followed by a time unit (ms, s, m or h). An integration that hasn't responded in this time period is killed and restarted. working_dir Working directory for the integration binary. when Integration is only executed if the clause evaluates to true. Conditions are defined below. The remainder of this document describes config properties grouped by their functionality: Select an integration to run Pass configuration to the integration command Configure how the agent executes integrations Select an integration to run There are two properties to select which integration will run: name and exec. The only mandatory property across all on-host integrations is name. The remaining properties specified in this document are optional. Example: integrations: - name: nri-docker - name: my-integration exec: /usr/local/bin/my-integration --metrics --inventory Copy name The mandatory name property can work in two ways: If the exec property is set: The name property only provides an identifier for the integration instance. This identifier is used in log messages and to provide a default inventory category/source in the form integration/<name> (for example, integration/nri-redis). This inventory path can be overridden with the inventory_source configuration option. If the exec property is not set: The agent looks for (and executes) an executable with the name value in any of the following folders: Linux: /var/db/newrelic-infra/newrelic-integrations/bin /var/db/newrelic-infra/newrelic-integrations /var/db/newrelic-infra/custom-integrations/bin /var/db/newrelic-infra/custom-integrations Windows C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations\\bin C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations If there is no executable with this name in the above folders the agent logs an error and the integration is not executed. Important In Windows, do not append the .exe extension to the name. The agent does this for you (for example, name: nri-mysql would look for nri-mysql.exe in the above folders). exec The exec optional property specifies the path, command, and command-line arguments of the integration to execute. When none of the path folders or arguments have spaces, it can be written in a single-line string: - name: my-integration exec: /usr/bin/python /opt/integrations/my-script.py --host=127.0.0.1 Copy If any of the path/arguments have spaces that are part of a single element, you can use a YAML array notation: - name: my-integration exec: - C:\\Program Files\\My Integration\\integration.exe - --host - 127.0.0.1 - --port - 8080 Copy The default working directory is the root directory of the agent configuration. It can be overridden with the working_dir property. cli_args The cli_args optional property specifies command line arguments that should be passed to the integration. It is useful when using name as it only provides the integration name identifier (not compatible with exec). - name: my-integration cli_args: [ -interval 10s ] Copy Usual YAML multi-line list format can be used as well: - name: my-integration cli_args: - -interval - 10s Copy when The when property allows to execute the integration only when all the evaluated conditions are successful. Available conditions are: env_exists: Environment variables exist and match value. file_exists: Given file path exists. feature: Provided feature-flag is enabled. Example: integrations: - name: ssh-integration when: file_exists: /var/run/sshd.pid Copy Pass configuration to the integration executable Often integration executables need to receive a configuration to work properly (for example, hostname and port of the monitored system, user credentials, etc.). The Infrastructure agent allows you to configure the integration commands in three ways (which you can combine): Environment variables, using the env property. (recommended) Command-line arguments, passed in the exec property. Configuration files, whose path needs to be passed through environment variables or command-line arguments (see the config) property. Example: integrations: - name: my-integration exec: /opt/path/bin/script --host 127.0.0.1 --port 8081 - name: nri-mysql env: STATUS_URL: http://10.0.0.3/server-status?auto REMOTE_MONITORING: true Copy env The env property allows you to set environment variables that are passed to the executable. It is a key-value map with the required variables. Important New Relic recommends passing env keys in capital letters, as per the example below, for compatibility with all infrastructure agent versions since 1.8.0. If you are using agent version 1.20.0 or above you can use small caps as the agent will automatically uppercase them. Example: integrations: - name: nri-postgresql env: DATABASE: postgres PORT: 6432 COLLECTION_LIST: '[\"postgres\"]' COLLECT_DB_LOCK_METRICS: false VERBOSE: 1 Copy If you expect your integration to receive the configuration from the host's environment rather than specifying it explicitly in the configuration file, you need to set the required variables in the Infrastructure agent passthrough_environment global configuration property config This section describes various ways to pass configuration information to an integration. Pass configuration file directly Some integration commands may get their configuration from an external file. If your integration requires a configuration file, nothing prevents you from directly passing its path directly as a command-line argument or an environment variable. Here's an example using configuration of our Flex integration: integrations: - name: nri-flex env: CONFIG_FILE: /etc/nri-flex/configs/http-service.yaml - name: other-integration exec: /opt/integration/integration -f /opt/integration/config.properties Copy The above example assumes that the http-service.yaml and config.properties files exist. We can see that the nri-flex integration is expecting the http-service.yaml complete path via the CONFIG_FILE environment variable and the other-integration expects the complete config.properties path after the -f command-line flag. In the above example, it's necessary for the integration installer/configurator that the configuration files exist in the provided path and that the agent and integrations have read permissions on them. Pass configuration through config section If you prefer to keep your configuration file with the rest of the integration configuration, you can use the config section in the integration entry, which can contain a valid YAML object or just a multi-line string: integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv - name: other-integration exec: /opt/integration/integration -f ${config.path} config: | example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostname=localhost example.cfg.port=9025 Copy In the above examples, every time the nri-flex integration is executed, the agent creates a temporary file with the following contents: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy The above YAML is only a configuration example for the nri-flex integration. The agent ignores its contents; instead, it creates a temporary file and replaces the ${config.path} variable placeholder with its path. When the integration completes execution the temporary file is removed. Also, the agent creates another temporary file before executing the other-integration integration: example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostid=localhost example.cfg.port=9025 Copy It replaces the -f ${config.path} command-line placeholder with the temporary path of the written file. By convention, if you do not place the ${config.path} variable in any command-line argument or environment variable value, the agent passes the path of the configuration file via the CONFIG_PATH environment variable: # assuming that nri-example command is prepared to receive the configuration # file via the CONFIG_PATH environment variable integrations: - name: nri-example config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy Pass secrets and discovery through config section The main benefit for using a config section instead of hardcoding the full path of an external file is that you can insert ${variable} placeholders to apply our auto-discovery feature and secrets management. Here's an example followed by some explanations: variables: my_credentials: vault: http: url: http://my.vault.host/v1/newengine/data/secret headers: X-Vault-Token: my-vault-token discovery: docker: match: label.service: foo integrations: - name: foo-monitor exec: /opt/foo/bin/monitor --config=${config.path} config: | foo.host=${discovery.ip} foo.port=${discovery.port} foo.user=${my_credentials.user} foo.password=${my_credentials.password} Copy Tip (For more details about the variables and discovery sections, please visit the discovery and secrets management documentation). The above example relies on the following premises: There is a Vault service that allows retrieving a JSON object formed by the user and password fields. There may be a variable number of Docker containers labeled with service=foo, which are accessible from the agent host via a discoverable public IP and Port. The user has configured the foo-monitor integration to monitor all the service=foo labeled containers, which share a common user and password. Each instance of the foo-monitor integration requires executing the /opt/foo/bin/monitor executable, passing the text configuration inside the config section via the --config=<path> command-line argument. As example of workflow, imagine that the Vault invocation returns the following JSON: {\"user\":\"monitorer\",\"password\":\"5up3r53cr3t!\"} Copy At the moment of executing the foo-monitor integration, there are three running containers labeled with service=foo: ip: 10.0.0.3, port: 8080 ip: 10.0.0.3, port: 8081 ip: 10.0.0.3, port: 8082 The agent then creates the following three temporary files, using the contents of the config property as a template, but replacing the ${placeholders} by the acquired variables and discovered items (files' path is invented for the sake of simplicity): First match (/tmp/123_discovered): foo.host=10.0.0.3 foo.port=8080 foo.user=monitorer foo.password=5up3r53cr3t! Copy Second match (/tmp/456_discovered): foo.host=10.0.0.3 foo.port=8081 foo.user=monitorer foo.password=5up3r53cr3t! Copy Third match (/tmp/789_discovered) foo.host=10.0.0.3 foo.port=8082 foo.user=monitorer foo.password=5up3r53cr3t! Copy After the config variable placeholders have been replaced and the temporary files have been created, the /opt/foo/bin/monitor executable is executed three times (one per matched container), replacing the ${config.path} command-line placeholder with the temporary file corresponding to each discovered configuration: First match: /opt/foo/bin/monitor --config=/tmp/123_discovered Second match: /opt/foo/bin/monitor --config=/tmp/456_discovered Third match: /opt/foo/bin/monitor --config=/tmp/789_discovered To ensure security and to minimize the chance of leaking secrets to disk, the agent: Creates the files owned by the agent user, for example, root or nri-agent, depending on the user you have configured to run the agent. Sets read permissions only for the owner. Removes the created files when the integration instance finishes its execution. config_template_path If you want to use the secrets management and discovery in the configuration files that you're passing to the integration executable, but you prefer to keep them as an individual file, you can use the config_template_path: <path> option. It works exactly as in the config section: The agent applies secrets management and discovery to the file contents. The agent creates different temporary files that are passed to the integration via the ${config.path} placeholder (or the CONFIG_PATH environment variable). Example: discovery: docker: match: name: /^redis/ integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config_template_path: /etc/flex-configs/redis.yml Copy In the above example, the redis.yml external file can contain container discovery variable placeholders, like ${discovery.ip} or ${discovery.port}. Configure how the agent executes your integrations The properties of this section modify the way the Infrastructure agent executes and interacts with the integrations, or the way the agent decorates the integrations' data. integration_user The integration commands run as the same user as the agent (usually root or nri-agent). If due to permission restrictions an integration needs to run as another user, its name must be specified in the integration_user property. Example: integrations: - name: dbus-inventory exec: python my-dbus-script.py integration_user: dbus Copy interval The interval option sets the time between consecutive executions of an integration. The accepted format is an integer immediately followed by a time unit (s for seconds, m for minutes, h for hours). The default is 30s, and the minimum accepted value is 15s. Any value lower than 15s is automatically set to 15s. Example: integrations: - name: nri-nginx env: STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover interval: 20s Copy inventory_source Any inventory item must be catalogued under a category/source taxonomy. By default, each integration inventory is stored as integration/ + name value (for example, integration/nri-apache, integration/nri-mysql). The inventory_source property allows you to override the default taxonomy of inventory data. Example: integrations: - name: nri-nginx - name: nri-apache exec: - /var/db/newrelic-infra/newrelic-integrations/bin/nri-apache - --inventory inventory_source: config/apache Copy In the above example, the nri-nginx inventory, if any, would be visible in the New Relic UI under the integration/nri-nginx source. The nri-apache inventory would be visible under config/apache. labels labels is a key-value map that allows extra metadata to be provided for the integration. The agent uses those labels to decorate the metrics, events, and inventory that it receives from a given integration instance. Example: integrations: - name: nri-apache inventory_source: config/apache labels: env: production role: load_balancer Copy In the above example, the agent decorates all the metrics and events from the nri-apache instance with the following fields: label.env: production label.role: load_balancer Also, the following entries are added to the integration inventory: config/apache/labels/env: production config/apache/labels/role: load_balancer timeout If an integration has not returned any metric (or a heartbeat message as described below) before the time specified in the timeout value, the agent kills the integration process and restarts it after the corresponding interval. The accepted format is an integer number immediately followed (without spaces) by a time unit (ms for milliseconds, s for seconds, m for minutes, h for hours). If a zero (or negative) timeout value is provided, the integration can run forever without being killed by a timeout expiration. For long-running integrations (integrations that keep running, periodically returning metrics/events/inventory), each time the integration submits a metrics/events/inventory payload, the timeout deadline is restarted. That means that long-running integrations must return a valid JSON payload in an interval that is lower than timeout. Returning an empty JSON ({}) is interpreted as a heart-beat message that restarts the timeout, preventing the long-running integration from being killed, even if they don't have information to report. The default is 120s, and the minimum accepted value is 100ms. Any value lower than 100ms is automatically set to 100ms. Example: integrations: - name: nri-jmx cli_args: JMX_HOST: jmx-host.localnet JMX_PORT: 7096 COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml\" timeout: 30s Copy working_dir working_dir sets the working directory of the command. If empty or unspecified, the agent runs the command in the Infrastructure agent's current directory. The default is the Infrastructure agent root directory. Example: integrations: - name: my-integration exec: /opt/integration/bin/integration working_dir: /opt/integration/scratch-zone Copy Update older integration configuration In December 2019, the Infrastructure agent version 1.8.0 began using a different configuration format. For details, see Config format differences. The main difference between these formats is that the older configuration format uses two separate configuration files (a INTEGRATION_NAME-definition.yml file and a INTEGRATION_NAME-config.yml file) and the newer version uses a single configuration file. Here are some of the features added by the newer configuration functionality: Flexible configuration via command-line arguments, environment variables, or external files. Ability to group different integrations in the same file. Hot reload: adding a new integration or changing its configuration does not require restarting the agent. Timeouts: if an integration doesn't respond before a user-specified time, the integration process is killed and restarted. Not all on-host integrations come with the newer configuration format, but you can update the configuration to the new format for all on-host integrations to take advantage of the new features. The following YAML shows an example Apache integration configuration using the older configuration format. Note that this configuration will still work with newer agents, but we recommend updating your integrations to take full advantage of features. integration_name: com.newrelic.apache instances: - name: apache-server-metrics command: metrics arguments: status_url: http://127.0.0.1/server-status?auto remote_monitoring: true labels: env: production role: load_balancer - name: apache-server-inventory command: inventory arguments: remote_monitoring: true labels: env: production role: load_balancer Copy To update an older integration configuration to the new format, you must perform two steps: Rename the instances top-level section to integrations. Remove the integration_name top-level section and add it to each integration entry. You are no longer required to keep a separate file for each integration type and you can group your legacy integration entries in the same file as other integrations. The new version of the Apache integration config: integrations: - name: nri-apache env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 15s labels: env: production role: load_balancer - name: nri-apache env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/apache Copy Please note that because the older configuration format doesn't support hot reloading. You will need to restart the Infrastructure agent to remove the old integrations configuration (otherwise the old instances will coexist with the new ones).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.97483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em>: Standard configuration format ",
        "sections": "On-host <em>integrations</em>: Standard configuration format",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": " format is also supported by current <em>Infrastructure</em> agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration&#x27;s configuration YAML must have an <em>integrations</em> top-level section containing a YAML array, where each entry represents an integration"
      },
      "id": "603e923a196a67581ca83db3"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations": [
    {
      "sections": [
        "On-host integration configuration overview",
        "Overview of how configuration works",
        "Configuration file location",
        "Configuration formats"
      ],
      "title": "On-host integration configuration overview",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "b580c10bb0a6142dcb204639762561b65bd6ceb9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integration-configuration-overview/",
      "published_at": "2021-09-27T16:00:43Z",
      "updated_at": "2021-09-27T16:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's on-host integrations send data to the infrastructure agent, which in turn sends that data to New Relic. How integrations interact with the agent is controlled by each integration's config. Understanding more about configuration can help you troubleshoot issues with your on-host integration. Overview of how configuration works New Relic's on-host integrations are external programs executed by the infrastructure agent. Each integration monitors a specific service. An integration has, at minimum, these files: An executable that exports various types of data in a JSON format expected by the agent One or more YAML-format config files (for example, the Apache integration configuration). (We recommend linting YAML config files before use to avoid formatting issues.) Note that in addition to the specific on-host integration's configuration, you can also edit the infrastructure agent's configuration. Configuration file location With standard on-host integration installations, the configuration is located in the infrastructure agent's directory. The agent determines this config location by a setting in its own configuration file. For some implementations, the integration's configuration will be located elsewhere. For example: Services running on Kubernetes: The configuration is located in the Kubernetes integration config file. Services running on Amazon ECS: The configuration is placed in the AWS console. Configuration formats On-host integrations use two configuration formats: Standard: Starting December 2019, infrastructure agent version 1.8.0 began supporting a new format used by some integrations. This format uses a single configuration file and provides other improvements. For more details, see Standard configuration. Legacy: This is the format used by most on-host integrations. This configuration uses two files: a definition file and a configuration file. For more details, see Legacy configuration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.629616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> configuration overview",
        "sections": "On-host <em>integration</em> configuration overview",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": "New Relic&#x27;s on-host <em>integrations</em> send data to the <em>infrastructure</em> agent, which in turn sends that data to New Relic. How <em>integrations</em> interact with the agent is controlled by each integration&#x27;s config. Understanding more about configuration can help you troubleshoot issues with your on-host"
      },
      "id": "6044091d28ccbc95852c60cb"
    },
    {
      "sections": [
        "On-host integrations: Standard configuration format",
        "Configuration structure",
        "Tip",
        "Important",
        "List of configuration properties",
        "Select an integration to run",
        "name",
        "exec",
        "cli_args",
        "when",
        "Pass configuration to the integration executable",
        "env",
        "config",
        "config_template_path",
        "Configure how the agent executes your integrations",
        "integration_user",
        "interval",
        "inventory_source",
        "labels",
        "timeout",
        "working_dir",
        "Update older integration configuration"
      ],
      "title": "On-host integrations: Standard configuration format ",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "3b4c5ab77b2b8025ca8de375403f24bc75b3dca7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integrations-standard-configuration-format/",
      "published_at": "2021-09-27T16:02:13Z",
      "updated_at": "2021-09-27T16:02:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In December 2019, Infrastructure agent version 1.8.0 began supporting this new configuration format that makes use of a single configuration file (instead of two separate files), and provides other improvements. This document will explain how this newer format works. The older legacy configuration format is also supported by current Infrastructure agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration's configuration YAML must have an integrations top-level section containing a YAML array, where each entry represents an integration and its configuration. For each integration entry, only the name property is mandatory. The other properties are optional. Here's an example configuration featuring two integrations: our built-in Docker integration, which requires no configuration, and our MySQL integration: integrations: # New Relic integration that does not require any configuration - name: nri-docker # New Relic integration that gets its configuration from the environment - name: nri-mysql env: PORT: 3306 USERNAME: newrelic PASSWORD: 123456789 # to hide this field, read the secrets management documentation # Any free-form integration executed via a user-provided command - name: my-own-integration exec: python /opt/integrations/my-script.py --host=127.0.0.1 Copy You can have as many configuration YAML files as you want and can group your integration instances. Tip We recommend linting the YAML configuration files before using them to avoid formatting issues. Each configuration YAML file can also contain discovery and variables top-level sections. Important This configuration format does not require an agent restart. When saved, changes are detected and implemented immediately. This means that saving intermediate configuration changes may cause the integration to stop working. List of configuration properties This is a list of the general properties used to configure an integration. For more details about using these properties, including example values, see the documentation following the table. Config Description name Name of the integration. This is the only mandatory configuration property across all on-host integrations. If the exec field is not set it will also be the name of the integration executable. cli_args Optional list of command line arguments when name is used to provide the integration executable. Available since agent version 1.13.0. exec Full path to the integration executable, plus arguments. It may be a single-line string or a string array. If left unspecified, the exec field defaults to the name field. env YAML map containing the environment variables to be passed to the integration, where key is the environment variable name, and value is the variable value. config Configuration that is written as an external file and the path that is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. config_template_path Any external file whose path is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. Its usage allows applying discovery and secrets binding to any external configuration. integration_user Name of the user who runs the integration. interval Time between consecutive executions of the integration. It must be a number followed by a time unit (s, m or h), without spaces. inventory_source Allows overriding the category and term of the inventory source. labels Map with labels that decorate the data (metrics, events, inventory) reported by the integration. timeout A number followed by a time unit (ms, s, m or h). An integration that hasn't responded in this time period is killed and restarted. working_dir Working directory for the integration binary. when Integration is only executed if the clause evaluates to true. Conditions are defined below. The remainder of this document describes config properties grouped by their functionality: Select an integration to run Pass configuration to the integration command Configure how the agent executes integrations Select an integration to run There are two properties to select which integration will run: name and exec. The only mandatory property across all on-host integrations is name. The remaining properties specified in this document are optional. Example: integrations: - name: nri-docker - name: my-integration exec: /usr/local/bin/my-integration --metrics --inventory Copy name The mandatory name property can work in two ways: If the exec property is set: The name property only provides an identifier for the integration instance. This identifier is used in log messages and to provide a default inventory category/source in the form integration/<name> (for example, integration/nri-redis). This inventory path can be overridden with the inventory_source configuration option. If the exec property is not set: The agent looks for (and executes) an executable with the name value in any of the following folders: Linux: /var/db/newrelic-infra/newrelic-integrations/bin /var/db/newrelic-infra/newrelic-integrations /var/db/newrelic-infra/custom-integrations/bin /var/db/newrelic-infra/custom-integrations Windows C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations\\bin C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations If there is no executable with this name in the above folders the agent logs an error and the integration is not executed. Important In Windows, do not append the .exe extension to the name. The agent does this for you (for example, name: nri-mysql would look for nri-mysql.exe in the above folders). exec The exec optional property specifies the path, command, and command-line arguments of the integration to execute. When none of the path folders or arguments have spaces, it can be written in a single-line string: - name: my-integration exec: /usr/bin/python /opt/integrations/my-script.py --host=127.0.0.1 Copy If any of the path/arguments have spaces that are part of a single element, you can use a YAML array notation: - name: my-integration exec: - C:\\Program Files\\My Integration\\integration.exe - --host - 127.0.0.1 - --port - 8080 Copy The default working directory is the root directory of the agent configuration. It can be overridden with the working_dir property. cli_args The cli_args optional property specifies command line arguments that should be passed to the integration. It is useful when using name as it only provides the integration name identifier (not compatible with exec). - name: my-integration cli_args: [ -interval 10s ] Copy Usual YAML multi-line list format can be used as well: - name: my-integration cli_args: - -interval - 10s Copy when The when property allows to execute the integration only when all the evaluated conditions are successful. Available conditions are: env_exists: Environment variables exist and match value. file_exists: Given file path exists. feature: Provided feature-flag is enabled. Example: integrations: - name: ssh-integration when: file_exists: /var/run/sshd.pid Copy Pass configuration to the integration executable Often integration executables need to receive a configuration to work properly (for example, hostname and port of the monitored system, user credentials, etc.). The Infrastructure agent allows you to configure the integration commands in three ways (which you can combine): Environment variables, using the env property. (recommended) Command-line arguments, passed in the exec property. Configuration files, whose path needs to be passed through environment variables or command-line arguments (see the config) property. Example: integrations: - name: my-integration exec: /opt/path/bin/script --host 127.0.0.1 --port 8081 - name: nri-mysql env: STATUS_URL: http://10.0.0.3/server-status?auto REMOTE_MONITORING: true Copy env The env property allows you to set environment variables that are passed to the executable. It is a key-value map with the required variables. Important New Relic recommends passing env keys in capital letters, as per the example below, for compatibility with all infrastructure agent versions since 1.8.0. If you are using agent version 1.20.0 or above you can use small caps as the agent will automatically uppercase them. Example: integrations: - name: nri-postgresql env: DATABASE: postgres PORT: 6432 COLLECTION_LIST: '[\"postgres\"]' COLLECT_DB_LOCK_METRICS: false VERBOSE: 1 Copy If you expect your integration to receive the configuration from the host's environment rather than specifying it explicitly in the configuration file, you need to set the required variables in the Infrastructure agent passthrough_environment global configuration property config This section describes various ways to pass configuration information to an integration. Pass configuration file directly Some integration commands may get their configuration from an external file. If your integration requires a configuration file, nothing prevents you from directly passing its path directly as a command-line argument or an environment variable. Here's an example using configuration of our Flex integration: integrations: - name: nri-flex env: CONFIG_FILE: /etc/nri-flex/configs/http-service.yaml - name: other-integration exec: /opt/integration/integration -f /opt/integration/config.properties Copy The above example assumes that the http-service.yaml and config.properties files exist. We can see that the nri-flex integration is expecting the http-service.yaml complete path via the CONFIG_FILE environment variable and the other-integration expects the complete config.properties path after the -f command-line flag. In the above example, it's necessary for the integration installer/configurator that the configuration files exist in the provided path and that the agent and integrations have read permissions on them. Pass configuration through config section If you prefer to keep your configuration file with the rest of the integration configuration, you can use the config section in the integration entry, which can contain a valid YAML object or just a multi-line string: integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv - name: other-integration exec: /opt/integration/integration -f ${config.path} config: | example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostname=localhost example.cfg.port=9025 Copy In the above examples, every time the nri-flex integration is executed, the agent creates a temporary file with the following contents: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy The above YAML is only a configuration example for the nri-flex integration. The agent ignores its contents; instead, it creates a temporary file and replaces the ${config.path} variable placeholder with its path. When the integration completes execution the temporary file is removed. Also, the agent creates another temporary file before executing the other-integration integration: example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostid=localhost example.cfg.port=9025 Copy It replaces the -f ${config.path} command-line placeholder with the temporary path of the written file. By convention, if you do not place the ${config.path} variable in any command-line argument or environment variable value, the agent passes the path of the configuration file via the CONFIG_PATH environment variable: # assuming that nri-example command is prepared to receive the configuration # file via the CONFIG_PATH environment variable integrations: - name: nri-example config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy Pass secrets and discovery through config section The main benefit for using a config section instead of hardcoding the full path of an external file is that you can insert ${variable} placeholders to apply our auto-discovery feature and secrets management. Here's an example followed by some explanations: variables: my_credentials: vault: http: url: http://my.vault.host/v1/newengine/data/secret headers: X-Vault-Token: my-vault-token discovery: docker: match: label.service: foo integrations: - name: foo-monitor exec: /opt/foo/bin/monitor --config=${config.path} config: | foo.host=${discovery.ip} foo.port=${discovery.port} foo.user=${my_credentials.user} foo.password=${my_credentials.password} Copy Tip (For more details about the variables and discovery sections, please visit the discovery and secrets management documentation). The above example relies on the following premises: There is a Vault service that allows retrieving a JSON object formed by the user and password fields. There may be a variable number of Docker containers labeled with service=foo, which are accessible from the agent host via a discoverable public IP and Port. The user has configured the foo-monitor integration to monitor all the service=foo labeled containers, which share a common user and password. Each instance of the foo-monitor integration requires executing the /opt/foo/bin/monitor executable, passing the text configuration inside the config section via the --config=<path> command-line argument. As example of workflow, imagine that the Vault invocation returns the following JSON: {\"user\":\"monitorer\",\"password\":\"5up3r53cr3t!\"} Copy At the moment of executing the foo-monitor integration, there are three running containers labeled with service=foo: ip: 10.0.0.3, port: 8080 ip: 10.0.0.3, port: 8081 ip: 10.0.0.3, port: 8082 The agent then creates the following three temporary files, using the contents of the config property as a template, but replacing the ${placeholders} by the acquired variables and discovered items (files' path is invented for the sake of simplicity): First match (/tmp/123_discovered): foo.host=10.0.0.3 foo.port=8080 foo.user=monitorer foo.password=5up3r53cr3t! Copy Second match (/tmp/456_discovered): foo.host=10.0.0.3 foo.port=8081 foo.user=monitorer foo.password=5up3r53cr3t! Copy Third match (/tmp/789_discovered) foo.host=10.0.0.3 foo.port=8082 foo.user=monitorer foo.password=5up3r53cr3t! Copy After the config variable placeholders have been replaced and the temporary files have been created, the /opt/foo/bin/monitor executable is executed three times (one per matched container), replacing the ${config.path} command-line placeholder with the temporary file corresponding to each discovered configuration: First match: /opt/foo/bin/monitor --config=/tmp/123_discovered Second match: /opt/foo/bin/monitor --config=/tmp/456_discovered Third match: /opt/foo/bin/monitor --config=/tmp/789_discovered To ensure security and to minimize the chance of leaking secrets to disk, the agent: Creates the files owned by the agent user, for example, root or nri-agent, depending on the user you have configured to run the agent. Sets read permissions only for the owner. Removes the created files when the integration instance finishes its execution. config_template_path If you want to use the secrets management and discovery in the configuration files that you're passing to the integration executable, but you prefer to keep them as an individual file, you can use the config_template_path: <path> option. It works exactly as in the config section: The agent applies secrets management and discovery to the file contents. The agent creates different temporary files that are passed to the integration via the ${config.path} placeholder (or the CONFIG_PATH environment variable). Example: discovery: docker: match: name: /^redis/ integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config_template_path: /etc/flex-configs/redis.yml Copy In the above example, the redis.yml external file can contain container discovery variable placeholders, like ${discovery.ip} or ${discovery.port}. Configure how the agent executes your integrations The properties of this section modify the way the Infrastructure agent executes and interacts with the integrations, or the way the agent decorates the integrations' data. integration_user The integration commands run as the same user as the agent (usually root or nri-agent). If due to permission restrictions an integration needs to run as another user, its name must be specified in the integration_user property. Example: integrations: - name: dbus-inventory exec: python my-dbus-script.py integration_user: dbus Copy interval The interval option sets the time between consecutive executions of an integration. The accepted format is an integer immediately followed by a time unit (s for seconds, m for minutes, h for hours). The default is 30s, and the minimum accepted value is 15s. Any value lower than 15s is automatically set to 15s. Example: integrations: - name: nri-nginx env: STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover interval: 20s Copy inventory_source Any inventory item must be catalogued under a category/source taxonomy. By default, each integration inventory is stored as integration/ + name value (for example, integration/nri-apache, integration/nri-mysql). The inventory_source property allows you to override the default taxonomy of inventory data. Example: integrations: - name: nri-nginx - name: nri-apache exec: - /var/db/newrelic-infra/newrelic-integrations/bin/nri-apache - --inventory inventory_source: config/apache Copy In the above example, the nri-nginx inventory, if any, would be visible in the New Relic UI under the integration/nri-nginx source. The nri-apache inventory would be visible under config/apache. labels labels is a key-value map that allows extra metadata to be provided for the integration. The agent uses those labels to decorate the metrics, events, and inventory that it receives from a given integration instance. Example: integrations: - name: nri-apache inventory_source: config/apache labels: env: production role: load_balancer Copy In the above example, the agent decorates all the metrics and events from the nri-apache instance with the following fields: label.env: production label.role: load_balancer Also, the following entries are added to the integration inventory: config/apache/labels/env: production config/apache/labels/role: load_balancer timeout If an integration has not returned any metric (or a heartbeat message as described below) before the time specified in the timeout value, the agent kills the integration process and restarts it after the corresponding interval. The accepted format is an integer number immediately followed (without spaces) by a time unit (ms for milliseconds, s for seconds, m for minutes, h for hours). If a zero (or negative) timeout value is provided, the integration can run forever without being killed by a timeout expiration. For long-running integrations (integrations that keep running, periodically returning metrics/events/inventory), each time the integration submits a metrics/events/inventory payload, the timeout deadline is restarted. That means that long-running integrations must return a valid JSON payload in an interval that is lower than timeout. Returning an empty JSON ({}) is interpreted as a heart-beat message that restarts the timeout, preventing the long-running integration from being killed, even if they don't have information to report. The default is 120s, and the minimum accepted value is 100ms. Any value lower than 100ms is automatically set to 100ms. Example: integrations: - name: nri-jmx cli_args: JMX_HOST: jmx-host.localnet JMX_PORT: 7096 COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml\" timeout: 30s Copy working_dir working_dir sets the working directory of the command. If empty or unspecified, the agent runs the command in the Infrastructure agent's current directory. The default is the Infrastructure agent root directory. Example: integrations: - name: my-integration exec: /opt/integration/bin/integration working_dir: /opt/integration/scratch-zone Copy Update older integration configuration In December 2019, the Infrastructure agent version 1.8.0 began using a different configuration format. For details, see Config format differences. The main difference between these formats is that the older configuration format uses two separate configuration files (a INTEGRATION_NAME-definition.yml file and a INTEGRATION_NAME-config.yml file) and the newer version uses a single configuration file. Here are some of the features added by the newer configuration functionality: Flexible configuration via command-line arguments, environment variables, or external files. Ability to group different integrations in the same file. Hot reload: adding a new integration or changing its configuration does not require restarting the agent. Timeouts: if an integration doesn't respond before a user-specified time, the integration process is killed and restarted. Not all on-host integrations come with the newer configuration format, but you can update the configuration to the new format for all on-host integrations to take advantage of the new features. The following YAML shows an example Apache integration configuration using the older configuration format. Note that this configuration will still work with newer agents, but we recommend updating your integrations to take full advantage of features. integration_name: com.newrelic.apache instances: - name: apache-server-metrics command: metrics arguments: status_url: http://127.0.0.1/server-status?auto remote_monitoring: true labels: env: production role: load_balancer - name: apache-server-inventory command: inventory arguments: remote_monitoring: true labels: env: production role: load_balancer Copy To update an older integration configuration to the new format, you must perform two steps: Rename the instances top-level section to integrations. Remove the integration_name top-level section and add it to each integration entry. You are no longer required to keep a separate file for each integration type and you can group your legacy integration entries in the same file as other integrations. The new version of the Apache integration config: integrations: - name: nri-apache env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 15s labels: env: production role: load_balancer - name: nri-apache env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/apache Copy Please note that because the older configuration format doesn't support hot reloading. You will need to restart the Infrastructure agent to remove the old integrations configuration (otherwise the old instances will coexist with the new ones).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.97483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em>: Standard configuration format ",
        "sections": "On-host <em>integrations</em>: Standard configuration format",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": " format is also supported by current <em>Infrastructure</em> agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration&#x27;s configuration YAML must have an <em>integrations</em> top-level section containing a YAML array, where each entry represents an integration"
      },
      "id": "603e923a196a67581ca83db3"
    },
    {
      "sections": [
        "Metric data gaps with cloud integrations",
        "Problem",
        "Solution",
        "Amazon (AWS)",
        "Microsoft Azure",
        "Google Cloud Platform (GCP)",
        "Tip",
        "Cause"
      ],
      "title": "Metric data gaps with cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "ee3473d0cbc9059b6b36503949d08d1e76c7fc06",
      "image": "https://docs.newrelic.com/static/dfa79b9e3086b81f216d306ba0afe557/c1b63/screen-metric-gap.png",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/metric-data-gaps-cloud-integrations/",
      "published_at": "2021-09-26T22:08:45Z",
      "updated_at": "2021-03-29T21:18:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You've set up your AWS, Azure, or GCP integration and are monitoring your metrics. However, you notice gaps in your metric data charts. This screenshot shows a metric data chart with gaps. Solution Here’s a list of metrics which might show gaps in your metric data. If possible, avoid setting up alerts for these metrics because we know they can generate false positives. Amazon (AWS) Integration Provider Event Type Metric SNS SnsTopic QueueSample provider.subscriptionsConfirmed SnsTopic QueueSample provider.subscriptionsPending SnsTopic QueueSample provider.subscriptionsDeleted EFS EfsFileSystem BlockDeviceSample provider.lastKnownSizeInBytes ECS EcsCluster ComputeSample provider.registeredContainerInstancesCount EcsCluster ComputeSample provider.activeServicesCount EcsCluster ComputeSample provider.pendingTasksCount EcsCluster ComputeSample provider.runningTasksCount EcsService ComputeSample provider.pendingCount EcsService ComputeSample provider.runningCount EcsService ComputeSample provider.desiredCount DynamoDB DynamoDbTable DatastoreSample provider.itemCount DynamoDbTable DatastoreSample provider.tableSizeBytes AutoScaling AutoScalingInstance AutoScalingInstanceSample healthStatus Billing BillingBudget FinanceSample provider.actualAmount Billingbudget FinanceSample provider.forecastedAmount BillingBudget FinanceSample provider.limitAmount Microsoft Azure Integration Provider Event Type Metric SQL AzureSqlDatabase AzureSqlDatabaseSample databaseSizeCurrentBytes AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google Cloud Platform (GCP) Tip We're currently reviewing the GCP metrics that can cause data gaps. Tip This list isn't complete. We're currently reviewing the full list of metrics that can cause data gaps. Cause Some metrics aren’t present in the usual cloud provider APIs (CloudWatch, Stackdriver, Azure Monitor) and are fetched from the service APIs instead. Each cloud service provider has a unique service API that processes data and interacts with the service. For example, if a metric isn’t present in AWS CloudWatch, New Relic will fetch the metric from the AWS ECS service API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.3424,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "sections": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google <em>Cloud</em> Platform (GCP) Tip We&#x27;re currently reviewing the GCP metrics that can cause data gaps. Tip This list isn&#x27;t complete. We&#x27;re currently"
      },
      "id": "603e821e196a67a042a83df3"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/metric-data-gaps-cloud-integrations": [
    {
      "sections": [
        "Configure polling frequency and data collection for cloud integrations",
        "Overview of settings",
        "Caution",
        "Change polling frequency",
        "Specify data to be fetched",
        "Data collection",
        "Filters",
        "Potential impact on alerts and charts"
      ],
      "title": "Configure polling frequency and data collection for cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "b900b7545f9032201c212449be114e10176bf789",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations/",
      "published_at": "2021-09-26T22:07:52Z",
      "updated_at": "2021-07-27T15:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our cloud integrations get data from cloud provider APIs. In New Relic, you can change some of the data collection-related settings for your cloud integrations. Read on to see what changes you can make and the reasons for making them. Overview of settings New Relic cloud integrations get data from cloud providers' APIs. Data is generally collected from monitoring APIs such as AWS CloudWatch, Azure Monitor, and GCP Stackdriver, and inventory metadata is collected from the specific services' APIs. You can use the account status dashboard to see how your cloud integrations are handling data from a cloud service provider. If you want to report more or less data from your cloud integrations, or if you need to control the use of the cloud providers' APIs to prevent reaching rate and throttling limits in your cloud account, you can change the configuration settings to modify the amount of data they report. The two main controls are: Change polling frequency Change what data is reported Examples of business reasons for wanting to change your polling frequency include: Billing: If you need to manage your AWS CloudWatch bill, you may want to decrease the polling frequency. Before you do this, make sure that any alert conditions set for your cloud integrations are not affected by this reduction. New services: If you are deploying a new service or configuration and you want to collect data more often, you may want to increase the polling frequency temporarily. Caution Changing the configuration settings for your integrations may impact alert conditions and chart trends. Change polling frequency The polling frequency configuration determines how often New Relic reports data from your cloud provider for each service. By default, the polling frequency is set to the maximum frequency that is available for each service. To change the polling frequency for a cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Use the dropdowns next to Data polling interval every to select how frequently you want New Relic to capture your cloud integration data. Specify data to be fetched You can specify which information you want captured for your cloud integration by enabling the collection of additional data and by applying multiple filters to each integration. To change this settings for your cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Under Data collections and filters, turn the toggles you want On. For filters, select or enter the values that you want included in your reported data. Data collection For some cloud integrations, an additional number of calls to the cloud provider APIs are needed in order to collect data. For example, to fetch tags for AWS Elastic Map Reduce clusters, an additional call to the service API is required. To better control the amount of API calls that are sent to your cloud account for these integrations, you can specify when you need these types of data to be collected. Different data collection toggles are available, depending on the integration. Toggle Description Collect tags Some integrations require additional API calls to the cloud provider to report tags. Tag collection is enabled by default. Switch this to Off if you don't want the integration to collect your cloud resource tags and thus reduce the volume of API calls. Collect extended inventory Some integrations can collect extended inventory metadata about your cloud resources by making additional API calls to the cloud provider. The metadata included within the extended inventory for each cloud integration is described in the integration documentation. Extended inventory collection is disabled by default. Switch this to On if you want to monitor extended inventory. This will increase the volume of API calls. Collect shards data Available for AWS Kinesis Streams integration. By default, we don't report shard metrics. Switch this to On if you want to monitor shard metrics in addition to data stream metrics. Collect Lambda@Edge data Available for AWS CloudFront integration. By default, we don't report Lambda@Edge data. Switch this to On if you're using Lambda@Edge in AWS CloudFront and want to get Lambda execution location metadata. Collect node data Available for AWS Elasticsearch integration. By default, we don't report Elasticsearch node metrics. Switch this to On if you want to monitor node metrics in addition to cluster metrics. Collect NAT Gateway data and Collect VPN data Available for AWS VPC integration. By default, we don't report NAT Gateway nor VPN metrics. Switch these to On if you want to monitor NAT Gateway and VPN metrics and inventory, in addition to other VPC related entities inventory. Collect IP addresses Available for AWS EC2 integration. By default, we collect EC2 instance metadata that includes public and private IP addresses, and network interface details. Switch this to Off if you don't want New Relic to store and display these IP data. Filters When a filter is On, you specify the data that you want to be collected; for example, if the Limit to AWS region is On, the regions that you select will be the ones that data will be collected for. There are different filters available, depending on the integration: Filter Description Region Select the regions that include the resources that you want to monitor. Queue prefixes Available for AWS SQS integration. Enter each name or prefix for the queues that you want to monitor. Filter values are case-sensitive. Load balancer prefixes Available for AWS ALB integration. Enter each name or prefix for the application load balancers that you want to monitor. Filter values are case-sensitive. Stage name prefixes Available for AWS API Gateway integration. Enter each name or prefix for the stages that you want to monitor. Filter values are case-sensitive. Tag key Enter one tag key that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag value filter. Tag value Enter one tag value that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag key. Resource group Select the resource groups that are associated with the resources that you want to monitor. Potential impact on alerts and charts If you change an integration's configuration, it can impact alert conditions and charts. Here are some things to consider: If you change this setting... It may have this impact... Any configuration setting When you change the configuration settings, the data that New Relic displays in infrastructure charts, on the inventory page, and in the events feed changes as well. Any filters When you create alert conditions after you set filters, make sure that your alerts are not triggered by resources that you filtered out. Filter for regions If you filter for specific regions, it may lower the amount of data reported to New Relic, which could trigger an alert. If you create an alert condition for a specific region and then filter that region out, the region would no longer report data and would never trigger the alert. Polling frequency When you create an alert, make sure that you define the threshold for a time period that is longer than the polling frequency. Tags and extended inventory If you turn on tags and/or extended inventory, New Relic makes more API calls to the cloud provider, which could increase your cloud provider API usage bill.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.43712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "sections": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Our <em>cloud</em> <em>integrations</em> get data from <em>cloud</em> provider APIs. In New Relic, you can change some of the data collection-related settings for your <em>cloud</em> <em>integrations</em>. Read on to see what changes you can make and the reasons for making them. Overview of settings New Relic <em>cloud</em> <em>integrations</em> get data from"
      },
      "id": "603e8eef64441fcc7e4e8853"
    },
    {
      "sections": [
        "On-host integration configuration overview",
        "Overview of how configuration works",
        "Configuration file location",
        "Configuration formats"
      ],
      "title": "On-host integration configuration overview",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "b580c10bb0a6142dcb204639762561b65bd6ceb9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integration-configuration-overview/",
      "published_at": "2021-09-27T16:00:43Z",
      "updated_at": "2021-09-27T16:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's on-host integrations send data to the infrastructure agent, which in turn sends that data to New Relic. How integrations interact with the agent is controlled by each integration's config. Understanding more about configuration can help you troubleshoot issues with your on-host integration. Overview of how configuration works New Relic's on-host integrations are external programs executed by the infrastructure agent. Each integration monitors a specific service. An integration has, at minimum, these files: An executable that exports various types of data in a JSON format expected by the agent One or more YAML-format config files (for example, the Apache integration configuration). (We recommend linting YAML config files before use to avoid formatting issues.) Note that in addition to the specific on-host integration's configuration, you can also edit the infrastructure agent's configuration. Configuration file location With standard on-host integration installations, the configuration is located in the infrastructure agent's directory. The agent determines this config location by a setting in its own configuration file. For some implementations, the integration's configuration will be located elsewhere. For example: Services running on Kubernetes: The configuration is located in the Kubernetes integration config file. Services running on Amazon ECS: The configuration is placed in the AWS console. Configuration formats On-host integrations use two configuration formats: Standard: Starting December 2019, infrastructure agent version 1.8.0 began supporting a new format used by some integrations. This format uses a single configuration file and provides other improvements. For more details, see Standard configuration. Legacy: This is the format used by most on-host integrations. This configuration uses two files: a definition file and a configuration file. For more details, see Legacy configuration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.62953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> configuration overview",
        "sections": "On-host <em>integration</em> configuration overview",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": "New Relic&#x27;s on-host <em>integrations</em> send data to the <em>infrastructure</em> agent, which in turn sends that data to New Relic. How <em>integrations</em> interact with the agent is controlled by each integration&#x27;s config. Understanding more about configuration can help you troubleshoot issues with your on-host"
      },
      "id": "6044091d28ccbc95852c60cb"
    },
    {
      "sections": [
        "On-host integrations: Standard configuration format",
        "Configuration structure",
        "Tip",
        "Important",
        "List of configuration properties",
        "Select an integration to run",
        "name",
        "exec",
        "cli_args",
        "when",
        "Pass configuration to the integration executable",
        "env",
        "config",
        "config_template_path",
        "Configure how the agent executes your integrations",
        "integration_user",
        "interval",
        "inventory_source",
        "labels",
        "timeout",
        "working_dir",
        "Update older integration configuration"
      ],
      "title": "On-host integrations: Standard configuration format ",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "3b4c5ab77b2b8025ca8de375403f24bc75b3dca7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integrations-standard-configuration-format/",
      "published_at": "2021-09-27T16:02:13Z",
      "updated_at": "2021-09-27T16:02:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In December 2019, Infrastructure agent version 1.8.0 began supporting this new configuration format that makes use of a single configuration file (instead of two separate files), and provides other improvements. This document will explain how this newer format works. The older legacy configuration format is also supported by current Infrastructure agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration's configuration YAML must have an integrations top-level section containing a YAML array, where each entry represents an integration and its configuration. For each integration entry, only the name property is mandatory. The other properties are optional. Here's an example configuration featuring two integrations: our built-in Docker integration, which requires no configuration, and our MySQL integration: integrations: # New Relic integration that does not require any configuration - name: nri-docker # New Relic integration that gets its configuration from the environment - name: nri-mysql env: PORT: 3306 USERNAME: newrelic PASSWORD: 123456789 # to hide this field, read the secrets management documentation # Any free-form integration executed via a user-provided command - name: my-own-integration exec: python /opt/integrations/my-script.py --host=127.0.0.1 Copy You can have as many configuration YAML files as you want and can group your integration instances. Tip We recommend linting the YAML configuration files before using them to avoid formatting issues. Each configuration YAML file can also contain discovery and variables top-level sections. Important This configuration format does not require an agent restart. When saved, changes are detected and implemented immediately. This means that saving intermediate configuration changes may cause the integration to stop working. List of configuration properties This is a list of the general properties used to configure an integration. For more details about using these properties, including example values, see the documentation following the table. Config Description name Name of the integration. This is the only mandatory configuration property across all on-host integrations. If the exec field is not set it will also be the name of the integration executable. cli_args Optional list of command line arguments when name is used to provide the integration executable. Available since agent version 1.13.0. exec Full path to the integration executable, plus arguments. It may be a single-line string or a string array. If left unspecified, the exec field defaults to the name field. env YAML map containing the environment variables to be passed to the integration, where key is the environment variable name, and value is the variable value. config Configuration that is written as an external file and the path that is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. config_template_path Any external file whose path is passed to the integration with the CONFIG_PATH environment variable or the ${config.path} variable placeholder. Its usage allows applying discovery and secrets binding to any external configuration. integration_user Name of the user who runs the integration. interval Time between consecutive executions of the integration. It must be a number followed by a time unit (s, m or h), without spaces. inventory_source Allows overriding the category and term of the inventory source. labels Map with labels that decorate the data (metrics, events, inventory) reported by the integration. timeout A number followed by a time unit (ms, s, m or h). An integration that hasn't responded in this time period is killed and restarted. working_dir Working directory for the integration binary. when Integration is only executed if the clause evaluates to true. Conditions are defined below. The remainder of this document describes config properties grouped by their functionality: Select an integration to run Pass configuration to the integration command Configure how the agent executes integrations Select an integration to run There are two properties to select which integration will run: name and exec. The only mandatory property across all on-host integrations is name. The remaining properties specified in this document are optional. Example: integrations: - name: nri-docker - name: my-integration exec: /usr/local/bin/my-integration --metrics --inventory Copy name The mandatory name property can work in two ways: If the exec property is set: The name property only provides an identifier for the integration instance. This identifier is used in log messages and to provide a default inventory category/source in the form integration/<name> (for example, integration/nri-redis). This inventory path can be overridden with the inventory_source configuration option. If the exec property is not set: The agent looks for (and executes) an executable with the name value in any of the following folders: Linux: /var/db/newrelic-infra/newrelic-integrations/bin /var/db/newrelic-infra/newrelic-integrations /var/db/newrelic-infra/custom-integrations/bin /var/db/newrelic-infra/custom-integrations Windows C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations\\bin C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-integrations If there is no executable with this name in the above folders the agent logs an error and the integration is not executed. Important In Windows, do not append the .exe extension to the name. The agent does this for you (for example, name: nri-mysql would look for nri-mysql.exe in the above folders). exec The exec optional property specifies the path, command, and command-line arguments of the integration to execute. When none of the path folders or arguments have spaces, it can be written in a single-line string: - name: my-integration exec: /usr/bin/python /opt/integrations/my-script.py --host=127.0.0.1 Copy If any of the path/arguments have spaces that are part of a single element, you can use a YAML array notation: - name: my-integration exec: - C:\\Program Files\\My Integration\\integration.exe - --host - 127.0.0.1 - --port - 8080 Copy The default working directory is the root directory of the agent configuration. It can be overridden with the working_dir property. cli_args The cli_args optional property specifies command line arguments that should be passed to the integration. It is useful when using name as it only provides the integration name identifier (not compatible with exec). - name: my-integration cli_args: [ -interval 10s ] Copy Usual YAML multi-line list format can be used as well: - name: my-integration cli_args: - -interval - 10s Copy when The when property allows to execute the integration only when all the evaluated conditions are successful. Available conditions are: env_exists: Environment variables exist and match value. file_exists: Given file path exists. feature: Provided feature-flag is enabled. Example: integrations: - name: ssh-integration when: file_exists: /var/run/sshd.pid Copy Pass configuration to the integration executable Often integration executables need to receive a configuration to work properly (for example, hostname and port of the monitored system, user credentials, etc.). The Infrastructure agent allows you to configure the integration commands in three ways (which you can combine): Environment variables, using the env property. (recommended) Command-line arguments, passed in the exec property. Configuration files, whose path needs to be passed through environment variables or command-line arguments (see the config) property. Example: integrations: - name: my-integration exec: /opt/path/bin/script --host 127.0.0.1 --port 8081 - name: nri-mysql env: STATUS_URL: http://10.0.0.3/server-status?auto REMOTE_MONITORING: true Copy env The env property allows you to set environment variables that are passed to the executable. It is a key-value map with the required variables. Important New Relic recommends passing env keys in capital letters, as per the example below, for compatibility with all infrastructure agent versions since 1.8.0. If you are using agent version 1.20.0 or above you can use small caps as the agent will automatically uppercase them. Example: integrations: - name: nri-postgresql env: DATABASE: postgres PORT: 6432 COLLECTION_LIST: '[\"postgres\"]' COLLECT_DB_LOCK_METRICS: false VERBOSE: 1 Copy If you expect your integration to receive the configuration from the host's environment rather than specifying it explicitly in the configuration file, you need to set the required variables in the Infrastructure agent passthrough_environment global configuration property config This section describes various ways to pass configuration information to an integration. Pass configuration file directly Some integration commands may get their configuration from an external file. If your integration requires a configuration file, nothing prevents you from directly passing its path directly as a command-line argument or an environment variable. Here's an example using configuration of our Flex integration: integrations: - name: nri-flex env: CONFIG_FILE: /etc/nri-flex/configs/http-service.yaml - name: other-integration exec: /opt/integration/integration -f /opt/integration/config.properties Copy The above example assumes that the http-service.yaml and config.properties files exist. We can see that the nri-flex integration is expecting the http-service.yaml complete path via the CONFIG_FILE environment variable and the other-integration expects the complete config.properties path after the -f command-line flag. In the above example, it's necessary for the integration installer/configurator that the configuration files exist in the provided path and that the agent and integrations have read permissions on them. Pass configuration through config section If you prefer to keep your configuration file with the rest of the integration configuration, you can use the config section in the integration entry, which can contain a valid YAML object or just a multi-line string: integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv - name: other-integration exec: /opt/integration/integration -f ${config.path} config: | example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostname=localhost example.cfg.port=9025 Copy In the above examples, every time the nri-flex integration is executed, the agent creates a temporary file with the following contents: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy The above YAML is only a configuration example for the nri-flex integration. The agent ignores its contents; instead, it creates a temporary file and replaces the ${config.path} variable placeholder with its path. When the integration completes execution the temporary file is removed. Also, the agent creates another temporary file before executing the other-integration integration: example.cfg.verbose=true example.cfg.logger=/var/logs/integration.log example.cfg.hostid=localhost example.cfg.port=9025 Copy It replaces the -f ${config.path} command-line placeholder with the temporary path of the written file. By convention, if you do not place the ${config.path} variable in any command-line argument or environment variable value, the agent passes the path of the configuration file via the CONFIG_PATH environment variable: # assuming that nri-example command is prepared to receive the configuration # file via the CONFIG_PATH environment variable integrations: - name: nri-example config: name: csvFileExample apis: - name: csvFile file: /Users/hello/test.csv Copy Pass secrets and discovery through config section The main benefit for using a config section instead of hardcoding the full path of an external file is that you can insert ${variable} placeholders to apply our auto-discovery feature and secrets management. Here's an example followed by some explanations: variables: my_credentials: vault: http: url: http://my.vault.host/v1/newengine/data/secret headers: X-Vault-Token: my-vault-token discovery: docker: match: label.service: foo integrations: - name: foo-monitor exec: /opt/foo/bin/monitor --config=${config.path} config: | foo.host=${discovery.ip} foo.port=${discovery.port} foo.user=${my_credentials.user} foo.password=${my_credentials.password} Copy Tip (For more details about the variables and discovery sections, please visit the discovery and secrets management documentation). The above example relies on the following premises: There is a Vault service that allows retrieving a JSON object formed by the user and password fields. There may be a variable number of Docker containers labeled with service=foo, which are accessible from the agent host via a discoverable public IP and Port. The user has configured the foo-monitor integration to monitor all the service=foo labeled containers, which share a common user and password. Each instance of the foo-monitor integration requires executing the /opt/foo/bin/monitor executable, passing the text configuration inside the config section via the --config=<path> command-line argument. As example of workflow, imagine that the Vault invocation returns the following JSON: {\"user\":\"monitorer\",\"password\":\"5up3r53cr3t!\"} Copy At the moment of executing the foo-monitor integration, there are three running containers labeled with service=foo: ip: 10.0.0.3, port: 8080 ip: 10.0.0.3, port: 8081 ip: 10.0.0.3, port: 8082 The agent then creates the following three temporary files, using the contents of the config property as a template, but replacing the ${placeholders} by the acquired variables and discovered items (files' path is invented for the sake of simplicity): First match (/tmp/123_discovered): foo.host=10.0.0.3 foo.port=8080 foo.user=monitorer foo.password=5up3r53cr3t! Copy Second match (/tmp/456_discovered): foo.host=10.0.0.3 foo.port=8081 foo.user=monitorer foo.password=5up3r53cr3t! Copy Third match (/tmp/789_discovered) foo.host=10.0.0.3 foo.port=8082 foo.user=monitorer foo.password=5up3r53cr3t! Copy After the config variable placeholders have been replaced and the temporary files have been created, the /opt/foo/bin/monitor executable is executed three times (one per matched container), replacing the ${config.path} command-line placeholder with the temporary file corresponding to each discovered configuration: First match: /opt/foo/bin/monitor --config=/tmp/123_discovered Second match: /opt/foo/bin/monitor --config=/tmp/456_discovered Third match: /opt/foo/bin/monitor --config=/tmp/789_discovered To ensure security and to minimize the chance of leaking secrets to disk, the agent: Creates the files owned by the agent user, for example, root or nri-agent, depending on the user you have configured to run the agent. Sets read permissions only for the owner. Removes the created files when the integration instance finishes its execution. config_template_path If you want to use the secrets management and discovery in the configuration files that you're passing to the integration executable, but you prefer to keep them as an individual file, you can use the config_template_path: <path> option. It works exactly as in the config section: The agent applies secrets management and discovery to the file contents. The agent creates different temporary files that are passed to the integration via the ${config.path} placeholder (or the CONFIG_PATH environment variable). Example: discovery: docker: match: name: /^redis/ integrations: - name: nri-flex env: CONFIG_FILE: ${config.path} config_template_path: /etc/flex-configs/redis.yml Copy In the above example, the redis.yml external file can contain container discovery variable placeholders, like ${discovery.ip} or ${discovery.port}. Configure how the agent executes your integrations The properties of this section modify the way the Infrastructure agent executes and interacts with the integrations, or the way the agent decorates the integrations' data. integration_user The integration commands run as the same user as the agent (usually root or nri-agent). If due to permission restrictions an integration needs to run as another user, its name must be specified in the integration_user property. Example: integrations: - name: dbus-inventory exec: python my-dbus-script.py integration_user: dbus Copy interval The interval option sets the time between consecutive executions of an integration. The accepted format is an integer immediately followed by a time unit (s for seconds, m for minutes, h for hours). The default is 30s, and the minimum accepted value is 15s. Any value lower than 15s is automatically set to 15s. Example: integrations: - name: nri-nginx env: STATUS_URL: http://127.0.0.1/status STATUS_MODULE: discover interval: 20s Copy inventory_source Any inventory item must be catalogued under a category/source taxonomy. By default, each integration inventory is stored as integration/ + name value (for example, integration/nri-apache, integration/nri-mysql). The inventory_source property allows you to override the default taxonomy of inventory data. Example: integrations: - name: nri-nginx - name: nri-apache exec: - /var/db/newrelic-infra/newrelic-integrations/bin/nri-apache - --inventory inventory_source: config/apache Copy In the above example, the nri-nginx inventory, if any, would be visible in the New Relic UI under the integration/nri-nginx source. The nri-apache inventory would be visible under config/apache. labels labels is a key-value map that allows extra metadata to be provided for the integration. The agent uses those labels to decorate the metrics, events, and inventory that it receives from a given integration instance. Example: integrations: - name: nri-apache inventory_source: config/apache labels: env: production role: load_balancer Copy In the above example, the agent decorates all the metrics and events from the nri-apache instance with the following fields: label.env: production label.role: load_balancer Also, the following entries are added to the integration inventory: config/apache/labels/env: production config/apache/labels/role: load_balancer timeout If an integration has not returned any metric (or a heartbeat message as described below) before the time specified in the timeout value, the agent kills the integration process and restarts it after the corresponding interval. The accepted format is an integer number immediately followed (without spaces) by a time unit (ms for milliseconds, s for seconds, m for minutes, h for hours). If a zero (or negative) timeout value is provided, the integration can run forever without being killed by a timeout expiration. For long-running integrations (integrations that keep running, periodically returning metrics/events/inventory), each time the integration submits a metrics/events/inventory payload, the timeout deadline is restarted. That means that long-running integrations must return a valid JSON payload in an interval that is lower than timeout. Returning an empty JSON ({}) is interpreted as a heart-beat message that restarts the timeout, preventing the long-running integration from being killed, even if they don't have information to report. The default is 120s, and the minimum accepted value is 100ms. Any value lower than 100ms is automatically set to 100ms. Example: integrations: - name: nri-jmx cli_args: JMX_HOST: jmx-host.localnet JMX_PORT: 7096 COLLECTION_FILES: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml\" timeout: 30s Copy working_dir working_dir sets the working directory of the command. If empty or unspecified, the agent runs the command in the Infrastructure agent's current directory. The default is the Infrastructure agent root directory. Example: integrations: - name: my-integration exec: /opt/integration/bin/integration working_dir: /opt/integration/scratch-zone Copy Update older integration configuration In December 2019, the Infrastructure agent version 1.8.0 began using a different configuration format. For details, see Config format differences. The main difference between these formats is that the older configuration format uses two separate configuration files (a INTEGRATION_NAME-definition.yml file and a INTEGRATION_NAME-config.yml file) and the newer version uses a single configuration file. Here are some of the features added by the newer configuration functionality: Flexible configuration via command-line arguments, environment variables, or external files. Ability to group different integrations in the same file. Hot reload: adding a new integration or changing its configuration does not require restarting the agent. Timeouts: if an integration doesn't respond before a user-specified time, the integration process is killed and restarted. Not all on-host integrations come with the newer configuration format, but you can update the configuration to the new format for all on-host integrations to take advantage of the new features. The following YAML shows an example Apache integration configuration using the older configuration format. Note that this configuration will still work with newer agents, but we recommend updating your integrations to take full advantage of features. integration_name: com.newrelic.apache instances: - name: apache-server-metrics command: metrics arguments: status_url: http://127.0.0.1/server-status?auto remote_monitoring: true labels: env: production role: load_balancer - name: apache-server-inventory command: inventory arguments: remote_monitoring: true labels: env: production role: load_balancer Copy To update an older integration configuration to the new format, you must perform two steps: Rename the instances top-level section to integrations. Remove the integration_name top-level section and add it to each integration entry. You are no longer required to keep a separate file for each integration type and you can group your legacy integration entries in the same file as other integrations. The new version of the Apache integration config: integrations: - name: nri-apache env: METRICS: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 15s labels: env: production role: load_balancer - name: nri-apache env: INVENTORY: \"true\" STATUS_URL: http://127.0.0.1/server-status?auto REMOTE_MONITORING: true interval: 60s labels: env: production role: load_balancer inventory_source: config/apache Copy Please note that because the older configuration format doesn't support hot reloading. You will need to restart the Infrastructure agent to remove the old integrations configuration (otherwise the old instances will coexist with the new ones).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.97475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em>: Standard configuration format ",
        "sections": "On-host <em>integrations</em>: Standard configuration format",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": " format is also supported by current <em>Infrastructure</em> agents. For an introduction to configuration, see Config overview. Configuration structure An on-host integration&#x27;s configuration YAML must have an <em>integrations</em> top-level section containing a YAML array, where each entry represents an integration"
      },
      "id": "603e923a196a67581ca83db3"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/infrastructure-integration-dashboards-charts": [
    {
      "sections": [
        "Connect AWS GovCloud to New Relic",
        "Important",
        "Requirements",
        "How to obtain GovCloud credentials for New Relic"
      ],
      "title": "Connect AWS GovCloud to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "ab6a129f8c50643b9af1c135863572d1ab595e30",
      "image": "https://docs.newrelic.com/static/2700987e921c2d686abb7518317cc2e1/49217/AWS-add-user.png",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-govcloud-new-relic/",
      "published_at": "2021-09-27T14:55:47Z",
      "updated_at": "2021-09-20T19:29:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The AWS GovCloud (US) regions are designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem. It is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements. The available set of AWS services is a subset of the AWS ecosystem. New Relic provides you with the confidence to deploy your most critical services on GovCloud, allowing you to monitor and observe your entire ecosystem from New Relic One. Important The AWS CloudWatch metric stream capability isn't available on GovCloud regions. Requirements Requirements include: You must have your AWS account connected to New Relic before connecting GovCloud. If you're using our AWS Lambda monitoring: our newrelic-log-ingestion is not deployed in the AWS Serverless Application Repository for AWS GovCloud; it must be installed manually. For instructions, see Enable Lambda monitoring. AWS integrations supported in GovCloud: ALB/NLB API Gateway Autoscaling CloudTrail DirectConnect DynamoDB EBS EC2 Elasticsearch ELB (Classic) EMR IAM Lambda RDS Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com > Infrastructure > GovCloud. Click on Add AWS GovCloud account. Give your AWS account a name, provide the credentials to connect your account, and click Submit. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then click Save. How to obtain GovCloud credentials for New Relic From the IAM console, click Add user. For the User name, type NewRelicInfrastructure-Integrations. For Select AWS access type, select as Programmatic access. AWS IAM console > Add user: add NewRelicInfrastructure-Integrations as a user. Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Tags (adding tags is optional). Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. AWS IAM console > Add user > Set permissions: select ReadOnlyAccess. On the Tags page, click Next: Review. Review the user detail summary and click Create user. AWS IAM console > Add user > Set permissions > Tags > Review: verify that the new user information is accurate. Your user should be successfully created. Download the user security credentials by clicking on the Download .csv button and then click Close.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com &gt; <em>Infrastructure</em> &gt; GovCloud. Click on Add AWS GovCloud account. Give"
      },
      "id": "603e85bc196a675469a83dcd"
    },
    {
      "sections": [
        "Connect AWS to New Relic infrastructure monitoring",
        "Connect AWS to New Relic",
        "Important",
        "Connect multiple AWS integrations",
        "Connect multiple AWS accounts",
        "Add or edit custom tags",
        "Disconnect your AWS integrations",
        "Regional support"
      ],
      "title": "Connect AWS to New Relic infrastructure monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "a00c91900961871b2c48d88bca610d5457473f11",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring/",
      "published_at": "2021-09-27T14:35:55Z",
      "updated_at": "2021-09-20T19:30:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. If you don't have one already, create a New Relic account. It's free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS services. Learn more in New Relic's CloudWatch solution and AWS CloudWatch blog posts. Follow the steps documented in the AWS CloudWatch metric stream integration to ingest all available CloudWatch metrics. To connect additional API Polling integrations: Go to one.newrelic.com > Infrastructure > AWS. Click on one of the available service tiles. From the IAM console, click Create role, then click Another AWS account. For Account ID, use 754728514883. Check the Require external ID box. For External ID, enter your New Relic account ID. Do not enable the setting to Require MFA (multi-factor authentication). Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Review. Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. For the Role name, enter NewRelicInfrastructure-Integrations, then click Create role. Select the newly created role from the listed roles. On the Role summary page, select and copy the entire Role ARN (required later in this procedure). Configure a Budgets policy: While viewing the Role summary for your new role, select Add inline policy. Create a Custom policy: Enter a policy name (for example, NewRelicBudget), add the following permission statement, and then select Apply policy. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"budgets:ViewBudget\" ], \"Resource\": \"*\" } ] } Copy Return to the New Relic UI to enter your AWS account name and the ARN for the new role. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then Save. Connect multiple AWS integrations To connect multiple AWS integrations to a single New Relic account: If you previously set up an ARN with the more restrictive AmazonEC2ReadOnlyAccess policy, first unlink your existing integration, then create a new one with a broader policy. Follow the instructions to connect your Amazon account to New Relic . Provide the ARN that contains the ReadOnlyAccess policy. Once setup is complete, select the integrations you want to monitor: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Select the checkbox for each integration you want to monitor. Connect multiple AWS accounts By default, the Amazon EC2 AmazonEC2ReadOnlyAccess permission grants New Relic access to all EC2 instances in the individual Amazon account you specify during the setup steps. If you have multiple AWS accounts, follow the steps to connect an AWS account for each AWS account you want to associate with New Relic. Add or edit custom tags New Relic automatically imports custom tags you have added or edited for your AWS resources. Most metrics received via CloudWatch metric streams will have custom tags as dimensions. For API Polling integrations, if you don't see any tags in the Add filter menu of the Filter sets sidebar within a few minutes, delete the integration and try again: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Remove individual integrations or the entire account linkage as needed. Note that not all integrations support tags collection. You can enable (and disable) tags collection in the integration settings. Disconnect your AWS integrations You can disable one or more integrations anytime and still keep your AWS account connected to New Relic. However, New Relic recommends that you do not disable EC2 or EBS monitoring. These two integrations add important metadata to your EC2 instances and EBS volumes in New Relic. To uninstall your services completely from New Relic infrastructure Integrations, unlink your AWS account. Regional support China regions are not supported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.14963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "sections": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS"
      },
      "id": "6045079f196a679cc1960f2d"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-09-26T18:22:50Z",
      "updated_at": "2021-08-27T04:53:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are infrastructure monitoring integrations that can be run directly on your host or server: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including NGINX, MySQL, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.74773,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: cloud and on-host. Cloud <em>integrations</em> Cloud <em>integrations</em>"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations": [
    {
      "sections": [
        "Connect AWS GovCloud to New Relic",
        "Important",
        "Requirements",
        "How to obtain GovCloud credentials for New Relic"
      ],
      "title": "Connect AWS GovCloud to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "ab6a129f8c50643b9af1c135863572d1ab595e30",
      "image": "https://docs.newrelic.com/static/2700987e921c2d686abb7518317cc2e1/49217/AWS-add-user.png",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-govcloud-new-relic/",
      "published_at": "2021-09-27T14:55:47Z",
      "updated_at": "2021-09-20T19:29:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The AWS GovCloud (US) regions are designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem. It is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements. The available set of AWS services is a subset of the AWS ecosystem. New Relic provides you with the confidence to deploy your most critical services on GovCloud, allowing you to monitor and observe your entire ecosystem from New Relic One. Important The AWS CloudWatch metric stream capability isn't available on GovCloud regions. Requirements Requirements include: You must have your AWS account connected to New Relic before connecting GovCloud. If you're using our AWS Lambda monitoring: our newrelic-log-ingestion is not deployed in the AWS Serverless Application Repository for AWS GovCloud; it must be installed manually. For instructions, see Enable Lambda monitoring. AWS integrations supported in GovCloud: ALB/NLB API Gateway Autoscaling CloudTrail DirectConnect DynamoDB EBS EC2 Elasticsearch ELB (Classic) EMR IAM Lambda RDS Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com > Infrastructure > GovCloud. Click on Add AWS GovCloud account. Give your AWS account a name, provide the credentials to connect your account, and click Submit. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then click Save. How to obtain GovCloud credentials for New Relic From the IAM console, click Add user. For the User name, type NewRelicInfrastructure-Integrations. For Select AWS access type, select as Programmatic access. AWS IAM console > Add user: add NewRelicInfrastructure-Integrations as a user. Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Tags (adding tags is optional). Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. AWS IAM console > Add user > Set permissions: select ReadOnlyAccess. On the Tags page, click Next: Review. Review the user detail summary and click Create user. AWS IAM console > Add user > Set permissions > Tags > Review: verify that the new user information is accurate. Your user should be successfully created. Download the user security credentials by clicking on the Download .csv button and then click Close.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.85696,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com &gt; <em>Infrastructure</em> &gt; GovCloud. Click on Add AWS GovCloud account. Give"
      },
      "id": "603e85bc196a675469a83dcd"
    },
    {
      "sections": [
        "Connect AWS to New Relic infrastructure monitoring",
        "Connect AWS to New Relic",
        "Important",
        "Connect multiple AWS integrations",
        "Connect multiple AWS accounts",
        "Add or edit custom tags",
        "Disconnect your AWS integrations",
        "Regional support"
      ],
      "title": "Connect AWS to New Relic infrastructure monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "a00c91900961871b2c48d88bca610d5457473f11",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring/",
      "published_at": "2021-09-27T14:35:55Z",
      "updated_at": "2021-09-20T19:30:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. If you don't have one already, create a New Relic account. It's free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS services. Learn more in New Relic's CloudWatch solution and AWS CloudWatch blog posts. Follow the steps documented in the AWS CloudWatch metric stream integration to ingest all available CloudWatch metrics. To connect additional API Polling integrations: Go to one.newrelic.com > Infrastructure > AWS. Click on one of the available service tiles. From the IAM console, click Create role, then click Another AWS account. For Account ID, use 754728514883. Check the Require external ID box. For External ID, enter your New Relic account ID. Do not enable the setting to Require MFA (multi-factor authentication). Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Review. Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. For the Role name, enter NewRelicInfrastructure-Integrations, then click Create role. Select the newly created role from the listed roles. On the Role summary page, select and copy the entire Role ARN (required later in this procedure). Configure a Budgets policy: While viewing the Role summary for your new role, select Add inline policy. Create a Custom policy: Enter a policy name (for example, NewRelicBudget), add the following permission statement, and then select Apply policy. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"budgets:ViewBudget\" ], \"Resource\": \"*\" } ] } Copy Return to the New Relic UI to enter your AWS account name and the ARN for the new role. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then Save. Connect multiple AWS integrations To connect multiple AWS integrations to a single New Relic account: If you previously set up an ARN with the more restrictive AmazonEC2ReadOnlyAccess policy, first unlink your existing integration, then create a new one with a broader policy. Follow the instructions to connect your Amazon account to New Relic . Provide the ARN that contains the ReadOnlyAccess policy. Once setup is complete, select the integrations you want to monitor: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Select the checkbox for each integration you want to monitor. Connect multiple AWS accounts By default, the Amazon EC2 AmazonEC2ReadOnlyAccess permission grants New Relic access to all EC2 instances in the individual Amazon account you specify during the setup steps. If you have multiple AWS accounts, follow the steps to connect an AWS account for each AWS account you want to associate with New Relic. Add or edit custom tags New Relic automatically imports custom tags you have added or edited for your AWS resources. Most metrics received via CloudWatch metric streams will have custom tags as dimensions. For API Polling integrations, if you don't see any tags in the Add filter menu of the Filter sets sidebar within a few minutes, delete the integration and try again: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Remove individual integrations or the entire account linkage as needed. Note that not all integrations support tags collection. You can enable (and disable) tags collection in the integration settings. Disconnect your AWS integrations You can disable one or more integrations anytime and still keep your AWS account connected to New Relic. However, New Relic recommends that you do not disable EC2 or EBS monitoring. These two integrations add important metadata to your EC2 instances and EBS volumes in New Relic. To uninstall your services completely from New Relic infrastructure Integrations, unlink your AWS account. Regional support China regions are not supported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.14958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "sections": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS"
      },
      "id": "6045079f196a679cc1960f2d"
    },
    {
      "sections": [
        "On-host integration configuration overview",
        "Overview of how configuration works",
        "Configuration file location",
        "Configuration formats"
      ],
      "title": "On-host integration configuration overview",
      "type": "docs",
      "tags": [
        "Create integrations",
        "Infrastructure Integrations SDK",
        "Specifications"
      ],
      "external_id": "b580c10bb0a6142dcb204639762561b65bd6ceb9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/create-integrations/infrastructure-integrations-sdk/specifications/host-integration-configuration-overview/",
      "published_at": "2021-09-27T16:00:43Z",
      "updated_at": "2021-09-27T16:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's on-host integrations send data to the infrastructure agent, which in turn sends that data to New Relic. How integrations interact with the agent is controlled by each integration's config. Understanding more about configuration can help you troubleshoot issues with your on-host integration. Overview of how configuration works New Relic's on-host integrations are external programs executed by the infrastructure agent. Each integration monitors a specific service. An integration has, at minimum, these files: An executable that exports various types of data in a JSON format expected by the agent One or more YAML-format config files (for example, the Apache integration configuration). (We recommend linting YAML config files before use to avoid formatting issues.) Note that in addition to the specific on-host integration's configuration, you can also edit the infrastructure agent's configuration. Configuration file location With standard on-host integration installations, the configuration is located in the infrastructure agent's directory. The agent determines this config location by a setting in its own configuration file. For some implementations, the integration's configuration will be located elsewhere. For example: Services running on Kubernetes: The configuration is located in the Kubernetes integration config file. Services running on Amazon ECS: The configuration is placed in the AWS console. Configuration formats On-host integrations use two configuration formats: Standard: Starting December 2019, infrastructure agent version 1.8.0 began supporting a new format used by some integrations. This format uses a single configuration file and provides other improvements. For more details, see Standard configuration. Legacy: This is the format used by most on-host integrations. This configuration uses two files: a definition file and a configuration file. For more details, see Legacy configuration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.62945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> configuration overview",
        "sections": "On-host <em>integration</em> configuration overview",
        "tags": "<em>Infrastructure</em> <em>Integrations</em> SDK",
        "body": "New Relic&#x27;s on-host <em>integrations</em> send data to the <em>infrastructure</em> agent, which in turn sends that data to New Relic. How <em>integrations</em> interact with the agent is controlled by each integration&#x27;s config. Understanding more about configuration can help you troubleshoot issues with your on-host"
      },
      "id": "6044091d28ccbc95852c60cb"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/understand-use-data-infrastructure-integrations": [
    {
      "sections": [
        "Connect AWS GovCloud to New Relic",
        "Important",
        "Requirements",
        "How to obtain GovCloud credentials for New Relic"
      ],
      "title": "Connect AWS GovCloud to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "ab6a129f8c50643b9af1c135863572d1ab595e30",
      "image": "https://docs.newrelic.com/static/2700987e921c2d686abb7518317cc2e1/49217/AWS-add-user.png",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-govcloud-new-relic/",
      "published_at": "2021-09-27T14:55:47Z",
      "updated_at": "2021-09-20T19:29:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The AWS GovCloud (US) regions are designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem. It is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements. The available set of AWS services is a subset of the AWS ecosystem. New Relic provides you with the confidence to deploy your most critical services on GovCloud, allowing you to monitor and observe your entire ecosystem from New Relic One. Important The AWS CloudWatch metric stream capability isn't available on GovCloud regions. Requirements Requirements include: You must have your AWS account connected to New Relic before connecting GovCloud. If you're using our AWS Lambda monitoring: our newrelic-log-ingestion is not deployed in the AWS Serverless Application Repository for AWS GovCloud; it must be installed manually. For instructions, see Enable Lambda monitoring. AWS integrations supported in GovCloud: ALB/NLB API Gateway Autoscaling CloudTrail DirectConnect DynamoDB EBS EC2 Elasticsearch ELB (Classic) EMR IAM Lambda RDS Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com > Infrastructure > GovCloud. Click on Add AWS GovCloud account. Give your AWS account a name, provide the credentials to connect your account, and click Submit. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then click Save. How to obtain GovCloud credentials for New Relic From the IAM console, click Add user. For the User name, type NewRelicInfrastructure-Integrations. For Select AWS access type, select as Programmatic access. AWS IAM console > Add user: add NewRelicInfrastructure-Integrations as a user. Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Tags (adding tags is optional). Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. AWS IAM console > Add user > Set permissions: select ReadOnlyAccess. On the Tags page, click Next: Review. Review the user detail summary and click Create user. AWS IAM console > Add user > Set permissions > Tags > Review: verify that the new user information is accurate. Your user should be successfully created. Download the user security credentials by clicking on the Download .csv button and then click Close.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.85696,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com &gt; <em>Infrastructure</em> &gt; GovCloud. Click on Add AWS GovCloud account. Give"
      },
      "id": "603e85bc196a675469a83dcd"
    },
    {
      "sections": [
        "Connect AWS to New Relic infrastructure monitoring",
        "Connect AWS to New Relic",
        "Important",
        "Connect multiple AWS integrations",
        "Connect multiple AWS accounts",
        "Add or edit custom tags",
        "Disconnect your AWS integrations",
        "Regional support"
      ],
      "title": "Connect AWS to New Relic infrastructure monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "a00c91900961871b2c48d88bca610d5457473f11",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring/",
      "published_at": "2021-09-27T14:35:55Z",
      "updated_at": "2021-09-20T19:30:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. If you don't have one already, create a New Relic account. It's free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS services. Learn more in New Relic's CloudWatch solution and AWS CloudWatch blog posts. Follow the steps documented in the AWS CloudWatch metric stream integration to ingest all available CloudWatch metrics. To connect additional API Polling integrations: Go to one.newrelic.com > Infrastructure > AWS. Click on one of the available service tiles. From the IAM console, click Create role, then click Another AWS account. For Account ID, use 754728514883. Check the Require external ID box. For External ID, enter your New Relic account ID. Do not enable the setting to Require MFA (multi-factor authentication). Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Review. Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. For the Role name, enter NewRelicInfrastructure-Integrations, then click Create role. Select the newly created role from the listed roles. On the Role summary page, select and copy the entire Role ARN (required later in this procedure). Configure a Budgets policy: While viewing the Role summary for your new role, select Add inline policy. Create a Custom policy: Enter a policy name (for example, NewRelicBudget), add the following permission statement, and then select Apply policy. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"budgets:ViewBudget\" ], \"Resource\": \"*\" } ] } Copy Return to the New Relic UI to enter your AWS account name and the ARN for the new role. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then Save. Connect multiple AWS integrations To connect multiple AWS integrations to a single New Relic account: If you previously set up an ARN with the more restrictive AmazonEC2ReadOnlyAccess policy, first unlink your existing integration, then create a new one with a broader policy. Follow the instructions to connect your Amazon account to New Relic . Provide the ARN that contains the ReadOnlyAccess policy. Once setup is complete, select the integrations you want to monitor: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Select the checkbox for each integration you want to monitor. Connect multiple AWS accounts By default, the Amazon EC2 AmazonEC2ReadOnlyAccess permission grants New Relic access to all EC2 instances in the individual Amazon account you specify during the setup steps. If you have multiple AWS accounts, follow the steps to connect an AWS account for each AWS account you want to associate with New Relic. Add or edit custom tags New Relic automatically imports custom tags you have added or edited for your AWS resources. Most metrics received via CloudWatch metric streams will have custom tags as dimensions. For API Polling integrations, if you don't see any tags in the Add filter menu of the Filter sets sidebar within a few minutes, delete the integration and try again: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Remove individual integrations or the entire account linkage as needed. Note that not all integrations support tags collection. You can enable (and disable) tags collection in the integration settings. Disconnect your AWS integrations You can disable one or more integrations anytime and still keep your AWS account connected to New Relic. However, New Relic recommends that you do not disable EC2 or EBS monitoring. These two integrations add important metadata to your EC2 instances and EBS volumes in New Relic. To uninstall your services completely from New Relic infrastructure Integrations, unlink your AWS account. Regional support China regions are not supported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.14958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "sections": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS"
      },
      "id": "6045079f196a679cc1960f2d"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-09-26T18:22:50Z",
      "updated_at": "2021-08-27T04:53:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are infrastructure monitoring integrations that can be run directly on your host or server: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including NGINX, MySQL, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.74773,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: cloud and on-host. Cloud <em>integrations</em> Cloud <em>integrations</em>"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/use-integration-data-new-relic-dashboards": [
    {
      "sections": [
        "Connect AWS GovCloud to New Relic",
        "Important",
        "Requirements",
        "How to obtain GovCloud credentials for New Relic"
      ],
      "title": "Connect AWS GovCloud to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "ab6a129f8c50643b9af1c135863572d1ab595e30",
      "image": "https://docs.newrelic.com/static/2700987e921c2d686abb7518317cc2e1/49217/AWS-add-user.png",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-govcloud-new-relic/",
      "published_at": "2021-09-27T14:55:47Z",
      "updated_at": "2021-09-20T19:29:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The AWS GovCloud (US) regions are designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem. It is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements. The available set of AWS services is a subset of the AWS ecosystem. New Relic provides you with the confidence to deploy your most critical services on GovCloud, allowing you to monitor and observe your entire ecosystem from New Relic One. Important The AWS CloudWatch metric stream capability isn't available on GovCloud regions. Requirements Requirements include: You must have your AWS account connected to New Relic before connecting GovCloud. If you're using our AWS Lambda monitoring: our newrelic-log-ingestion is not deployed in the AWS Serverless Application Repository for AWS GovCloud; it must be installed manually. For instructions, see Enable Lambda monitoring. AWS integrations supported in GovCloud: ALB/NLB API Gateway Autoscaling CloudTrail DirectConnect DynamoDB EBS EC2 Elasticsearch ELB (Classic) EMR IAM Lambda RDS Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com > Infrastructure > GovCloud. Click on Add AWS GovCloud account. Give your AWS account a name, provide the credentials to connect your account, and click Submit. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then click Save. How to obtain GovCloud credentials for New Relic From the IAM console, click Add user. For the User name, type NewRelicInfrastructure-Integrations. For Select AWS access type, select as Programmatic access. AWS IAM console > Add user: add NewRelicInfrastructure-Integrations as a user. Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Tags (adding tags is optional). Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. AWS IAM console > Add user > Set permissions: select ReadOnlyAccess. On the Tags page, click Next: Review. Review the user detail summary and click Create user. AWS IAM console > Add user > Set permissions > Tags > Review: verify that the new user information is accurate. Your user should be successfully created. Download the user security credentials by clicking on the Download .csv button and then click Close.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.85692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " Redshift Route53 S3 SNS SQS Step Functions Connect AWS GovCloud to New Relic To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. Obtain your credentials. Go to one.newrelic.com &gt; <em>Infrastructure</em> &gt; GovCloud. Click on Add AWS GovCloud account. Give"
      },
      "id": "603e85bc196a675469a83dcd"
    },
    {
      "sections": [
        "Connect AWS to New Relic infrastructure monitoring",
        "Connect AWS to New Relic",
        "Important",
        "Connect multiple AWS integrations",
        "Connect multiple AWS accounts",
        "Add or edit custom tags",
        "Disconnect your AWS integrations",
        "Regional support"
      ],
      "title": "Connect AWS to New Relic infrastructure monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Amazon integrations",
        "Get started"
      ],
      "external_id": "a00c91900961871b2c48d88bca610d5457473f11",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring/",
      "published_at": "2021-09-27T14:35:55Z",
      "updated_at": "2021-09-20T19:30:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Amazon data with New Relic AWS integrations, connect your Amazon account to New Relic. If you don't have one already, create a New Relic account. It's free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS services. Learn more in New Relic's CloudWatch solution and AWS CloudWatch blog posts. Follow the steps documented in the AWS CloudWatch metric stream integration to ingest all available CloudWatch metrics. To connect additional API Polling integrations: Go to one.newrelic.com > Infrastructure > AWS. Click on one of the available service tiles. From the IAM console, click Create role, then click Another AWS account. For Account ID, use 754728514883. Check the Require external ID box. For External ID, enter your New Relic account ID. Do not enable the setting to Require MFA (multi-factor authentication). Attach the Policy: Search for ReadOnlyAccess, select the checkbox for the policy named ReadOnlyAccess, then click Next: Review. Alternatively, you can create your own managed policy and limit the permissions you grant New Relic according to the AWS services you want to monitor. For the Role name, enter NewRelicInfrastructure-Integrations, then click Create role. Select the newly created role from the listed roles. On the Role summary page, select and copy the entire Role ARN (required later in this procedure). Configure a Budgets policy: While viewing the Role summary for your new role, select Add inline policy. Create a Custom policy: Enter a policy name (for example, NewRelicBudget), add the following permission statement, and then select Apply policy. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"budgets:ViewBudget\" ], \"Resource\": \"*\" } ] } Copy Return to the New Relic UI to enter your AWS account name and the ARN for the new role. Select the Amazon Web Services to be monitored with New Relic infrastructure integrations, then Save. Connect multiple AWS integrations To connect multiple AWS integrations to a single New Relic account: If you previously set up an ARN with the more restrictive AmazonEC2ReadOnlyAccess policy, first unlink your existing integration, then create a new one with a broader policy. Follow the instructions to connect your Amazon account to New Relic . Provide the ARN that contains the ReadOnlyAccess policy. Once setup is complete, select the integrations you want to monitor: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Select the checkbox for each integration you want to monitor. Connect multiple AWS accounts By default, the Amazon EC2 AmazonEC2ReadOnlyAccess permission grants New Relic access to all EC2 instances in the individual Amazon account you specify during the setup steps. If you have multiple AWS accounts, follow the steps to connect an AWS account for each AWS account you want to associate with New Relic. Add or edit custom tags New Relic automatically imports custom tags you have added or edited for your AWS resources. Most metrics received via CloudWatch metric streams will have custom tags as dimensions. For API Polling integrations, if you don't see any tags in the Add filter menu of the Filter sets sidebar within a few minutes, delete the integration and try again: Go to one.newrelic.com > Infrastructure > AWS. Select the edit icon. Remove individual integrations or the entire account linkage as needed. Note that not all integrations support tags collection. You can enable (and disable) tags collection in the integration settings. Disconnect your AWS integrations You can disable one or more integrations anytime and still keep your AWS account connected to New Relic. However, New Relic recommends that you do not disable EC2 or EBS monitoring. These two integrations add important metadata to your EC2 instances and EBS volumes in New Relic. To uninstall your services completely from New Relic infrastructure Integrations, unlink your AWS account. Regional support China regions are not supported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.14954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "sections": "Connect AWS to New Relic <em>infrastructure</em> monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "To <em>start</em> receiving Amazon data with New Relic AWS <em>integrations</em>, connect your Amazon account to New Relic. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Connect AWS to New Relic Important AWS CloudWatch metric streams is now the recommended solution to monitor AWS"
      },
      "id": "6045079f196a679cc1960f2d"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-09-26T18:22:50Z",
      "updated_at": "2021-08-27T04:53:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are infrastructure monitoring integrations that can be run directly on your host or server: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including NGINX, MySQL, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.74771,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: cloud and on-host. Cloud <em>integrations</em> Cloud <em>integrations</em>"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " to install our New Relic One <em>integration</em> with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to <em>get</em> deeper insight into your <em>Kubernetes</em> clusters and workloads with just one install command. No language agents required. Want to try out our <em>Kubernetes</em>"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-09-26T22:09:32Z",
      "updated_at": "2021-09-07T23:26:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.17 to 1.19 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Kubernetes cluster VMware Tanzu Compatible with VMware Tanzu (Pivotal Platform) version 2.5 to 2.11, and Ops Manager version 2.5 to 2.10 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: A New Relic account. Don't have one? Sign up for free. No credit card required. Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.8 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For detailed instructions about how to install our integration using Helm, see Manual install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.72272,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-09-27T15:12:44Z",
      "updated_at": "2021-09-27T15:12:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. macOS (Beta): 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.21 Red Hat Enterprise Linux (RHEL) Version 6 or higher Oracle Linux Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS macOS 10.14 (Mohave), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.40332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the <em>Kubernetes</em> <em>integration</em>. For ECS clusters, deploy the ECS <em>integration</em>. Unique hostname The infrastructure agent uses the hostname"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    }
  ],
  "/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.7592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " to install our New Relic One <em>integration</em> with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to <em>get</em> deeper insight into your <em>Kubernetes</em> clusters and workloads with just one install command. No language agents required. Want to try out our <em>Kubernetes</em>"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Introduction to the Kubernetes integration",
        "Get started: Install the Kubernetes integration",
        "Tip",
        "Why it matters",
        "Navigate all your Kubernetes events",
        "Bring your cluster logs to New Relic",
        "Check the source code"
      ],
      "title": "Introduction to the Kubernetes integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "c641d1367f1f8fd2b589a2707112759becae609b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration/",
      "published_at": "2021-09-27T01:45:38Z",
      "updated_at": "2021-09-05T01:49:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration gives you full observability into the health and performance of your environment, no matter whether you run Kubernetes on-premises or in the cloud. With our cluster explorer, you can cut through layers of complexity to see how your cluster is performing, from the heights of the control plane down to applications running on a single pod. one.newrelic.com > Kubernetes cluster explorer: The cluster explorer is our powerful, fully visual answer to the challenges associated with running Kubernetes at a large scale. You can see the power of the Kubernetes integration in the cluster explorer, where the full picture of a cluster is made available on a single screen: nodes and pods are visualized according to their health and performance, with pending and alerting nodes in the innermost circles. Predefined alert conditions help you troubleshoot issues right from the start. Clicking each node reveals its status and how each app is performing. Get started: Install the Kubernetes integration We have an automated installer to help you with many types of installations: servers, virtual machines, and unprivileged environments. It can also help you with installations in managed services or platforms, but you'll need to review a few preliminary notes before getting started. Our automated installer will generate either a helm command or a set of plain manifests for you to install. Our automated installer: Allows users to select the cluster name and namespace for the installation. Allows users to selectively enable or disable bundling of Kube-state-metrics, a dependency of the Kubernetes integration. Allows users to seamlessly install our other products related to Kubernetes such as: Kubernetes events monitoring In-cluster prometheus services monitoring Service instrumentation without code changes using Pixie Automatically fills the required properties with the license keys the integration needs to work. Read the install docs Start the installer Tip If your New Relic account is in the EU region, access the automated installer from one.eu.newrelic.com. Why it matters Governing the complexity of Kubernetes can be challenging; there's so much going on at any given moment, with containers being created and deleted in a matter of minutes, applications crashing, and resources being consumed unexpectedly. Our integration helps you navigate Kubernetes abstractions across on-premises, cloud, and hybrid deployments. In New Relic, you can build your own charts and query all your Kubernetes data, which our integration collects by instrumenting the container orchestration layer. This gives you additional insight into nodes, namespaces, deployments, replica sets, pods, and containers. one.newrelic.com > Dashboards: Using the query builder you can turn any query on Kubernetes data to clear visuals. With the Kubernetes integration you can also: Link your APM data to Kubernetes to measure the performance of your web and mobile applications, with metrics such as request rate, throughput, error rate, and availability. Monitor services running on Kubernetes, such as Apache, NGINX, Cassandra, and many more (see our tutorial for monitoring Redis on Kubernetes). Create new alert policies and alert conditions based on your Kubernetes data, or extend the predefined alert conditions. These features are in addition to the data New Relic already reports for containerized processes running on instrumented hosts. Navigate all your Kubernetes events The Kubernetes events integration, which is installed separately, watches for events happening in your Kubernetes clusters and sends those events to New Relic. Events data is then visualized in the cluster explorer. To set it up, check the Kubernetes events box in step 3 of our install wizard, or follow the instructions. one.newrelic.com > Kubernetes cluster explorer > Events: Browse and filter all your Kubernetes events, and dig into application logs and infrastructure data. Bring your cluster logs to New Relic Our Kubernetes plugin for log monitoring can collect all your cluster's logs and send them to our platform, so that you can set up new alerts and charts. To set it up, check the Log data box in step 3 of our install wizard, or follow the instructions. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or you can create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.03198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>Kubernetes</em> <em>integration</em>",
        "sections": "<em>Get</em> <em>started</em>: Install the <em>Kubernetes</em> <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " from the <em>start</em>. Clicking each node reveals its status and how each app is performing. <em>Get</em> <em>started</em>: Install the <em>Kubernetes</em> <em>integration</em> We have an automated installer to help you with many types of installations: servers, virtual machines, and unprivileged environments. It can also help you"
      },
      "id": "6043a212196a678d86960f46"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-09-27T15:12:44Z",
      "updated_at": "2021-09-27T15:12:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. macOS (Beta): 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.21 Red Hat Enterprise Linux (RHEL) Version 6 or higher Oracle Linux Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS macOS 10.14 (Mohave), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.40323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "), 10.15 (Catalina), 11 (Big Sur). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the <em>Kubernetes</em> <em>integration</em>. For ECS clusters, deploy the ECS <em>integration</em>. Unique hostname The infrastructure agent uses the hostname"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    },
    {
      "sections": [
        "Install the Kubernetes integration manually using Helm",
        "Compatibility and requirements",
        "Install Kubernetes integration with Helm",
        "Install with Helm 3 and nri-bundle (recommended)",
        "Installing and configuring nri-bundle with Helm",
        "Install with Helm 2 and nri-bundle (legacy)",
        "Installation instructions for Helm 2",
        "Important",
        "Tip",
        "Helm configuration options",
        "Upgrade using Helm",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Install the Kubernetes integration manually using Helm",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "a3e4c960777df00f17ce0e4b0d1083612bdca527",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm/",
      "published_at": "2021-09-26T22:10:36Z",
      "updated_at": "2021-09-14T07:25:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Helm is a package manager on top of Kubernetes. It facilitates installation, upgrades, or revision tracking, and it manages dependencies for the services that you install in Kubernetes. To install the integration using Helm, we recommend our Kubernetes automated installer, which will prompt for almost all configuration options and autopopulate secrets and values for you. Additionally, our automated installer also allows to install our integration as plain manifests rather than a Helm release. See Kubernetes integration: install and configure for more details about how to use our automated installer. Start the installer This page describes in more depth how to install and configure the New Relic integration without using the automated installer. Compatibility and requirements Make sure Helm is installed on your machine. We strongly recommend using Helm 3 to manage the Kubernetes integration. Our charts are also compatible with Helm 2, but support for it might be removed in the future. To install the Kubernetes integration using Helm, you will need your New Relic account license key and your Kubernetes cluster's name: Find and copy your New Relic license key. Find the name of your cluster with this command: kubectl config current-context Copy Note this values somewhere safe as you will need them later during the installation process. Install Kubernetes integration with Helm Install with Helm 3 and nri-bundle (recommended) New Relic has several charts for the different components which offer different features for the platform: newrelic-infrastructure: Contains the main Kubernetes integration and the infrastructure agent. This is the core component for the New Relic Kubernetes experience, responsible of reporting most of the data that is surfaced in dashboard and the Kubernetes Cluster Explorer. newrelic-logging: Provides a DaemonSet with New Relic's Fluent Bit output plugin to easily forward your logs to New Relic. nri-kube-events: Collects and reports cluster events (such as kubectl get events) to New Relic. nri-prometheus: New Relic's Prometheus OpenMetrics Integration, automatically scrapes Prometheus endpoints present in the cluser and reports metrics to New Relic. nri-metadata-injection: Sets up a minimal MutatingAdmissionWebhook that injects a couple of environment to containers. These contain metadata about the cluster and New Relic installation and will be later picked up by applications instrumented using APM, allowing to correlate APM and infrastructure data. nri-statsd: New Relic StatsD integration. Additionally, New Relic provides nri-bundle, a chart which pulls a selectable set of the charts mentioned above. nri-bundle can also install Kube State Metrics and Pixie for you if needed. While it is possible to install those charts separately, we strongly recommend using the nri-bundle chart for Kubernetes deployments, as it ensures that values across all the charts are consistent and provides full control over which components are installed, as well as the possibility to configure all of them as Helm dependencies. This is the same chart that is used and referenced by our automated installer. Installing and configuring nri-bundle with Helm Ensure you are using the appropriate context in the machine where you will run Helm and kubectl: You can check the available contexts with: kubectl config get-contexts Copy And switch to the desired context using: kubectl config use-context CONTEXT_NAME Copy Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. Notice that we are specifying --dry-run and --debug, so nothing will be installed in this step: helm upgrade --install newrelic newrelic/nri-bundle \\ --dry-run \\ --debug \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Please notice and adjust the following flags: global.licenseKey=<var>YOUR_NEW_RELIC_LICENSE_KEY</var>: Must be set to a valid License Key for your account. global.cluster=<var>K8S_CLUSTER_NAME</var>: Is used to identify the cluster in the New Relic UI, so should be a descriptive value not used by any other Kubernetes cluster configured in your New Relic account. ksm.enabled=<mark>true</mark>: Setting this to true will automatically install Kube State Metrics (KSM) for you, which is required for our integration to run. You can set this to false if KSM is already present in your cluster, even if it is on a different namespace. newrelic-infrastructure.privileged=<mark>true</mark>: Can be set to false to install a trimmed down version of our integration that does not require extra privileges, such as hostPath mounts or running containers as root. Please note that this will disable detailed process collection from the host. For performance reasons, our logging solution still requires hostPath mounts, regardless of the value of this flag. If this is not allowedin your cluster, you will need to disable the logging solution by specifying logging.enabled=false. prometheus.enabled=true: Will deploy our Prometheus OpenMetrics integration, which automatically collects data from prometheus endpoints present in the cluster. webhook.enabled=true: Will install our minimal webhook, which adds environment variables that, in turn, allows linking applications instrumented with APM with infrastructure data. Our chart has a comprehensive set of flags and tunables that can be edited to configure our solution to your particular needs. For a full list of all the flags that can be configured, please check the chart's README and the default values.yaml file. Install the Kubernetes integration by running the customized command without --debug and --dry-run: helm upgrade --install newrelic newrelic/nri-bundle \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl -n newrelic get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node for newrelic-infrastructure, as well as one Deployment and one pod for any other component that you have enabled. Install with Helm 2 and nri-bundle (legacy) Installation instructions for Helm 2 Important Helm 2 has been deprecated and New Relic does not recommend using it for deployments. Instructions in this section are provided for legacy systems only. To install using Helm 2: Ensure that Helm 2, including their cluster-side components (i.e. Tiller) are properly installed and configured. Please check the official documentation for more details. Set the cluster where you want to install the agent: kubectl config set-cluster DESIRED_CLUSTER Copy To see the available clusters, run kubectl config get-clusters Make sure that kube-state-metrics is installed on your machine: kubectl get deployment --all-namespaces | grep kube-state-metrics Copy If it's not installed, follow the instructions in the kube-state-metrics GitHub repo to install it. Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. This step uses the --dry-run and --debug switches and therefore the agent is not installed. helm install newrelic/newrelic-infrastructure \\ --dry-run \\ --debug \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Install the New Relic Kubernetes integration: helm install newrelic/newrelic-infrastructure \\ --set licenseKey=your_new_relic_license_key \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Tip Note that the --dry-run and --debug switches have been removed. Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node. Helm configuration options When you install or upgrade the Kubernetes integration with Helm using the command line, you can pass your configuration variables with the --set flag. helm install newrelic/newrelic-infrastructure \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=YOUR_CLUSTER_NAME Copy A full list of the configuration parameters can be found in the newrelic-infrastructure chart README Upgrade using Helm To update your Kubernetes integration installed via Helm: Update the local chart repository: helm repo update Copy Update the release by running again the appropriate helm upgrade --install ... command in the section above. Monitor services running on Kubernetes After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.67035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "Helm is a package manager on top of <em>Kubernetes</em>. It facilitates <em>installation</em>, upgrades, or revision tracking, and it manages dependencies for the services that you install in <em>Kubernetes</em>. To install the <em>integration</em> using Helm, we recommend our <em>Kubernetes</em> automated installer, which will prompt"
      },
      "id": "603eb326e7b9d2d5f82a080a"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/configure-kubernetes-proxy": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.25003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-fargate-integration": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 952.9669,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Amazon <em>EKS</em> <em>Fargate</em>",
        "body": " the version of kubectl provided by AWS. Amazon <em>EKS</em> <em>Fargate</em> Installation on <em>EKS</em> <em>Fargate</em> clusters requires dedicated steps, which are detailed in our <em>fargate</em> installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/06/monitoring-amazon-eks-on-aws-fargate/",
      "sections": [
        "Monitor Amazon EKS on AWS Fargate integration with our public beta"
      ],
      "published_at": "2021-09-27T16:26:50Z",
      "title": "Monitor Amazon EKS on AWS Fargate integration with our public beta",
      "updated_at": "2021-07-07T14:12:51Z",
      "type": "docs",
      "external_id": "a7899b6302aa05b943053c2230e2787799a0fef4",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "We are introducing New Relic's integration for Amazon EKS on AWS Fargate public beta. If you are interested in checking out the beta, please follow the steps found in the documentation. Our EKS Fargate integration supports any Fargate setup, whether the cluster is only composed of Fargate nodes or if it also coexists with EC2 nodes. The integration is also compatible with the New Relic One Kubernetes cluster explorer, providing a holistic view of a Kubernetes cluster and rapid troubleshooting. We've also improved the Kubernetes dashboard to list Fargate nodes and distinguish between standard and Fargate serverless nodes. Check it out today.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 774.0972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor Amazon <em>EKS</em> on AWS <em>Fargate</em> integration with our public beta",
        "sections": "Monitor Amazon <em>EKS</em> on AWS <em>Fargate</em> integration with our public beta",
        "body": "We are introducing New Relic&#x27;s integration for Amazon <em>EKS</em> on AWS <em>Fargate</em> public beta. If you are interested in checking out the beta, please follow the steps found in the documentation. Our <em>EKS</em> <em>Fargate</em> integration supports any <em>Fargate</em> setup, whether the cluster is only composed of <em>Fargate</em> nodes"
      },
      "id": "60e5b66364441f2e58c42399"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-09-26T22:09:32Z",
      "updated_at": "2021-09-07T23:26:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.17 to 1.19 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Kubernetes cluster VMware Tanzu Compatible with VMware Tanzu (Pivotal Platform) version 2.5 to 2.11, and Ops Manager version 2.5 to 2.10 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: A New Relic account. Don't have one? Sign up for free. No credit card required. Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.8 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For detailed instructions about how to install our integration using Helm, see Manual install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 329.05707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ", depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.17 to 1.19 Kubernetes cluster <em>EKS</em> (EC2 nodes or <em>Fargate</em>) Compatible with version 1.11 or higher Kubernetes"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.25003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61261,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.24997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration manually using Helm",
        "Compatibility and requirements",
        "Install Kubernetes integration with Helm",
        "Install with Helm 3 and nri-bundle (recommended)",
        "Installing and configuring nri-bundle with Helm",
        "Install with Helm 2 and nri-bundle (legacy)",
        "Installation instructions for Helm 2",
        "Important",
        "Tip",
        "Helm configuration options",
        "Upgrade using Helm",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Install the Kubernetes integration manually using Helm",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "a3e4c960777df00f17ce0e4b0d1083612bdca527",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm/",
      "published_at": "2021-09-26T22:10:36Z",
      "updated_at": "2021-09-14T07:25:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Helm is a package manager on top of Kubernetes. It facilitates installation, upgrades, or revision tracking, and it manages dependencies for the services that you install in Kubernetes. To install the integration using Helm, we recommend our Kubernetes automated installer, which will prompt for almost all configuration options and autopopulate secrets and values for you. Additionally, our automated installer also allows to install our integration as plain manifests rather than a Helm release. See Kubernetes integration: install and configure for more details about how to use our automated installer. Start the installer This page describes in more depth how to install and configure the New Relic integration without using the automated installer. Compatibility and requirements Make sure Helm is installed on your machine. We strongly recommend using Helm 3 to manage the Kubernetes integration. Our charts are also compatible with Helm 2, but support for it might be removed in the future. To install the Kubernetes integration using Helm, you will need your New Relic account license key and your Kubernetes cluster's name: Find and copy your New Relic license key. Find the name of your cluster with this command: kubectl config current-context Copy Note this values somewhere safe as you will need them later during the installation process. Install Kubernetes integration with Helm Install with Helm 3 and nri-bundle (recommended) New Relic has several charts for the different components which offer different features for the platform: newrelic-infrastructure: Contains the main Kubernetes integration and the infrastructure agent. This is the core component for the New Relic Kubernetes experience, responsible of reporting most of the data that is surfaced in dashboard and the Kubernetes Cluster Explorer. newrelic-logging: Provides a DaemonSet with New Relic's Fluent Bit output plugin to easily forward your logs to New Relic. nri-kube-events: Collects and reports cluster events (such as kubectl get events) to New Relic. nri-prometheus: New Relic's Prometheus OpenMetrics Integration, automatically scrapes Prometheus endpoints present in the cluser and reports metrics to New Relic. nri-metadata-injection: Sets up a minimal MutatingAdmissionWebhook that injects a couple of environment to containers. These contain metadata about the cluster and New Relic installation and will be later picked up by applications instrumented using APM, allowing to correlate APM and infrastructure data. nri-statsd: New Relic StatsD integration. Additionally, New Relic provides nri-bundle, a chart which pulls a selectable set of the charts mentioned above. nri-bundle can also install Kube State Metrics and Pixie for you if needed. While it is possible to install those charts separately, we strongly recommend using the nri-bundle chart for Kubernetes deployments, as it ensures that values across all the charts are consistent and provides full control over which components are installed, as well as the possibility to configure all of them as Helm dependencies. This is the same chart that is used and referenced by our automated installer. Installing and configuring nri-bundle with Helm Ensure you are using the appropriate context in the machine where you will run Helm and kubectl: You can check the available contexts with: kubectl config get-contexts Copy And switch to the desired context using: kubectl config use-context CONTEXT_NAME Copy Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. Notice that we are specifying --dry-run and --debug, so nothing will be installed in this step: helm upgrade --install newrelic newrelic/nri-bundle \\ --dry-run \\ --debug \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Please notice and adjust the following flags: global.licenseKey=<var>YOUR_NEW_RELIC_LICENSE_KEY</var>: Must be set to a valid License Key for your account. global.cluster=<var>K8S_CLUSTER_NAME</var>: Is used to identify the cluster in the New Relic UI, so should be a descriptive value not used by any other Kubernetes cluster configured in your New Relic account. ksm.enabled=<mark>true</mark>: Setting this to true will automatically install Kube State Metrics (KSM) for you, which is required for our integration to run. You can set this to false if KSM is already present in your cluster, even if it is on a different namespace. newrelic-infrastructure.privileged=<mark>true</mark>: Can be set to false to install a trimmed down version of our integration that does not require extra privileges, such as hostPath mounts or running containers as root. Please note that this will disable detailed process collection from the host. For performance reasons, our logging solution still requires hostPath mounts, regardless of the value of this flag. If this is not allowedin your cluster, you will need to disable the logging solution by specifying logging.enabled=false. prometheus.enabled=true: Will deploy our Prometheus OpenMetrics integration, which automatically collects data from prometheus endpoints present in the cluster. webhook.enabled=true: Will install our minimal webhook, which adds environment variables that, in turn, allows linking applications instrumented with APM with infrastructure data. Our chart has a comprehensive set of flags and tunables that can be edited to configure our solution to your particular needs. For a full list of all the flags that can be configured, please check the chart's README and the default values.yaml file. Install the Kubernetes integration by running the customized command without --debug and --dry-run: helm upgrade --install newrelic newrelic/nri-bundle \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl -n newrelic get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node for newrelic-infrastructure, as well as one Deployment and one pod for any other component that you have enabled. Install with Helm 2 and nri-bundle (legacy) Installation instructions for Helm 2 Important Helm 2 has been deprecated and New Relic does not recommend using it for deployments. Instructions in this section are provided for legacy systems only. To install using Helm 2: Ensure that Helm 2, including their cluster-side components (i.e. Tiller) are properly installed and configured. Please check the official documentation for more details. Set the cluster where you want to install the agent: kubectl config set-cluster DESIRED_CLUSTER Copy To see the available clusters, run kubectl config get-clusters Make sure that kube-state-metrics is installed on your machine: kubectl get deployment --all-namespaces | grep kube-state-metrics Copy If it's not installed, follow the instructions in the kube-state-metrics GitHub repo to install it. Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. This step uses the --dry-run and --debug switches and therefore the agent is not installed. helm install newrelic/newrelic-infrastructure \\ --dry-run \\ --debug \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Install the New Relic Kubernetes integration: helm install newrelic/newrelic-infrastructure \\ --set licenseKey=your_new_relic_license_key \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Tip Note that the --dry-run and --debug switches have been removed. Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node. Helm configuration options When you install or upgrade the Kubernetes integration with Helm using the command line, you can pass your configuration variables with the --set flag. helm install newrelic/newrelic-infrastructure \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=YOUR_CLUSTER_NAME Copy A full list of the configuration parameters can be found in the newrelic-infrastructure chart README Upgrade using Helm To update your Kubernetes integration installed via Helm: Update the local chart repository: helm repo update Copy Update the release by running again the appropriate helm upgrade --install ... command in the section above. Monitor services running on Kubernetes After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.67029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "Helm is a package manager on top of <em>Kubernetes</em>. It facilitates <em>installation</em>, upgrades, or revision tracking, and it manages dependencies for the services that you install in <em>Kubernetes</em>. To install the <em>integration</em> using Helm, we recommend our <em>Kubernetes</em> automated installer, which will prompt"
      },
      "id": "603eb326e7b9d2d5f82a080a"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure": [
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.24997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    },
    {
      "sections": [
        "Install the Kubernetes integration manually using Helm",
        "Compatibility and requirements",
        "Install Kubernetes integration with Helm",
        "Install with Helm 3 and nri-bundle (recommended)",
        "Installing and configuring nri-bundle with Helm",
        "Install with Helm 2 and nri-bundle (legacy)",
        "Installation instructions for Helm 2",
        "Important",
        "Tip",
        "Helm configuration options",
        "Upgrade using Helm",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Install the Kubernetes integration manually using Helm",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "a3e4c960777df00f17ce0e4b0d1083612bdca527",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm/",
      "published_at": "2021-09-26T22:10:36Z",
      "updated_at": "2021-09-14T07:25:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Helm is a package manager on top of Kubernetes. It facilitates installation, upgrades, or revision tracking, and it manages dependencies for the services that you install in Kubernetes. To install the integration using Helm, we recommend our Kubernetes automated installer, which will prompt for almost all configuration options and autopopulate secrets and values for you. Additionally, our automated installer also allows to install our integration as plain manifests rather than a Helm release. See Kubernetes integration: install and configure for more details about how to use our automated installer. Start the installer This page describes in more depth how to install and configure the New Relic integration without using the automated installer. Compatibility and requirements Make sure Helm is installed on your machine. We strongly recommend using Helm 3 to manage the Kubernetes integration. Our charts are also compatible with Helm 2, but support for it might be removed in the future. To install the Kubernetes integration using Helm, you will need your New Relic account license key and your Kubernetes cluster's name: Find and copy your New Relic license key. Find the name of your cluster with this command: kubectl config current-context Copy Note this values somewhere safe as you will need them later during the installation process. Install Kubernetes integration with Helm Install with Helm 3 and nri-bundle (recommended) New Relic has several charts for the different components which offer different features for the platform: newrelic-infrastructure: Contains the main Kubernetes integration and the infrastructure agent. This is the core component for the New Relic Kubernetes experience, responsible of reporting most of the data that is surfaced in dashboard and the Kubernetes Cluster Explorer. newrelic-logging: Provides a DaemonSet with New Relic's Fluent Bit output plugin to easily forward your logs to New Relic. nri-kube-events: Collects and reports cluster events (such as kubectl get events) to New Relic. nri-prometheus: New Relic's Prometheus OpenMetrics Integration, automatically scrapes Prometheus endpoints present in the cluser and reports metrics to New Relic. nri-metadata-injection: Sets up a minimal MutatingAdmissionWebhook that injects a couple of environment to containers. These contain metadata about the cluster and New Relic installation and will be later picked up by applications instrumented using APM, allowing to correlate APM and infrastructure data. nri-statsd: New Relic StatsD integration. Additionally, New Relic provides nri-bundle, a chart which pulls a selectable set of the charts mentioned above. nri-bundle can also install Kube State Metrics and Pixie for you if needed. While it is possible to install those charts separately, we strongly recommend using the nri-bundle chart for Kubernetes deployments, as it ensures that values across all the charts are consistent and provides full control over which components are installed, as well as the possibility to configure all of them as Helm dependencies. This is the same chart that is used and referenced by our automated installer. Installing and configuring nri-bundle with Helm Ensure you are using the appropriate context in the machine where you will run Helm and kubectl: You can check the available contexts with: kubectl config get-contexts Copy And switch to the desired context using: kubectl config use-context CONTEXT_NAME Copy Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. Notice that we are specifying --dry-run and --debug, so nothing will be installed in this step: helm upgrade --install newrelic newrelic/nri-bundle \\ --dry-run \\ --debug \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Please notice and adjust the following flags: global.licenseKey=<var>YOUR_NEW_RELIC_LICENSE_KEY</var>: Must be set to a valid License Key for your account. global.cluster=<var>K8S_CLUSTER_NAME</var>: Is used to identify the cluster in the New Relic UI, so should be a descriptive value not used by any other Kubernetes cluster configured in your New Relic account. ksm.enabled=<mark>true</mark>: Setting this to true will automatically install Kube State Metrics (KSM) for you, which is required for our integration to run. You can set this to false if KSM is already present in your cluster, even if it is on a different namespace. newrelic-infrastructure.privileged=<mark>true</mark>: Can be set to false to install a trimmed down version of our integration that does not require extra privileges, such as hostPath mounts or running containers as root. Please note that this will disable detailed process collection from the host. For performance reasons, our logging solution still requires hostPath mounts, regardless of the value of this flag. If this is not allowedin your cluster, you will need to disable the logging solution by specifying logging.enabled=false. prometheus.enabled=true: Will deploy our Prometheus OpenMetrics integration, which automatically collects data from prometheus endpoints present in the cluster. webhook.enabled=true: Will install our minimal webhook, which adds environment variables that, in turn, allows linking applications instrumented with APM with infrastructure data. Our chart has a comprehensive set of flags and tunables that can be edited to configure our solution to your particular needs. For a full list of all the flags that can be configured, please check the chart's README and the default values.yaml file. Install the Kubernetes integration by running the customized command without --debug and --dry-run: helm upgrade --install newrelic newrelic/nri-bundle \\ --namespace newrelic --create-namespace \\ --set global.licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set global.cluster=K8S_CLUSTER_NAME \\ --set ksm.enabled= true \\ --set newrelic-infrastructure.privileged= true \\ --set infrastructure.enabled=true \\ --set prometheus.enabled=true \\ --set webhook.enabled=true \\ --set kubeEvents.enabled=true \\ --set logging.enabled=true Copy Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl -n newrelic get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node for newrelic-infrastructure, as well as one Deployment and one pod for any other component that you have enabled. Install with Helm 2 and nri-bundle (legacy) Installation instructions for Helm 2 Important Helm 2 has been deprecated and New Relic does not recommend using it for deployments. Instructions in this section are provided for legacy systems only. To install using Helm 2: Ensure that Helm 2, including their cluster-side components (i.e. Tiller) are properly installed and configured. Please check the official documentation for more details. Set the cluster where you want to install the agent: kubectl config set-cluster DESIRED_CLUSTER Copy To see the available clusters, run kubectl config get-clusters Make sure that kube-state-metrics is installed on your machine: kubectl get deployment --all-namespaces | grep kube-state-metrics Copy If it's not installed, follow the instructions in the kube-state-metrics GitHub repo to install it. Add the New Relic Helm charts repo: helm repo add newrelic https://helm-charts.newrelic.com Copy Make sure everything is configured properly in the chart by running the following command. This step uses the --dry-run and --debug switches and therefore the agent is not installed. helm install newrelic/newrelic-infrastructure \\ --dry-run \\ --debug \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Install the New Relic Kubernetes integration: helm install newrelic/newrelic-infrastructure \\ --set licenseKey=your_new_relic_license_key \\ --set cluster=K8S_CLUSTER_NAME \\ --set config.custom_attributes.cluster=K8S_CLUSTER_NAME Copy Tip Note that the --dry-run and --debug switches have been removed. Wait a few seconds, then check that the DaemonSet and pods have been created: kubectl get daemonsets,pods Copy Make sure you see a DaemonSet, and one pod per node. Helm configuration options When you install or upgrade the Kubernetes integration with Helm using the command line, you can pass your configuration variables with the --set flag. helm install newrelic/newrelic-infrastructure \\ --set licenseKey=YOUR_NEW_RELIC_LICENSE_KEY \\ --set cluster=YOUR_CLUSTER_NAME Copy A full list of the configuration parameters can be found in the newrelic-infrastructure chart README Upgrade using Helm To update your Kubernetes integration installed via Helm: Update the local chart repository: helm repo update Copy Update the release by running again the appropriate helm upgrade --install ... command in the section above. Monitor services running on Kubernetes After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.67029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> manually using Helm",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "Helm is a package manager on top of <em>Kubernetes</em>. It facilitates <em>installation</em>, upgrades, or revision tracking, and it manages dependencies for the services that you install in <em>Kubernetes</em>. To install the <em>integration</em> using Helm, we recommend our <em>Kubernetes</em> automated installer, which will prompt"
      },
      "id": "603eb326e7b9d2d5f82a080a"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/kubernetes-integration-recommended-alert-policy": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.24994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.24612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> <em>events</em>, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.9306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.95345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/kubernetes-events/kubernetes-integration-predefined-alert-policy": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.61232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " the version of kubectl provided by AWS. Amazon EKS Fargate <em>Installation</em> on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate <em>installation</em> docs. Google <em>Kubernetes</em> Engine (GKE) The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In GKE, master nodes are managed by Google"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.24988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "To ease future <em>installations</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic provides Control Plane support for your <em>Kubernetes</em> <em>integration</em>, allowing you to monitor and collect metrics from your cluster&#x27;s Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from"
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.89526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "<em>Install</em> the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> <em>installation</em> for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes": [
    {
      "sections": [
        "Link your applications to Kubernetes",
        "Tip",
        "Compatibility and requirements",
        "Kubernetes requirements",
        "Network requirements",
        "APM agent compatibility",
        "Openshift requirements",
        "Important",
        "Configure the injection of metadata",
        "Default configuration",
        "Custom configuration",
        "Manage custom certificates",
        "Validate the injection of metadata",
        "Disable the injection of metadata",
        "Troubleshooting"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "2ae58989813695b48f4924529d6fd6ea17e5f6c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes/",
      "published_at": "2021-09-26T22:13:39Z",
      "updated_at": "2021-05-28T06:30:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can surface Kubernetes metadata and link it to your APM agents as distributed traces to explore performance issues and troubleshoot transaction errors. For more information, see this New Relic blog post. You can quickly start monitoring Kubernetes clusters using Auto-telemetry with Pixie, which is currently a beta release. This Pixie integration into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our Kubernetes metadata injection project is open source. Here's the code to link APM and infrastructure data and the code to automatically manage certificates. Compatibility and requirements Before linking Kubernetes metadata to your APM agents, make sure you meet the following requirements: Kubernetes requirements Network requirements APM agent compatibility OpenShift requirements Kubernetes requirements To link your applications and Kubernetes, your cluster must have the MutatingAdmissionWebhook controller enabled, which requires Kubernetes 1.9 or higher. To verify that your cluster is compatible, run the following command: kubectl api-versions | grep admissionregistration.k8s.io/v1beta1 admissionregistration.k8s.io/v1beta1 Copy If you see a different result, follow the Kubernetes documentation to enable admission control in your cluster. Network requirements For Kubernetes to speak to our MutatingAdmissionWebhook, the master node (or the API server container, depending on how the cluster is set up) should be allowed egress for HTTPS traffic on port 443 to pods in all of the other nodes in the cluster. This might require specific configuration depending on how the infrastructure is set up (on-premises, AWS, Google Cloud, etc). Tip Until Kubernetes v1.14, users were only allowed to register admission webhooks on port 443. Since v1.15 it's possible to register them on different ports. To ensure backward compatibility, the webhook is registered by default on port 443 in the YAML config file we distribute. APM agent compatibility The following New Relic agents collect Kubernetes metadata: Go 2.3.0 or higher Java 4.10.0 or higher Node.js 5.3.0 or higher Python 4.14.0 or higher Ruby 6.1.0 or higher .NET 8.17.438 or higher Openshift requirements To link Openshift and Kubernetes you must enable mutating admission webhooks, which requires Openshift 3.9 or higher. During the process, install a resource that requires admin permissions to the cluster. Run this to log in as admin: oc login -u system:admin Copy Check that webhooks are correctly configured. If they are not, update the master-config.yaml file. admissionConfig: pluginConfig: MutatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission ValidatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission location: \"\" Copy Important Add kubeConfigFile: /dev/null to address some issues in Openshift. Enable certificate signing by editing the YAML file and updating your configuration: kubernetesMasterConfig: controllerArguments: cluster-signing-cert-file: - \"/etc/origin/master/ca.crt\" cluster-signing-key-file: - \"/etc/origin/master/ca.key\" Copy Restart the Openshift services in the master node. Configure the injection of metadata By default, all the pods you create that include APM agents have the correct environment variables set and the metadata injection applies to the entire cluster. To check that the environment variables have been set, any container that is running must be stopped, and a new instance started (see Validate the injection of metadata). This default configuration also uses the Kubernetes certificates API to automatically manage the certificates required for the injection. If needed, you can limit the injection of metadata to specific namespaces in your cluster or self-manage your certificates. Default configuration To proceed with the default injection of metadata, follow these steps: Download the YAML file: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-latest.yaml Copy Custom configuration You can limit the injection of metadata only to specific namespaces by using labels. To enable this feature, edit your YAML file by finding and uncommenting the following lines: # namespaceSelector: # matchLabels: # newrelic-metadata-injection: enabled Copy With this option, injection is only applied to those namespaces that have the newrelic-metadata-injection label set to enabled: kubectl label namespace YOUR_NAMESPACE newrelic-metadata-injection=enabled Copy Manage custom certificates To use custom certificates you need a specific YAML file: Download the YAML file without automatic certificate management: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-custom-certs-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-custom-certs-latest.yaml Copy Once you have the correct YAML file, you can proceed with the custom certificate management option. You need your certificate, server key, and Certification Authority (CA) bundle encoded in PEM format. If you have them in the standard certificate format (X.509), install openssl, and run the following: openssl x509 -in CERTIFICATE_FILENAME -outform PEM -out CERTIFICATE_FILENAME.pem openssl x509 -in SERVER_KEY_FILENAME -outform PEM -out SERVER_KEY_FILENAME.pem openssl x509 -in CA_BUNDLE_FILENAME -outform PEM -out BUNDLE_FILENAME.pem Copy If your certificate/key pair are in another format, see the Digicert knowledgebase for more help. Create the TLS secret with the signed certificate/key pair, and patch the mutating webhook configuration with the CA using the following commands: kubectl create secret tls newrelic-metadata-injection-secret \\ --key=PEM_ENCODED_SERVER_KEY \\ --cert=PEM_ENCODED_CERTIFICATE \\ --dry-run -o yaml | kubectl -n default apply -f - caBundle=$(cat PEM_ENCODED_CA_BUNDLE | base64 | td -d '\\n') kubectl patch mutatingwebhookconfiguration newrelic-metadata-injection-cfg --type='json' -p \"[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'${caBundle}'}]\" Copy Important Certificates signed by Kubernetes have an expiration of one year. For more information, see the Kubernetes source code in GitHub. Validate the injection of metadata In order to validate that the webhook (responsible for injecting the metadata) was installed correctly, deploy a new pod and check for the New Relic environment variables. Create a dummy pod containing Busybox by running: kubectl create -f https://git.io/vPieo Copy Check if New Relic environment variables were injected: kubectl exec busybox0 -- env | grep NEW_RELIC_METADATA_KUBERNETES NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME=fsi NEW_RELIC_METADATA_KUBERNETES_NODE_NAME=nodea NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME=default NEW_RELIC_METADATA_KUBERNETES_POD_NAME=busybox0 NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME=busybox Copy Disable the injection of metadata To disable/uninstall the injection of metadata, use the following commands: Delete the Kubernetes objects using the yaml file: kubectl delete -f k8s-metadata-injection-latest.yaml Copy Delete the TLS secret containing the certificate/key pair: kubectl delete secret/newrelic-metadata-injection-secret Copy Troubleshooting Follow these troubleshooting tips as needed. No Kubernetes metadata in APM or distributed tracing transactions Problem The creation of the secret by the k8s-webhook-cert-manager job used to fail due to the kubectl version used by the image when running in Kubernetes version 1.19.x, The new version 1.3.2 fixes this issue, therefore it is enough to run again the job using an update version of the image to fix the issue. Solution Update the image k8s-webhook-cert-manager (to a version >= 1.3.2) and re-run the job. The secret will be correctly created and the k8s-metadata-injection pod will be able to start. Note that the new version of the manifest and of the nri-bundle are already updated with the correct version of the image. Problem In OpenShift version 4.x, the CA that is used in order to patch the mutatingwebhookconfiguration resource is not the one used when signing the certificates. This is a known issue currently tracked here. In the logs of the Pod nri-metadata-injection, you'll see the following error message: TLS handshake error from 10.131.0.29:37428: remote error: tls: unknown certificate authority TLS handshake error from 10.129.0.1:49314: remote error: tls: bad certificate Copy Workaround Manually update the certificate stored in the mutatingwebhookconfiguration object. The correct CA locations might change according to the cluster configuration. However, you can usually find the CA in the secret csr-signer in the namespace openshift-kube-controller-manager. Problem There is no Kubernetes metadata included in the transactions' attributes of your APM agent or in distributed tracing. Solution Verify that the environment variables are being correctly injected by following the instructions described in the Validate your installation step. If they are not present, get the name of the metadata injection pod by running: kubectl get pods | grep newrelic-metadata-injection-deployment kubectl logs -f pod/podname Copy In another terminal, create a new pod (for example, see Validate your installation), and inspect the logs of the metadata injection deployment for errors. For every created pod there should be a set of 4 new entries in the logs like: {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.107Z\",\"caller\":\"server/main.go:139\",\"msg\":\"POST https://newrelic-metadata-injection-svc.default.svc:443/mutate?timeout=30s HTTP/2.0\\\" from 10.11.49.2:32836\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.110Z\",\"caller\":\"server/webhook.go:168\",\"msg\":\"received admission review\",\"kind\":\"/v1, Kind=Pod\",\"namespace\":\"default\",\"name\":\"\",\"pod\":\"busybox1\",\"UID\":\"6577519b-7a61-11ea-965e-0e46d1c9335c\",\"operation\":\"CREATE\",\"userinfo\":{\"username\":\"admin\",\"uid\":\"admin\",\"groups\":[\"system:masters\",\"system:authenticated\"]}} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:182\",\"msg\":\"admission response created\",\"response\":\"[{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env\\\",\\\"value\\\":[{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME\\\",\\\"value\\\":\\\"adn_kops\\\"}]},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NODE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"spec.nodeName\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.namespace\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_POD_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.name\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME\\\",\\\"value\\\":\\\"busybox\\\"}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME\\\",\\\"value\\\":\\\"busybox\\\"}}]\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:257\",\"msg\":\"writing response\"} Copy If there are no new entries on the logs, it means that the apiserver is not being able to communicate with the webhook service, this could be due to networking rules or security groups rejecting the communication. To check if the apiserver is not being able to communicate with the webhook you should inspect the apiserver logs for errors like: failed calling webhook \"metadata-injection.newrelic.com\": ERROR_REASON Copy To get the apiserver logs: Start a proxy to the Kubernetes API server by the executing the following command in a terminal window and keep it running. kubectl proxy --port=8001 Copy Create a new pod in your cluster, this will make the apiserver try to communicate with the webhook. The following command will create a busybox. kubectl create -f https://git.io/vPieo Copy Retrieve the apiserver logs. curl localhost:8001/logs/kube-apiserver.log > apiserver.log Copy Delete the busybox container. kubectl delete -f https://git.io/vPieo Copy Inspect the logs for errors. grep -E 'failed calling webhook' apiserver.log Copy Remember that one of the requirements for the metadata injection is that the apiserver must be allowed egress to the pods running on the cluster. If you encounter errors regarding connection timeouts or failed connections, make sure to check the security groups and firewall rules of the cluster. If there are no log entries in either the apiserver logs or the metadata injection deployment, it means that the webhook was not properly registered. Ensure the metadata injection setup job ran successfully by inspecting the output of: kubectl get job newrelic-metadata-setup Copy If the job is not completed, investigate the logs of the setup job: kubectl logs job/newrelic-metadata-setup Copy Ensure the CertificateSigningRequest is approved and issued by running: kubectl get csr newrelic-metadata-injection-svc.default Copy Ensure the TLS secret is present by running: kubectl get secret newrelic-metadata-injection-secret Copy Ensure the CA bundle is present in the mutating webhook configuration: kubectl get mutatingwebhookconfiguration newrelic-metadata-injection-cfg -o json Copy Ensure the TargetPort of the Service resource matches the Port of the Deployment's container: kubectl describe service/newrelic-metadata-injection-svc kubectl describe deployment/newrelic-metadata-injection-deployment Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 215.60736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "sections": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is currently a beta release. This Pixie <em>integration</em> into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our <em>Kubernetes</em> metadata injection project is open source. Here&#x27;s the code to <em>link</em> APM and infrastructure data and the code to automatically"
      },
      "id": "603ebb94196a674fd1a83df3"
    },
    {
      "sections": [
        "Tutorial: Monitor Redis running on Kubernetes",
        "What you need",
        "Step 1: Set up an example Redis application",
        "Step 2: Enable monitoring of Redis instances"
      ],
      "title": "Tutorial: Monitor Redis running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "30d0c7b52a792c21a50f98931d05a0665ff19fa1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes/",
      "published_at": "2021-09-26T22:13:38Z",
      "updated_at": "2021-03-16T04:18:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have a service running on Kubernetes, and it's a service we support, you can enable monitoring of that service by adding a configuration section for that integration to the Kubernetes integration's config. This tutorial shows how to enable monitoring for a Redis service running on the Kubernetes PHP Guestbook. For the general procedure, see Monitor a Kubernetes-running service. What you need See the general requirements for this feature, including supported services. The kubectl command-line tool must be configured to communicate with your cluster. If you don't have a cluster, you can create one using Minikube. Step 1: Set up an example Redis application This tutorial builds on the Kubernetes tutorial Deploying a PHP Guestbook application with Redis. Skip the Kubernetes tutorial and run the following command to set up the application needed for our tutorial: kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook/all-in-one/guestbook-all-in-one.yaml Copy If you'd like to first complete the Kubernetes tutorial, follow their tutorial instructions but do not follow the instructions in the Cleaning up section. Step 2: Enable monitoring of Redis instances The PHP Guestbook application has three Redis instances: one master and two slave instances. Each instance is tagged with a label where app=redis. For this example, we're using our Redis monitoring integration. It can monitor both master and slave instances of Redis, so we don’t have to distinguish between them. In the Kubernetes integration's YAML config file (newrelic-infrastructure-k8s-latest.yaml), you need to update the nri-integration-cfg section. From the list of integration configs, get the Redis integration YAML and add it to the Kubernetes config. The Redis YAML is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label \"app=redis\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: redis integrations: - name: nri-redis env: # using the discovered IP as the hostname address HOSTNAME: ${discovery.ip} PORT: 6379 KEYS: '{\"0\":[\"<KEY_1>\"],\"1\":[\"<KEY_2>\"]}' REMOTE_MONITORING: true labels: env: production Copy Deploy the updated service: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy You should be able to see the following in the logs for the pod newrelic-infra: time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check starting\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check finished with success\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations Copy If there are no errors, you should see Redis data in the Infrastructure UI. To find the Redis dashboards, go to one.newrelic.com > Infrastructure > Third party services, and select the Redis dashboard. For the general procedure of how to monitor services running on Kubernetes, including more detail about how configuration works, see Monitor a Kubernetes-running service.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.16118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "sections": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-<em>integration</em>-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label &quot;<em>app</em>=redis&quot; # https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>integrations</em>&#x2F;host-<em>integrations</em>&#x2F;installation&#x2F;container-auto-discovery discovery"
      },
      "id": "603e7e8264441f332a4e8879"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " managed <em>services</em> or platforms: Amazon EKS The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the <em>Kubernetes</em> platforms. Before starting our automated installer to deploy the <em>Kubernetes</em> <em>integration</em> in Amazon EKS, make sure you are using"
      },
      "id": "60450ae964441f0603378f15"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes": [
    {
      "sections": [
        "Monitor services running on Kubernetes",
        "Get started",
        "What you need",
        "Enable monitoring of services",
        "Get the config YAML for the integration",
        "Example configuration",
        "Configuration options for each integration",
        "Monitor services in our Kubernetes integration installed with Helm",
        "Learn more",
        "Manually configure service monitoring",
        "How the service-specific YAML config works",
        "Add a service YAML to the Kubernetes integration config",
        "Add multiple services to the same config"
      ],
      "title": "Monitor services running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "4c67f6272bda36eda4ad7883e89697a203aa2153",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes/",
      "published_at": "2021-09-26T22:12:28Z",
      "updated_at": "2021-05-16T04:41:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Kubernetes integration you can monitor both Kubernetes and the services running on it, such as Cassandra, Redis, MySQL, and other supported services. Get started Our Kubernetes integration comes bundled with some of our on-host integrations (like Cassandra, MySQL, and Apache). This lets you get data for those supported services by adding a section to the Kubernetes integration's configuration, which lives as a ConfigMap inside a manifest. What you need Enable this feature for a service Details about how configuration works For an example of how to monitor Redis running on a Kubernetes PHP Guestbook, see this tutorial. What you need To monitor services running on Kubernetes, you only need a Kubernetes cluster running the Kubernetes integration, version 1.13.0 or higher (install | check version | update). We support the following services running on Kubernetes: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP Enable monitoring of services To enable our Kubernetes integration to monitor one or more services: Expand this dropdown and get the YAML snippets for the service(s) you want to monitor: Get the config YAML for the integration For the services you want to monitor, follow the links to GitHub to get the YAML snippets you'll need for the next step: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Add the snippet to the Kubernetes integration's ConfigMap, after the data: section: Example configuration This example shows the YAML config for the Apache integration ( highlighted ) added to the Kubernetes integration's config. Respect the indentation levels. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: apache-config.yaml: | --- # Run auto discovery to find pods with label \"app=apache\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the optional arguments: # --namespaces: Comma separated namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: apache integrations: - name: nri-apache env: # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/server-status?auto METRICS: 1 Copy You can add snippets for multiple services to the same config file. See an example. Depending on your environment, you may need or want to set additional config options. Expand the dropdown below for links to configuration options. Configuration options for each integration Select a service to see available config options: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Verify monitoring is enabled: Go to one.newrelic.com > Infrastructure, select Third party services, and then select the service's dashboard. You should see data being reported. Additional notes about enabling services: Enabling multiple services may use more resources than what is set in the resource limits of the Kubernetes integration config file. If this becomes an issue, raise the limit in the resources section. The Kubernetes integration does not automatically update. For best results, regularly update. Monitor services in our Kubernetes integration installed with Helm If you installed our Kubernetes integration using Helm, to monitor services you need to update the existing installation with the new configuration, which contains the services to monitor: helm upgrade --reuse-values -f values.yaml [RELEASE] [CHART] Copy If you use nri-bundle charts, you need to update the children's chart values. Find some examples here. Learn more More resources for learning about configuration: Learn technical details about how configuration works. Learn how to configure monitoring of multiple services with the same config file. See a step-by-step tutorial showing how to monitor a Redis service on Kubernetes. Manually configure service monitoring The enable procedure should be all you need to get monitoring working, but if you run into problems, understanding some technical details about configuration can be helpful. This section goes into more detail about how configuration works. For each service you wish to monitor, you must add a configuration file for that integration to our Kubernetes integration's configuration. This document will cover these subjects: How the service-specific configuration YAML snippet works Adding the service-specific YAML in the Kubernetes integration's config file Adding multiple services to the Kubernetes integration's config file How the service-specific YAML config works Our Kubernetes integration's configuration follows the ConfigMap format. Using a ConfigMap allows us to decouple the configuration for the integrations from the Kubernetes image. The other benefit is that a ConfigMap can be updated automatically without reloading the running container. Because the infrastructure agent uses YAML to configure its associated integrations, ConfigMaps are a good choice for storing YAML. (For more information on config file format, see the Integration config file format.) The Kubernetes integration image comes with an auto-discovery feature that simplifies the configuration of multiple instances of services using a single configuration file. For example, if you have several NGINX instances running, creating an NGINX integration configuration file for every instance would be hard to implement and hard to update. With our auto-discovery option, you can discover and monitor all your NGINX instances with a single configuration file. Each integration has its own specific configuration YAML. Our NGINX integration default config file looks like this: nginx-config.yml: | --- discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --port: Port used to connect to the kubelet. Default is 10255 # --tls: Use secure (TLS) connection # Custom Example: # exec: /var/db/newrelic-infra/nri-discovery-kubernetes --namespaces namespace1,namespace2 --port 10250 --tls # Default exec: /var/db/newrelic-infra/nri-discovery-kubernetes match: label.app: nginx integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}/status STATUS_MODULE: discover METRICS: 1 Copy The above config enables the following: Runs nri-discovery-kubernetes to query the data for the node we are currently on. Parses the data that comes back and looks for any Kubernetes pod that has a Kubernetes container with an app= label with value nginx. For any matches, it attempts to run the NGINX integration. The status URL is built from: The pod's IP address The status page is pulled from the label on K8s pod called status_url This automatic discovery works the same as the container auto-discovery used by the infrastructure agent. For more advanced options, see Container auto-discovery. Add a service YAML to the Kubernetes integration config It's best practice to configure enabled integrations alongside the Kubernetes integration configuration. This is easier than maintaining configuration files for every single service/integration instance. Below is an example of a Kubernetes integration's ConfigMap. The highlighted section shows where an integration configuration YAML (in this case, NGINX) is placed. For more information on discovery:, see Container auto-discovery for on-host integrations. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 Copy This configuration map can then be referenced in the DaemonSet, the same as the one that was generated via the command line. Make sure the namespace used is the same one used by the Kubernetes integration manifest. If you haven't changed it in the downloaded manifest file, the value is default. Add multiple services to the same config You can monitor several services using the same Kubernetes integration config file. To do this, add another integration configuration YAML to the same Kubernetes integration config file. Below is the Kubernetes config created in the last section, with a new section for the Cassandra integration's config (highlighted). --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 cassandra-configuration.yml: | --- # Run auto discovery to find pods with label \"app=cassandra\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: cassandra integrations: - name: nri-cassandra env: # Use the discovered IP as the host address HOSTNAME: ${discovery.ip} PORT: 7199 USERNAME: cassandra PASSWORD: cassandra METRICS: 1/mark Copy The Kubernetes integration config is now set up to monitor these two services. Additionally, depending on your environment, there may be some additional service-specific configuration you must do. When you've completed configuration, our infrastructure agent looks for any pod with a label cassandra and runs the integration against it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.49489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>services</em> running on <em>Kubernetes</em>",
        "sections": "Monitor <em>services</em> in our <em>Kubernetes</em> <em>integration</em> installed with Helm",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> you can monitor both <em>Kubernetes</em> and the <em>services</em> running on it, such as Cassandra, Redis, MySQL, and other supported <em>services</em>. Get started Our <em>Kubernetes</em> <em>integration</em> comes bundled with some of our on-host <em>integrations</em> (like Cassandra, MySQL, and Apache"
      },
      "id": "6044e50c196a676012960f35"
    },
    {
      "sections": [
        "Link your applications to Kubernetes",
        "Tip",
        "Compatibility and requirements",
        "Kubernetes requirements",
        "Network requirements",
        "APM agent compatibility",
        "Openshift requirements",
        "Important",
        "Configure the injection of metadata",
        "Default configuration",
        "Custom configuration",
        "Manage custom certificates",
        "Validate the injection of metadata",
        "Disable the injection of metadata",
        "Troubleshooting"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "2ae58989813695b48f4924529d6fd6ea17e5f6c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes/",
      "published_at": "2021-09-26T22:13:39Z",
      "updated_at": "2021-05-28T06:30:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can surface Kubernetes metadata and link it to your APM agents as distributed traces to explore performance issues and troubleshoot transaction errors. For more information, see this New Relic blog post. You can quickly start monitoring Kubernetes clusters using Auto-telemetry with Pixie, which is currently a beta release. This Pixie integration into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our Kubernetes metadata injection project is open source. Here's the code to link APM and infrastructure data and the code to automatically manage certificates. Compatibility and requirements Before linking Kubernetes metadata to your APM agents, make sure you meet the following requirements: Kubernetes requirements Network requirements APM agent compatibility OpenShift requirements Kubernetes requirements To link your applications and Kubernetes, your cluster must have the MutatingAdmissionWebhook controller enabled, which requires Kubernetes 1.9 or higher. To verify that your cluster is compatible, run the following command: kubectl api-versions | grep admissionregistration.k8s.io/v1beta1 admissionregistration.k8s.io/v1beta1 Copy If you see a different result, follow the Kubernetes documentation to enable admission control in your cluster. Network requirements For Kubernetes to speak to our MutatingAdmissionWebhook, the master node (or the API server container, depending on how the cluster is set up) should be allowed egress for HTTPS traffic on port 443 to pods in all of the other nodes in the cluster. This might require specific configuration depending on how the infrastructure is set up (on-premises, AWS, Google Cloud, etc). Tip Until Kubernetes v1.14, users were only allowed to register admission webhooks on port 443. Since v1.15 it's possible to register them on different ports. To ensure backward compatibility, the webhook is registered by default on port 443 in the YAML config file we distribute. APM agent compatibility The following New Relic agents collect Kubernetes metadata: Go 2.3.0 or higher Java 4.10.0 or higher Node.js 5.3.0 or higher Python 4.14.0 or higher Ruby 6.1.0 or higher .NET 8.17.438 or higher Openshift requirements To link Openshift and Kubernetes you must enable mutating admission webhooks, which requires Openshift 3.9 or higher. During the process, install a resource that requires admin permissions to the cluster. Run this to log in as admin: oc login -u system:admin Copy Check that webhooks are correctly configured. If they are not, update the master-config.yaml file. admissionConfig: pluginConfig: MutatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission ValidatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission location: \"\" Copy Important Add kubeConfigFile: /dev/null to address some issues in Openshift. Enable certificate signing by editing the YAML file and updating your configuration: kubernetesMasterConfig: controllerArguments: cluster-signing-cert-file: - \"/etc/origin/master/ca.crt\" cluster-signing-key-file: - \"/etc/origin/master/ca.key\" Copy Restart the Openshift services in the master node. Configure the injection of metadata By default, all the pods you create that include APM agents have the correct environment variables set and the metadata injection applies to the entire cluster. To check that the environment variables have been set, any container that is running must be stopped, and a new instance started (see Validate the injection of metadata). This default configuration also uses the Kubernetes certificates API to automatically manage the certificates required for the injection. If needed, you can limit the injection of metadata to specific namespaces in your cluster or self-manage your certificates. Default configuration To proceed with the default injection of metadata, follow these steps: Download the YAML file: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-latest.yaml Copy Custom configuration You can limit the injection of metadata only to specific namespaces by using labels. To enable this feature, edit your YAML file by finding and uncommenting the following lines: # namespaceSelector: # matchLabels: # newrelic-metadata-injection: enabled Copy With this option, injection is only applied to those namespaces that have the newrelic-metadata-injection label set to enabled: kubectl label namespace YOUR_NAMESPACE newrelic-metadata-injection=enabled Copy Manage custom certificates To use custom certificates you need a specific YAML file: Download the YAML file without automatic certificate management: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-custom-certs-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-custom-certs-latest.yaml Copy Once you have the correct YAML file, you can proceed with the custom certificate management option. You need your certificate, server key, and Certification Authority (CA) bundle encoded in PEM format. If you have them in the standard certificate format (X.509), install openssl, and run the following: openssl x509 -in CERTIFICATE_FILENAME -outform PEM -out CERTIFICATE_FILENAME.pem openssl x509 -in SERVER_KEY_FILENAME -outform PEM -out SERVER_KEY_FILENAME.pem openssl x509 -in CA_BUNDLE_FILENAME -outform PEM -out BUNDLE_FILENAME.pem Copy If your certificate/key pair are in another format, see the Digicert knowledgebase for more help. Create the TLS secret with the signed certificate/key pair, and patch the mutating webhook configuration with the CA using the following commands: kubectl create secret tls newrelic-metadata-injection-secret \\ --key=PEM_ENCODED_SERVER_KEY \\ --cert=PEM_ENCODED_CERTIFICATE \\ --dry-run -o yaml | kubectl -n default apply -f - caBundle=$(cat PEM_ENCODED_CA_BUNDLE | base64 | td -d '\\n') kubectl patch mutatingwebhookconfiguration newrelic-metadata-injection-cfg --type='json' -p \"[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'${caBundle}'}]\" Copy Important Certificates signed by Kubernetes have an expiration of one year. For more information, see the Kubernetes source code in GitHub. Validate the injection of metadata In order to validate that the webhook (responsible for injecting the metadata) was installed correctly, deploy a new pod and check for the New Relic environment variables. Create a dummy pod containing Busybox by running: kubectl create -f https://git.io/vPieo Copy Check if New Relic environment variables were injected: kubectl exec busybox0 -- env | grep NEW_RELIC_METADATA_KUBERNETES NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME=fsi NEW_RELIC_METADATA_KUBERNETES_NODE_NAME=nodea NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME=default NEW_RELIC_METADATA_KUBERNETES_POD_NAME=busybox0 NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME=busybox Copy Disable the injection of metadata To disable/uninstall the injection of metadata, use the following commands: Delete the Kubernetes objects using the yaml file: kubectl delete -f k8s-metadata-injection-latest.yaml Copy Delete the TLS secret containing the certificate/key pair: kubectl delete secret/newrelic-metadata-injection-secret Copy Troubleshooting Follow these troubleshooting tips as needed. No Kubernetes metadata in APM or distributed tracing transactions Problem The creation of the secret by the k8s-webhook-cert-manager job used to fail due to the kubectl version used by the image when running in Kubernetes version 1.19.x, The new version 1.3.2 fixes this issue, therefore it is enough to run again the job using an update version of the image to fix the issue. Solution Update the image k8s-webhook-cert-manager (to a version >= 1.3.2) and re-run the job. The secret will be correctly created and the k8s-metadata-injection pod will be able to start. Note that the new version of the manifest and of the nri-bundle are already updated with the correct version of the image. Problem In OpenShift version 4.x, the CA that is used in order to patch the mutatingwebhookconfiguration resource is not the one used when signing the certificates. This is a known issue currently tracked here. In the logs of the Pod nri-metadata-injection, you'll see the following error message: TLS handshake error from 10.131.0.29:37428: remote error: tls: unknown certificate authority TLS handshake error from 10.129.0.1:49314: remote error: tls: bad certificate Copy Workaround Manually update the certificate stored in the mutatingwebhookconfiguration object. The correct CA locations might change according to the cluster configuration. However, you can usually find the CA in the secret csr-signer in the namespace openshift-kube-controller-manager. Problem There is no Kubernetes metadata included in the transactions' attributes of your APM agent or in distributed tracing. Solution Verify that the environment variables are being correctly injected by following the instructions described in the Validate your installation step. If they are not present, get the name of the metadata injection pod by running: kubectl get pods | grep newrelic-metadata-injection-deployment kubectl logs -f pod/podname Copy In another terminal, create a new pod (for example, see Validate your installation), and inspect the logs of the metadata injection deployment for errors. For every created pod there should be a set of 4 new entries in the logs like: {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.107Z\",\"caller\":\"server/main.go:139\",\"msg\":\"POST https://newrelic-metadata-injection-svc.default.svc:443/mutate?timeout=30s HTTP/2.0\\\" from 10.11.49.2:32836\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.110Z\",\"caller\":\"server/webhook.go:168\",\"msg\":\"received admission review\",\"kind\":\"/v1, Kind=Pod\",\"namespace\":\"default\",\"name\":\"\",\"pod\":\"busybox1\",\"UID\":\"6577519b-7a61-11ea-965e-0e46d1c9335c\",\"operation\":\"CREATE\",\"userinfo\":{\"username\":\"admin\",\"uid\":\"admin\",\"groups\":[\"system:masters\",\"system:authenticated\"]}} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:182\",\"msg\":\"admission response created\",\"response\":\"[{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env\\\",\\\"value\\\":[{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME\\\",\\\"value\\\":\\\"adn_kops\\\"}]},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NODE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"spec.nodeName\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.namespace\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_POD_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.name\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME\\\",\\\"value\\\":\\\"busybox\\\"}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME\\\",\\\"value\\\":\\\"busybox\\\"}}]\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:257\",\"msg\":\"writing response\"} Copy If there are no new entries on the logs, it means that the apiserver is not being able to communicate with the webhook service, this could be due to networking rules or security groups rejecting the communication. To check if the apiserver is not being able to communicate with the webhook you should inspect the apiserver logs for errors like: failed calling webhook \"metadata-injection.newrelic.com\": ERROR_REASON Copy To get the apiserver logs: Start a proxy to the Kubernetes API server by the executing the following command in a terminal window and keep it running. kubectl proxy --port=8001 Copy Create a new pod in your cluster, this will make the apiserver try to communicate with the webhook. The following command will create a busybox. kubectl create -f https://git.io/vPieo Copy Retrieve the apiserver logs. curl localhost:8001/logs/kube-apiserver.log > apiserver.log Copy Delete the busybox container. kubectl delete -f https://git.io/vPieo Copy Inspect the logs for errors. grep -E 'failed calling webhook' apiserver.log Copy Remember that one of the requirements for the metadata injection is that the apiserver must be allowed egress to the pods running on the cluster. If you encounter errors regarding connection timeouts or failed connections, make sure to check the security groups and firewall rules of the cluster. If there are no log entries in either the apiserver logs or the metadata injection deployment, it means that the webhook was not properly registered. Ensure the metadata injection setup job ran successfully by inspecting the output of: kubectl get job newrelic-metadata-setup Copy If the job is not completed, investigate the logs of the setup job: kubectl logs job/newrelic-metadata-setup Copy Ensure the CertificateSigningRequest is approved and issued by running: kubectl get csr newrelic-metadata-injection-svc.default Copy Ensure the TLS secret is present by running: kubectl get secret newrelic-metadata-injection-secret Copy Ensure the CA bundle is present in the mutating webhook configuration: kubectl get mutatingwebhookconfiguration newrelic-metadata-injection-cfg -o json Copy Ensure the TargetPort of the Service resource matches the Port of the Deployment's container: kubectl describe service/newrelic-metadata-injection-svc kubectl describe deployment/newrelic-metadata-injection-deployment Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 215.60735,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "sections": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is currently a beta release. This Pixie <em>integration</em> into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our <em>Kubernetes</em> metadata injection project is open source. Here&#x27;s the code to <em>link</em> APM and infrastructure data and the code to automatically"
      },
      "id": "603ebb94196a674fd1a83df3"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.18808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " managed <em>services</em> or platforms: Amazon EKS The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the <em>Kubernetes</em> platforms. Before starting our automated installer to deploy the <em>Kubernetes</em> <em>integration</em> in Amazon EKS, make sure you are using"
      },
      "id": "60450ae964441f0603378f15"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes": [
    {
      "sections": [
        "Monitor services running on Kubernetes",
        "Get started",
        "What you need",
        "Enable monitoring of services",
        "Get the config YAML for the integration",
        "Example configuration",
        "Configuration options for each integration",
        "Monitor services in our Kubernetes integration installed with Helm",
        "Learn more",
        "Manually configure service monitoring",
        "How the service-specific YAML config works",
        "Add a service YAML to the Kubernetes integration config",
        "Add multiple services to the same config"
      ],
      "title": "Monitor services running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "4c67f6272bda36eda4ad7883e89697a203aa2153",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes/",
      "published_at": "2021-09-26T22:12:28Z",
      "updated_at": "2021-05-16T04:41:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Kubernetes integration you can monitor both Kubernetes and the services running on it, such as Cassandra, Redis, MySQL, and other supported services. Get started Our Kubernetes integration comes bundled with some of our on-host integrations (like Cassandra, MySQL, and Apache). This lets you get data for those supported services by adding a section to the Kubernetes integration's configuration, which lives as a ConfigMap inside a manifest. What you need Enable this feature for a service Details about how configuration works For an example of how to monitor Redis running on a Kubernetes PHP Guestbook, see this tutorial. What you need To monitor services running on Kubernetes, you only need a Kubernetes cluster running the Kubernetes integration, version 1.13.0 or higher (install | check version | update). We support the following services running on Kubernetes: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP Enable monitoring of services To enable our Kubernetes integration to monitor one or more services: Expand this dropdown and get the YAML snippets for the service(s) you want to monitor: Get the config YAML for the integration For the services you want to monitor, follow the links to GitHub to get the YAML snippets you'll need for the next step: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Add the snippet to the Kubernetes integration's ConfigMap, after the data: section: Example configuration This example shows the YAML config for the Apache integration ( highlighted ) added to the Kubernetes integration's config. Respect the indentation levels. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: apache-config.yaml: | --- # Run auto discovery to find pods with label \"app=apache\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the optional arguments: # --namespaces: Comma separated namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: apache integrations: - name: nri-apache env: # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/server-status?auto METRICS: 1 Copy You can add snippets for multiple services to the same config file. See an example. Depending on your environment, you may need or want to set additional config options. Expand the dropdown below for links to configuration options. Configuration options for each integration Select a service to see available config options: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Verify monitoring is enabled: Go to one.newrelic.com > Infrastructure, select Third party services, and then select the service's dashboard. You should see data being reported. Additional notes about enabling services: Enabling multiple services may use more resources than what is set in the resource limits of the Kubernetes integration config file. If this becomes an issue, raise the limit in the resources section. The Kubernetes integration does not automatically update. For best results, regularly update. Monitor services in our Kubernetes integration installed with Helm If you installed our Kubernetes integration using Helm, to monitor services you need to update the existing installation with the new configuration, which contains the services to monitor: helm upgrade --reuse-values -f values.yaml [RELEASE] [CHART] Copy If you use nri-bundle charts, you need to update the children's chart values. Find some examples here. Learn more More resources for learning about configuration: Learn technical details about how configuration works. Learn how to configure monitoring of multiple services with the same config file. See a step-by-step tutorial showing how to monitor a Redis service on Kubernetes. Manually configure service monitoring The enable procedure should be all you need to get monitoring working, but if you run into problems, understanding some technical details about configuration can be helpful. This section goes into more detail about how configuration works. For each service you wish to monitor, you must add a configuration file for that integration to our Kubernetes integration's configuration. This document will cover these subjects: How the service-specific configuration YAML snippet works Adding the service-specific YAML in the Kubernetes integration's config file Adding multiple services to the Kubernetes integration's config file How the service-specific YAML config works Our Kubernetes integration's configuration follows the ConfigMap format. Using a ConfigMap allows us to decouple the configuration for the integrations from the Kubernetes image. The other benefit is that a ConfigMap can be updated automatically without reloading the running container. Because the infrastructure agent uses YAML to configure its associated integrations, ConfigMaps are a good choice for storing YAML. (For more information on config file format, see the Integration config file format.) The Kubernetes integration image comes with an auto-discovery feature that simplifies the configuration of multiple instances of services using a single configuration file. For example, if you have several NGINX instances running, creating an NGINX integration configuration file for every instance would be hard to implement and hard to update. With our auto-discovery option, you can discover and monitor all your NGINX instances with a single configuration file. Each integration has its own specific configuration YAML. Our NGINX integration default config file looks like this: nginx-config.yml: | --- discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --port: Port used to connect to the kubelet. Default is 10255 # --tls: Use secure (TLS) connection # Custom Example: # exec: /var/db/newrelic-infra/nri-discovery-kubernetes --namespaces namespace1,namespace2 --port 10250 --tls # Default exec: /var/db/newrelic-infra/nri-discovery-kubernetes match: label.app: nginx integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}/status STATUS_MODULE: discover METRICS: 1 Copy The above config enables the following: Runs nri-discovery-kubernetes to query the data for the node we are currently on. Parses the data that comes back and looks for any Kubernetes pod that has a Kubernetes container with an app= label with value nginx. For any matches, it attempts to run the NGINX integration. The status URL is built from: The pod's IP address The status page is pulled from the label on K8s pod called status_url This automatic discovery works the same as the container auto-discovery used by the infrastructure agent. For more advanced options, see Container auto-discovery. Add a service YAML to the Kubernetes integration config It's best practice to configure enabled integrations alongside the Kubernetes integration configuration. This is easier than maintaining configuration files for every single service/integration instance. Below is an example of a Kubernetes integration's ConfigMap. The highlighted section shows where an integration configuration YAML (in this case, NGINX) is placed. For more information on discovery:, see Container auto-discovery for on-host integrations. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 Copy This configuration map can then be referenced in the DaemonSet, the same as the one that was generated via the command line. Make sure the namespace used is the same one used by the Kubernetes integration manifest. If you haven't changed it in the downloaded manifest file, the value is default. Add multiple services to the same config You can monitor several services using the same Kubernetes integration config file. To do this, add another integration configuration YAML to the same Kubernetes integration config file. Below is the Kubernetes config created in the last section, with a new section for the Cassandra integration's config (highlighted). --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 cassandra-configuration.yml: | --- # Run auto discovery to find pods with label \"app=cassandra\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: cassandra integrations: - name: nri-cassandra env: # Use the discovered IP as the host address HOSTNAME: ${discovery.ip} PORT: 7199 USERNAME: cassandra PASSWORD: cassandra METRICS: 1/mark Copy The Kubernetes integration config is now set up to monitor these two services. Additionally, depending on your environment, there may be some additional service-specific configuration you must do. When you've completed configuration, our infrastructure agent looks for any pod with a label cassandra and runs the integration against it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.49489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>services</em> running on <em>Kubernetes</em>",
        "sections": "Monitor <em>services</em> in our <em>Kubernetes</em> <em>integration</em> installed with Helm",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> you can monitor both <em>Kubernetes</em> and the <em>services</em> running on it, such as Cassandra, Redis, MySQL, and other supported <em>services</em>. Get started Our <em>Kubernetes</em> <em>integration</em> comes bundled with some of our on-host <em>integrations</em> (like Cassandra, MySQL, and Apache"
      },
      "id": "6044e50c196a676012960f35"
    },
    {
      "sections": [
        "Tutorial: Monitor Redis running on Kubernetes",
        "What you need",
        "Step 1: Set up an example Redis application",
        "Step 2: Enable monitoring of Redis instances"
      ],
      "title": "Tutorial: Monitor Redis running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "30d0c7b52a792c21a50f98931d05a0665ff19fa1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes/",
      "published_at": "2021-09-26T22:13:38Z",
      "updated_at": "2021-03-16T04:18:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have a service running on Kubernetes, and it's a service we support, you can enable monitoring of that service by adding a configuration section for that integration to the Kubernetes integration's config. This tutorial shows how to enable monitoring for a Redis service running on the Kubernetes PHP Guestbook. For the general procedure, see Monitor a Kubernetes-running service. What you need See the general requirements for this feature, including supported services. The kubectl command-line tool must be configured to communicate with your cluster. If you don't have a cluster, you can create one using Minikube. Step 1: Set up an example Redis application This tutorial builds on the Kubernetes tutorial Deploying a PHP Guestbook application with Redis. Skip the Kubernetes tutorial and run the following command to set up the application needed for our tutorial: kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook/all-in-one/guestbook-all-in-one.yaml Copy If you'd like to first complete the Kubernetes tutorial, follow their tutorial instructions but do not follow the instructions in the Cleaning up section. Step 2: Enable monitoring of Redis instances The PHP Guestbook application has three Redis instances: one master and two slave instances. Each instance is tagged with a label where app=redis. For this example, we're using our Redis monitoring integration. It can monitor both master and slave instances of Redis, so we don’t have to distinguish between them. In the Kubernetes integration's YAML config file (newrelic-infrastructure-k8s-latest.yaml), you need to update the nri-integration-cfg section. From the list of integration configs, get the Redis integration YAML and add it to the Kubernetes config. The Redis YAML is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label \"app=redis\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: redis integrations: - name: nri-redis env: # using the discovered IP as the hostname address HOSTNAME: ${discovery.ip} PORT: 6379 KEYS: '{\"0\":[\"<KEY_1>\"],\"1\":[\"<KEY_2>\"]}' REMOTE_MONITORING: true labels: env: production Copy Deploy the updated service: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy You should be able to see the following in the logs for the pod newrelic-infra: time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check starting\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check finished with success\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations Copy If there are no errors, you should see Redis data in the Infrastructure UI. To find the Redis dashboards, go to one.newrelic.com > Infrastructure > Third party services, and select the Redis dashboard. For the general procedure of how to monitor services running on Kubernetes, including more detail about how configuration works, see Monitor a Kubernetes-running service.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.16118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "sections": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-<em>integration</em>-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label &quot;<em>app</em>=redis&quot; # https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>integrations</em>&#x2F;host-<em>integrations</em>&#x2F;installation&#x2F;container-auto-discovery discovery"
      },
      "id": "603e7e8264441f332a4e8879"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.18808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install <em>and</em> configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " managed <em>services</em> or platforms: Amazon EKS The <em>Kubernetes</em> <em>integration</em> monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the <em>Kubernetes</em> platforms. Before starting our automated installer to deploy the <em>Kubernetes</em> <em>integration</em> in Amazon EKS, make sure you are using"
      },
      "id": "60450ae964441f0603378f15"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/certificate-signed-unknown-authority": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75856,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.00354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.95339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75856,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.00354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.95339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-error-messages": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.0035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.95337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-missing-nodes": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.0035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.95337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-not-seeing-data": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.00346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.953354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/not-seeing-control-plane-data": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Upgrading our Kubernetes integration",
        "Upgrading using the automated installer and Helm",
        "Upgrading using the automated installer and plain manifests",
        "Tip",
        "Monitor services running on Kubernetes",
        "Use your Kubernetes data"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-09-27T14:43:37Z",
      "updated_at": "2021-09-27T14:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Looking to install our New Relic One integration with Pixie for fine-grained telemetry data? See our Auto-telemetry with Pixie install instructions to get deeper insight into your Kubernetes clusters and workloads with just one install command. No language agents required. Want to try out our Kubernetes integration? Create a New Relic account for free! No credit card required. Use automated installer We encourage you to use our automated installer for servers, VMs, and unprivileged environments. The automated installer can provide you either a Helm command with the required values filled, or a plain manifest if you do not wish to use Helm. It also features great customizability and full control over which features and dependencies are enabled. If you are installing our integration on a managed cloud, please take a look at these preliminary notes before proceeding. Alternatively, we also offer fully manual instructions for deploying our integration using Helm. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate Installation on EKS Fargate clusters requires dedicated steps, which are detailed in our fargate installation docs. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: Copy name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME YAML key path: `spec.template.spec.containers.name.env` Copy Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Upgrading our Kubernetes integration Our Kubernetes integration is under active development and we regularly release updates which include bug fixes, new features, and support for newer Kubernetes versions and cloud providers. We strongly recommend all our customers to regularly update the Kubernetes integration to get the best experience. Upgrading using the automated installer and Helm In order to update an installation that was deployed using Helm command provided by the automated installer, just go through the process and run the Helm command again. This will pull the new version of the chart and its dependencies and upgrade it to the latest version. Upgrading using the automated installer and plain manifests Tip We encourage you to deploy our integration using Helm, as it provides a cleaner upgrade path comapred to using manifests directly. If custom manifests have been used instead of Helm, we encourage you to first remove the old installation using kubectl delete -f <mark>previous-manifest-file.yml</mark>, and then proceed through the guided installer again. This will generate an updated set of manifests that can be deployed using kubectl apply -f <mark>manifest-file.yml</mark>. We do not recommend applying a new version of the manifest file without removing the previous one first, since it might leave some leftover components in your cluster. Monitor services running on Kubernetes Tip We encourage you to deploy our integration using Helm, as it allows easier configuration on how to monitor services by just adding snippets to your values.yml file. After having installed our Kubernetes integration, you can start instrumenting the services than run in your cluster. To learn more about how to do this, please check our Monitor services running on Kubernetes page. Use your Kubernetes data To learn more about how to use your Kubernetes data, please head to our detailed Find and use your Kubernetes data pages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.75835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Looking"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Configure control plane monitoring",
        "Features",
        "Compatibility and requirements",
        "Discovery of master nodes and control plane components",
        "Configuration",
        "Important",
        "ETCD",
        "API server",
        "OpenShift configuration",
        "Set up mTLS from the ETCD client CA",
        "Tip",
        "To ease future installations",
        "Set up mTLS for ETCD in OpenShift",
        "See your data"
      ],
      "title": "Configure control plane monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "322c24d8737fb1e9625f35fe495bf22b23f046f6",
      "image": "https://docs.newrelic.com/static/209f301630c770f87ea8cbb1cace8e6e/8c557/new-relic-one-k8s-cluster-explorer-control-plane-parameters.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring/",
      "published_at": "2021-09-27T14:52:09Z",
      "updated_at": "2021-09-20T19:43:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides Control Plane support for your Kubernetes integration, allowing you to monitor and collect metrics from your cluster's Control Plane components. That data can then be found in New Relic and used to create queries and charts. Features We monitor and collect metrics from the following control plane components: ETCD: leader information, resident memory size, number of OS threads, consensus proposals data, etc. For a list of supported metrics, see ETCD data. API server: rate of apiserver requests, breakdown of apiserver requests by HTTP method and response code, etc. For the complete list of supported metrics, see API server data. Scheduler: requested CPU/memory vs available on the node, tolerations to taints, any set affinity or anti-affinity, etc. For the complete list of supported metrics, see Scheduler data. Controller manager: resident memory size, number of OS threads created, goroutines currently existing, etc. For the complete list of supported metrics, see Controller manager data. Compatibility and requirements Control plane monitoring requires Kubernetes integration version 1.11.0 or higher. Control plane monitoring support is not enabled for managed clusters. This is because providers (EKS, GKE, AKS, etc.) abstract away the concept of master nodes and control plane components, so that access to them is limited or non-existent. External control planes are not supported. The unprivileged version of the Kubernetes integration does not support control plane monitoring. OpenShift 4.x uses control plane component metric endpoints that are different than the default. Discovery of master nodes and control plane components The Kubernetes integration relies on the kubeadm labeling conventions to discover the master nodes and the control plane components. This means that master nodes should be labeled with node-role.kubernetes.io/master=\"\" or kubernetes.io/role=\"master\". The control plane components should have either the k8s-app or the tier and component labels. Refer to the following table for accepted label combinations and values: Component Label Endpoint API server Kubeadm / Kops / ClusterAPI k8s-app=kube-apiserver tier=control-plane component=kube-apiserver OpenShift app=openshift-kube-apiserver apiserver=true localhost:443/metrics by default (can be configured) if the request fails falls back to localhost:8080/metrics ETCD Kubeadm / Kops / ClusterAPI k8s-app=etcd-manager-main tier=control-plane component=etcd OpenShift k8s-app=etcd localhost:4001/metrics Scheduler Kubeadm / Kops / ClusterAPI k8s-app=kube-scheduler tier=control-plane component=kube-scheduler OpenShift app=openshift-kube-scheduler scheduler=true localhost:10251/metrics Controller manager Kubeadm / Kops / ClusterAPI k8s-app=kube-controller-manager tier=control-plane component=kube-controller-manager​ OpenShift app=kube-controller-manager kube-controller-manager=true localhost:10252/metrics When the integration detects that it is running inside a master node, it tries to find which components are running on the node by looking for pods that match the labels listed in the table above. For every running component, the integration makes a request to its metrics endpoint. Configuration Control plane monitoring is automatic for agents running inside master nodes. The only component that requires an extra step to run is ETCD, because it uses mutual TLS authentication (mTLS) for client requests. The API Server can also be configured to be queried using the Secure Port. Important Control plane monitoring for OpenShift 4.x requires additional configuration. For more information, see the OpenShift 4.x Configuration section. ETCD In order to set mTLS for querying ETCD, there are two configuration options that need to be set: Option Value ETCD_TLS_SECRET_NAME Name of a Kubernetes secret that contains the mTLS configuration. The secret should contain the following keys: cert: the certificate that identifies the client making the request. It should be signed by an ETCD trusted CA. key: the private key used to generate the client certificate. cacert: the root CA used to identify the ETCD server certificate. If the ETCD_TLS_SECRET_NAME option is not set, ETCD metrics won't be fetched. For step by step instructions on how to create a certificate and sign it with the ETCD client CA, see Set up mTLS from the ETCD client CA. ETCD_TLS_SECRET_NAMESPACE The namespace where the secret specified in the ETCD_TLS_SECRET_NAME was created. If not set, the default namespace is used. API server By default, the API server metrics are queried using the localhost:8080 unsecured endpoint. If this port is disabled, you can also query these metrics over the secure port. To enable this, set the following configuration option in the Kubernetes integration manifest file: Option Value API_SERVER_ENDPOINT_URL The (secure) URL to query the metrics. The API server uses localhost:443 by default Ensure that the ClusterRole has been updated to the newest version found in the manifest Added in version 1.15.0 Important Note that the port can be different according to the secure port used by the API server. For example, in Minikube the API server secure port is 8443 and therefore API_SERVER_ENDPOINT_URL should be set to https://localhost:8443 OpenShift configuration Control plane components on OpenShift 4.x use endpoint URLs that require SSL and service account based authentication. Therefore, the default endpoint URLs can not be used. To configure control plane monitoring on OpenShift, uncomment the following environment variables in the customized manifest. URL values are pre-configured to the default base URLs for the control plane monitoring metrics endpoints in OpenShift 4.x. - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259 - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy Important Even though the custom ETCD_ENDPOINT_URL is defined, ETCD requires HTTPS and mTLS authentication to be configured. For more on configuring mTLS for ETCD in OpenShift, see Set up mTLS for ETCD in OpenShift. Important When installing through Helm openshift, specify the config to automatically include these endpoints. Setting openshift.enabled=true and openshift.version=\"4.x\" will include the secure endpoints and enable the /var/run/crio.sock runtime. Set up mTLS from the ETCD client CA The instructions below are based on the Kubernetes documentation. For more information, see Managing TLS certificates in a cluster. For OpenShift, see Set up mTLS for ETCD in OpenShift. To set up mTLS from the ETCD client CA: Download and install the tool cfssl, selecting the correct binaries for your OS from the list. Once installed, execute the following command: cat <<EOF | cfssl genkey - | cfssljson -bare server { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy This command generates two files; server.csr containing the PEM encoded pkcs#10 certification request and server-key.pem containing the PEM encoded key to the certificate to be created. Use the generated certificate authority (CA) of ETCD to sign your CSR. Depending on your cluster configuration, you may already have this information. For default install configuration, download the CA certificate and the private key directly from ETCD with the following commands: kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system Copy Tip This requires that the etcd-manager-main pod has the label k8s-app=etcd-manager-main, which is a requirement for control plane monitoring . If your etc-manager-main pod is located in a different namespace, change the -n kube-system flags accordingly. With those files downloaded, use the following command to sign your CSRF: cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert Copy Create the secret that is used to retrieve the TLS config for making requests to ETC. We recommend renaming the certificate and the private key: cp cert.pem cert && cp server-key.pem key Copy kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert Copy To ease future installations Use the following commands to simultaneously create the CSR, retrieve the CA, generate the certificate by signing the CSR, and create the secret with all the required fields: cat <<EOF | cfssl genkey - | cfssljson -bare server && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.crt ./cacert -n kube-system && \\ kubectl cp $(kubectl get pods -l k8s-app=etcd-manager-main -n kube-system -o jsonpath=\"{.items[0].metadata.name}\"):/etc/kubernetes/pki/etcd-manager/etcd-clients-ca.key ./cacert.key -n kube-system && \\ cp server-key.pem key && \\ cfssl sign -ca cacert -ca-key cacert.key server.csr | cfssljson -bare cert && \\ cp cert.pem cert && \\ kubectl -n default create secret generic newrelic-infra-etcd-tls-secret --from-file=./cert --from-file=./key --from-file=./cacert { \"hosts\": [ \"localhost\" ], \"CN\": \"newrelic-infra.pod.cluster.local\", \"key\": { \"algo\": \"ecdsa\", \"size\": 256 } } EOF Copy The last step is to update the configuration in the manifest and apply it. In the configuration section, there are two options related to ETCD mTLS: ETCD_TLS_SECRET_NAME with the name of the secret that we just created. ETCD_TLS_SECRET_NAMESPACE with the namespace that we used to create the secret. To complete the installation, add these variables to the container spec of the integration DaemonSet and apply the changes: - name: \"ETCD_TLS_SECRET_NAME” value: \"newrelic-infra-etcd-tls-secret\" - name: \"ETCD_TLS_SECRET_NAMESPACE\" value: \"default\" Copy Set up mTLS for ETCD in OpenShift Follow these instructions to set up mutual TLS authentication for ETCD in OpenShift 4.x: Export the ETCD client certificates from the cluster to an opaque secret. In a default managed OpenShift cluster, the secret is named kube-etcd-client-certs and it is stored in the openshift-monitoring namespace. kubectl get secret/kube-etcd-client-certs -n openshift-monitoring -o yaml > etcd-secret.yaml Copy Open the secret file and change the keys: Rename the certificate authority to cacert. Rename the client certificate to cert. Rename the client key to key. Optional: change the secret name and namespace to something meaningful. Remove these unnecessary keys in the metadata section: creationTimestamp resourceVersion selfLink uid Install the manifest with its new name and namespace: kubectl apply -f etcd-secret.yaml Copy Go to Update manifest configuration (the last step under Set up MTL from ETCD client) to configure the required environment variables. See your data If the integration has been been set up correctly, the Kubernetes cluster explorer contains all the Control Plane components and their status in a dedicated section, as shown below. one.newrelic.com > Kubernetes Cluster Explorer: Use the Kubernetes cluster explorer to monitor and collect metrics from your cluster's Control Plane components You can also check for Control Plane data with this NRQL query: SELECT latest(timestamp) FROM K8sApiServerSample, K8sEtcdSample, K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = 'MY_CLUSTER_NAME' Copy Tip If you still can't see Control Plane data, try the solution described in Kubernetes integration troubleshooting: Not seeing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.00346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ", K8sSchedulerSample, K8sControllerManagerSample FACET entityName where clusterName = &#x27;MY_CLUSTER_NAME&#x27; Copy Tip If you still can&#x27;t see Control Plane data, try the solution described in <em>Kubernetes</em> <em>integration</em> <em>troubleshooting</em>: Not seeing data."
      },
      "id": "603e7f98196a67beaea83dbf"
    },
    {
      "sections": [
        "Install the Kubernetes integration for Windows",
        "LIMITED RELEASE",
        "Compatibility and requirements",
        "Important",
        "Example: Get Kubernetes for Windows from a BusyBox container.",
        "Install",
        "Limitations",
        "Known issues with the Windows Kubelet"
      ],
      "title": "Install the Kubernetes integration for Windows",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "8b179894cbfc76f448c158f36d7ce1843f108dc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows/",
      "published_at": "2021-09-26T22:11:31Z",
      "updated_at": "2021-09-14T20:44:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "LIMITED RELEASE This feature is a limited release. To run our Kubernetes installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the integration. Compatibility and requirements Before you install New Relic's Kubernetes integration, review the compatibility and requirements. Important When using containers in Windows, the container host version and the container image version must be the same. Our Kubernetes integration supports Windows versions 1809 and 1909. To check your Windows version: Open a command window. Run the following command: Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseIdcmd.exe Copy Example: Get Kubernetes for Windows from a BusyBox container. $ kubectl exec -it busybox1-766bb4d6cc-rmsnj -- Reg Query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ReleaseId Copy HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion ReleaseId REG_SZ 1809 Copy Install You can install the Kubernetes integration for Windows using Helm. See an example on how to install the integration in a cluster with nodes having different build versions of Windows (1809 and 2004): Install kube-state-metrics and run it in your cluster using this snippet: curl -L -o kube-state-metrics-1.9.5.zip https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.zip && unzip kube-state-metrics-1.9.5.zip && kubectl apply -f kube-state-metrics-1.9.5/examples/standard Copy Create a values.yml file with the follow data to be used by Helm: global: licenseKey: <YOUR_LICENSE_KEY> cluster: <YOUR_CLUSTER_NAME> enableLinux: false enableWindows: true windowsOsList: - version: 1809 imageTag: 2.2.0-windows-1809-alpha buildNumber: 10.0.17763 - version: 2004 imageTag: 2.2.0-windows-2004-alpha buildNumber: 10.0.19041 Copy Install the integration with: helm install <YOUR_INSTALL_NAME> newrelic/newrelic-infrastructure -f values.yml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy The Helm chart will create one DeamonSet per each version of Windows that is in the list and use NodeSelector to deploy the corresponding Pod per Node. Limitations The following limitations apply to the Kubernetes integration for Windows: The Windows agent only sends the Kubernetes samples (K8sNodeSample, K8sPodSample, etc.) SystemSample, StorageSample, NetworkSample, and ProcessSample are not generated. Some Kubernetes metrics are missing because the Windows kubelet doesn’t have them: Node: fsInodes: not sent fsInodesFree: not sent fsInodesUsed: not sent memoryMajorPageFaultsPerSecond: always returns zero as a value memoryPageFaults: always returns zero as a value memoryRssBytes: always returns zero as a value runtimeInodes: not sent runtimeInodesFree: not sent runtimeInodesUsed: not sent Pod: net.errorsPerSecond: not sent net.rxBytesPerSecond: not sent net.txBytesPerSecond: not sent Container: containerID: not sent containerImageID: not sent memoryUsedBytes: in the UI, this is displayed in the pod card that appears when you click on a pod, and will show no data. We will soon fix this by updating our charts to use memoryWorkingSetBytes instead. Volume: fsUsedBytes: zero, so fsUsedPercent is zero Known issues with the Windows Kubelet There are a couple of issues with the Windows version of Kubelet that can prevent the integration from fetching data: Issue 90554: This issue makes the Kubelet return 500 errors when the integration makes a request to the /stats/summary endpoint. It will be included in the Kubernetes 1.19 release and has been backported to the releases 1.16.11, 1.17.7, and 1.18.4. There is no solution on the integration side for this problem, we advise you to update to one of the patch versions as soon as possible. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": error calling kubelet endpoint. Got status code: 500 Copy Issue 87730: This issue makes the Kubelet metrics very slow when running minimal load. It makes the integration fail with a timeout error. A patch for this issue has been added for Kubernetes 1.18 and backported to 1.15.12, 1.16.9, and 1.17.5. We advise you to update to one of the patch versions as soon as possible. To mitigate this issue you can increase the integration timeout with the TIMEOUT config option. You can see if you're being affected by this problem by enabling verbose logs and looking for messages of the type: error querying Kubelet. Get \"https://<KUBELET_IP>/stats/summary\": context deadline exceeded (Client.Timeout exceeded while awaiting headers) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.953354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "sections": "Install the <em>Kubernetes</em> <em>integration</em> for Windows",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "LIMITED RELEASE This feature is a limited release. To run our <em>Kubernetes</em> installation for Windows, follow the steps below to: Check the compatibility and requirements. Update the manifest file. Learn about the limitations of the <em>integration</em>. Compatibility and requirements Before you install New"
      },
      "id": "603e814028ccbc1ce0eba780"
    }
  ]
}