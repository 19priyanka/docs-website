{
  "/docs/apm/agents/java-agent/troubleshooting/no-data-appears-java": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/no-log-file-java": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/no-stack-traces-java": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "Error bootstrapping New Relic Java agent",
        "Problem",
        "Important",
        "Example stack trace when bootstrapping the Java agent",
        "Solution",
        "Temp directory is different from java.io.tempdir system property",
        "Temp directory does not exist at JVM startup",
        "User cannot write to existing temp directory",
        "Other troubleshooting tips"
      ],
      "title": "Error bootstrapping New Relic Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "c635e1c6ece56bbf9d7a7245dd4301221fe50810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/error-bootstrapping-new-relic-java-agent/",
      "published_at": "2021-12-31T02:10:39Z",
      "updated_at": "2021-10-23T19:24:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You start up a Java process running with the New Relic Java agent, but data fails to report to the APM UI. You see an Error bootstrapping New Relic agent message in the stack trace in your application logs. Important The message Error bootstrapping New Relic agent can indicate multiple failure modes. The stack trace is also key in diagnosing this issue. Example stack trace when bootstrapping the Java agent Error bootstrapping New Relic agent: java.lang.RuntimeException: java.io.IOException: No such file or directory java.lang.RuntimeException: java.io.IOException: No such file or directory at com.newrelic.bootstrap.BootstrapLoader.load(BootstrapLoader.java:136) at com.newrelic.bootstrap.BootstrapAgent.startAgent(BootstrapAgent.java:100) at com.newrelic.bootstrap.BootstrapAgent.premain(BootstrapAgent.java:68) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382) at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397) Caused by: java.io.IOException: No such file or directory at java.io.UnixFileSystem.createFileExclusively(Native Method) at java.io.File.createNewFile(File.java:1006) at java.io.File.createTempFile(File.java:1989) at com.newrelic.bootstrap.EmbeddedJarFilesImpl$1.load(EmbeddedJarFilesImpl.java:36) at com.newrelic.bootstrap.EmbeddedJarFilesImpl$1.load(EmbeddedJarFilesImpl.java:26) at com.newrelic.agent.deps.com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3542) at com.newrelic.agent.deps.com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2323) at com.newrelic.agent.deps.com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2286) at com.newrelic.agent.deps.com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2201) at com.newrelic.agent.deps.com.google.common.cache.LocalCache.get(LocalCache.java:3953) at com.newrelic.agent.deps.com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3957) at com.newrelic.agent.deps.com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4875) at com.newrelic.bootstrap.EmbeddedJarFilesImpl.getJarFileInAgent(EmbeddedJarFilesImpl.java:66) at com.newrelic.bootstrap.BootstrapLoader.addBridgeJarToClassPath(BootstrapLoader.java:73) at com.newrelic.bootstrap.BootstrapLoader.load(BootstrapLoader.java:129) ... 8 more Copy Solution If the Java agent cannot create the temporary jar files, it will fail to start up and will return the Error bootstrapping New Relic agent line preceding the stack trace to System.err. If you are using an app server, this usually appears in your app server's error logs. Here are common reasons for this failure and the solution. Temp directory is different from java.io.tempdir system property This failure can occur when you specify a temporary directory location for the Java process that is not the default location specified by java.io.tmpdir. To solve this problem, pass in the system property -Dnewrelic.tempdir=/path/to/tmpdir to the JVM at startup. New Relic's Java agent will try to use the default temporary directory location for Java (java.io.tempdir) unless this system property is passed in. If you specified a different temporary directory location for the JVM to use, then the default directory location may not exist, or the Java agent may not have write access to it. Temp directory does not exist at JVM startup This failure can occur if the temp directory does not exist when the JVM is starting up. The Java agent starts up very early in the JVM's lifecycle. The agent will not attempt to create the temporary directory if it does not already exist. For example, part of your process lifecycle might be to delete the java temp directory as your process is finishing. In this situation, make sure the java temp directory will be created again before the Java agent next starts up. User cannot write to existing temp directory This failure can occur if the temp directory exists but it cannot be written to by the user starting the java process. This prevents the Java agent from starting up successfully. To solve this problem, verify permissions for the user starting the Java process that is running the Java agent. Make sure the user has write and execute permissions for the temp directory location. Other troubleshooting tips If none of these troubleshooting tips work, see the information about providing Java information for troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.3373,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Error bootstrapping New Relic <em>Java</em> <em>agent</em>",
        "sections": "Error bootstrapping New Relic <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " the <em>Java</em> <em>agent</em>. Make sure the user has write and execute permissions for the temp directory location. Other <em>troubleshooting</em> tips If none of these <em>troubleshooting</em> tips work, see the information about providing <em>Java</em> information for <em>troubleshooting</em>."
      },
      "id": "617e62ce196a676feaf7de81"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/resolve-metric-grouping-issues-java-apps": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/ssl-or-connection-errors-java": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.95915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/java-agent/troubleshooting/update-java-config-legacy-agent-versions": [
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource-intensive code paths with flame graphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "d556f73f870034cfe054ca826fcdbbc289b1934b",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-12-31T02:03:20Z",
      "updated_at": "2021-11-26T09:33:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource-intensive code paths with flame graphs Important The flame graph feature is only compatible with the New Relic Java agent JFR service usage scenario. A \"flame graph\" is a way of visualizing the call tree. Each block in the graph represents a function. The more CPU time and memory resources a method consumes, the wider that block is. Use flame graphs to identify the Java classes and methods that are most frequently executed in your application code. By using flame graphs to optimize the hot spots in your code, you can reduce resource consumption and increase your application’s overall performance. Here are some details about the flame graph colors: Light color: methods from a Java SE package. Dark color: methods from other libraries. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flame graphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.959145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks <em>Troubleshooting</em> performance bottlenecks in your <em>Java</em> application or service can help you better understand the following: Where you’re wasting resources When"
      },
      "id": "617e616728ccbc33fd7fed4d"
    },
    {
      "sections": [
        "Generate debug logs for troubleshooting (Java)",
        "Requirements",
        "Generate log files",
        "Examine log files",
        "Important"
      ],
      "title": "Generate debug logs for troubleshooting (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "fc9e0fef5bbd6100549d78188274b69430eaf697",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java/",
      "published_at": "2021-12-31T02:11:46Z",
      "updated_at": "2021-10-31T09:34:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When troubleshooting your New Relic Java agent, generate finest logs to find and investigate errors. When finished troubleshooting, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do not need to restart the server or JVM. However, if you make any other changes, you must restart your server or JVM. Be sure you keep the original line indentation in your newrelic.yml file. YAML is \"space sensitive\" and requires proper indentation. The audit_mode setting (when set to true ) will also log communication between the Java agent and New Relic to the log file. New Relic Support may occasionally request audit mode logs for additional troubleshooting. Generate log files To generate detailed finest log files: Edit your newrelic.yml file, and change the log_level to finest. Be sure to keep these lines indented two spaces. # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: finest # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false Copy Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the log_level to a less verbose level, such as info (default). Open your log files and examine them for errors. Examine log files Important The finest log setting is a highly verbose logging level. To reduce disk space consumption after testing, return the log_level to its original setting. By default, log files are stored in a logs sub-directory, inside the same directory as newrelic.jar. If necessary, follow the troubleshooting procedures if no log files appear.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.96698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "sections": "Generate debug logs for <em>troubleshooting</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "When <em>troubleshooting</em> your New Relic <em>Java</em> <em>agent</em>, generate finest logs to find and investigate errors. When finished <em>troubleshooting</em>, be sure to set the log file back to a less verbose setting, such as info. Requirements If you only change the log file setting in your newrelic.yml file, you do"
      },
      "id": "617e6310196a67d572f7d9f8"
    },
    {
      "sections": [
        "NullPointerException issues (Java)",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "NullPointerException issues (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Troubleshooting"
      ],
      "external_id": "76218780b8134fa47343ca129107ed9f01907855",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/troubleshooting/nullpointerexception-issues-java/",
      "published_at": "2021-12-31T02:13:53Z",
      "updated_at": "2021-10-23T19:31:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these troubleshooting tips, make sure you have the most recent version of New Relic's Java agent. Use case-sensitive searches of your Java agent log file for lines with SEVERE: and ERROR: NullPointerException. If you find any lines with these messages, gather troubleshooting information to get support at New Relic. Cause New Relic's Java agent between versions 3.0.0 and 3.2.3 would incorrectly log the error messages. For example: ERROR: javax/servlet/ServletOutputStream is marked as a weaved class, but no methods are matched to be weaved. Copy This was entirely erroneous and is not a cause for concern. However, do not use these versions. Instead, update to the most recent version of New Relic's Java agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.25726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NullPointerException issues (<em>Java</em>)",
        "sections": "NullPointerException issues (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem If your log data shows SEVERE: or ERROR: with NullPointerException issues, there may be issues that are interfering with reporting. Solution Before you begin these <em>troubleshooting</em> tips, make sure you have the most recent version of New Relic&#x27;s <em>Java</em> <em>agent</em>. Use case-sensitive searches of your"
      },
      "id": "617e638c196a67bc5bf7e68c"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/agent-attributes": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "47ea348bf8d620acfae2fbf48452147553d329ba",
      "image": "https://docs.newrelic.com/static/bfccf48174daa734a2359d7c15354222/c1b63/RTS-small.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-12-31T02:17:03Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "617e63f228ccbc68a6800a0a"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "df68b7e1064ffd08c3471f8543e71465ecf843f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-12-31T02:16:40Z",
      "updated_at": "2021-10-23T19:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "617e715f196a673207f7da50"
    },
    {
      "sections": [
        "Link your applications to Kubernetes"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "f38fa2f86a7bace81dbe42d5a77c42c4d2b28282",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes/",
      "published_at": "2021-12-31T02:16:19Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Agents can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on agent compatibility and installation instructions, see our Kubernetes documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>Agents</em> can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on <em>agent</em> compatibility and installation instructions, see our Kubernetes documentation."
      },
      "id": "617e522028ccbc69cb80111e"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/collect-custom-metrics": [
    {
      "image": "https://docs.newrelic.com/static/c8a95ab42842c39be72d4b0c914a3595/c1b63/edit_retention_settings.png",
      "url": "https://docs.newrelic.com/docs/data-apis/manage-data/manage-data-retention/",
      "sections": [
        "Manage data retention",
        "Important",
        "Find the data retention UI",
        "Retention periods",
        "Adjust retention values",
        "Requirements for adjusting retention",
        "Reduce retention values",
        "Copy retention values",
        "Deleting data",
        "Manage retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing child account rules to others",
        "Metric data rollup",
        "Key metrics reported by APM, browser, and mobile",
        "Raw metric data",
        "Account inheritance"
      ],
      "published_at": "2021-12-30T02:49:22Z",
      "title": "Manage data retention",
      "updated_at": "2021-12-30T02:49:22Z",
      "type": "docs",
      "external_id": "1cb14158901f1d71fc54f3916c3e83c44f550195",
      "document_type": "page",
      "popularity": 1,
      "body": "Using the Data retention UI page, review and manage how long your data will be stored in the New Relic database (NRDB). Keep data for shorter periods to protect sensitive information or for longer periods to notice trends over time. At a glance, get the sources of data that you’re storing, when they were last updated, and the length the data is stored. Retention settings range from 8 to 395 days depending on the data's source and namespace classifications in New Relic. From the data retention UI page, which shows the source of data, you can click Edit settings to adjust the data retention for each source. Important This doc applies to organizations on our New Relic One pricing model. If you're on our original product-based pricing model, you have different data retention rules. See Original data retention. Not sure which plan you're on? See Overview of pricing and user model. Find the data retention UI The Data retention tab is located in the Data management UI. Retention periods The following table shows the default retention settings for our New Relic One pricing model. Source Event namespace Days retained APM APM 8 APM APM errors 8 Browser Browser 8 Browser Browser events 8 Browser Browser JS errors 8 Browser Browser page view timing 8 Custom events Custom events 30 Serverless Lambda 8 Serverless Lambda custom 8 Serverless Lambda spans 8 Logs Log 30 Infrastructure Infrastructure processes 8 Infrastructure Infrastructure integrations 395 (13 months) Mobile Mobile crash event trails (breadcrumb) 8 Mobile Mobile exception 8 Mobile Mobile general 8 Mobile Mobile error 8 Mobile Mobile crash 90 Mobile Mobile session 90 Synthetics Synthetics data 395 (13 months) Traces Traces 8 Adjust retention values You can adjust your retention periods to better support your data needs. For example, you might reduce your contracted retention values to optimize query performance. Conversely, you might increase retention for some data types to support more granular analysis over longer periods of time, or to meet data compliance requirements. Requirements for adjusting retention The ability to edit data retention periods is impacted by which pricing model your organization is on: Original pricing model: you must have Insights Pro to edit retention. New Relic One pricing model: Standard edition: your data retention is fixed, and falls between 8 and 395 days (about 13 months) of retention, depending on which capabilities of the New Relic platform you’re using. The prescribed retention levels ensure that you can explore your data and experience the value of New Relic. If you need to raise some of the retention limits for your particular business needs, you can purchase additional retention. Pro or Enterprise edition: If after you finalize your contracted retention you realize you need to make changes, you can adjust your telemetry data retention settings yourself. Your ability to edit data retention is impacted by which user model you're on: The original user model: requires the Owner role or the Data retention manager add-on role New Relic One user model: requires the Billing user role Reduce retention values When you reduce the number of days that specific data sources are retained, existing data of that source type won't immediately disappear. That data might be visible and returned in queries for up to several weeks. We have safeguards in place to ensure you don't accidentally delete data, but this also means that reducing retention values isn't a good strategy for quickly removing data. That said, your change is registered in the system within 12 hours and new data of the adjusted source type will be retained for the new duration. Note that reducing data retention below your contracted retention values will not reduce any New Relic data ingest charges. Conversely, increasing retention for targeted telemetry data types is likely to trigger a conversation with New Relic about adjusting your data ingest charges. Copy retention values If you have multiple accounts in your organization, you can also copy retention values from one account to other accounts. To do this, select the Copy settings to other accounts link, and then select the accounts you want to apply the retention values to. Select the accounts you want to copy retention values to. Deleting data Once telemetry data (events, metrics, logs, traces) is reported to New Relic and available for querying, that data cannot be edited or deleted. This is a purposeful design decision that optimizes New Relic's speed and performance. Data will expire after its data retention period ends. If you need to delete data that has already been reported, contact your New Relic representative. Manage retention via API You can change your retention settings with NerdGraph as well as the UI. For the following examples, provide any necessary information, and run the code in the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a child account, that child account will adopt the current retention value of its parent account for the given namespace. If you delete a rule applied to a parent account, the default retention value will re-apply for the given namespace. To delete an existing rule: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing child account rules to others You can specify a child account to be the template or source account, and have other destination child accounts adopt the same namespace retention values of the source child account. Note: all child accounts must be within the same parent account. To copy an existing set of retentions: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account IDs that were successful (or failed) in copying rules from the source account. Metric data rollup Metric timeslice data is generated by APM (both custom metrics and default metrics), mobile, and browser agents. A metric timeslice consists of three parts: a metric name, the segment of time the metric represents (the \"timeslice\"), and a numeric value (the measurement). APM, browser, and mobile agents can collect thousands of metric timeslices per minute for a variety of performance metrics, such as error rate, bandwidth usage, and garbage collection time. Metric timeslice data is aggregated like this: first to 1-minute rollups that are stored for 8 days the 1-minute rollups are also added to 1-hour roll-ups that are retained for 90 days Key metric data is stored indefinitely. We meter on the size of the initial 1-minute rollup, and not on any of the subsequent rollups. Read on to learn the key metrics by product. Key metrics reported by APM, browser, and mobile Here are the key metrics that are stored indefinitely. Product Key metrics APM Apdex, for app server Throughput and page views Response time, plus breakdown into tiers or categories on your app's main Overview chart Page load time, plus breakdown into segments Error rate CPU usage Memory usage Browser Apdex, for browser Browser page load time Throughput total. After 90 days, there is no breakout by browser type, and only the combined average value is available for the time range requested. Mobile Crash rate: For iOS and for Android Network throughput Network response time Network error rates Interaction traces Raw metric data Raw dimensional metric data is handled a little differently when it comes from APM, Prometheus remote-write API, Telemetry SDKs, and integrations built with the Telemetry SDKs. Raw sub-minute metric data is stored for 30 days. Beyond 30 days, 1-minute resolution roll-up events are created and retained for 13 months. Like with metric timeslice data, we meter and bill on the size of the raw ingest, not the subsequent rollups. Metric retention periods are not editable. Account inheritance The data retention settings of a parent account are inherited by its children accounts. In this context, an organization's first account is treated as the parent account, and other accounts added to the organization inherit the settings in that account. You also have the option to override those settings and set account-specific data retention settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.31961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Key <em>metrics</em> reported by <em>APM</em>, <em>browser</em>, and <em>mobile</em>",
        "body": " data rollup <em>Metric</em> timeslice data is generated by <em>APM</em> (both <em>custom</em> <em>metrics</em> and default <em>metrics</em>), <em>mobile</em>, and <em>browser</em> agents. A <em>metric</em> timeslice consists of three parts: a <em>metric</em> name, the segment of time the <em>metric</em> represents (the &quot;timeslice&quot;), and a numeric value (the measurement). <em>APM</em>, <em>browser</em>"
      },
      "id": "603e974528ccbc3e2aeba7a5"
    },
    {
      "sections": [
        "Understand and manage data ingest",
        "Data ingestion UI",
        "Data ingestion sources",
        "Understand where data is coming from",
        "How ingested data is broken down",
        "Set alerts for data use",
        "Adjust your data ingest",
        "Drop unwanted data",
        "Disable agents and integrations",
        "Adjust APM data ingest",
        "Adjust infrastructure data ingest",
        "Adjust log data ingest"
      ],
      "title": "Understand and manage data ingest",
      "type": "docs",
      "tags": [
        "Ingest and manage data",
        "Manage data"
      ],
      "external_id": "f1c46558041c874a2076f781fa975a21105f60e4",
      "image": "https://docs.newrelic.com/static/82d3c36157005ac0efe40cd6e10fe06b/b23ad/data-facet.png",
      "url": "https://docs.newrelic.com/docs/data-apis/manage-data/manage-data-coming-new-relic/",
      "published_at": "2021-12-30T07:56:44Z",
      "updated_at": "2021-12-30T07:56:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you report data to New Relic, we process what we receive and apply data dropping and transformation rules. Then we count the bytes needed to represent your data in a standard format, like JSON. If you're on our New Relic One pricing model, you're charged for the number of bytes written to our database that are above and beyond the free per-month amount. Data ingestion UI To learn how to easily analyze the data your account is ingesting, watch this short video (3:18 minutes). The Data ingestion tab is located in the Data management UI. The Data ingestion UI shows your ingest rates for the time period specified by the time picker in the upper right. The page shows your daily average GBs, and the total GBs for that time range. You can toggle between an overall ingest view and an account view to identify which of your accounts are sending the most data. The page also provides the current month-to-date, and the projected end-of-month total ingest rates. With this information, you can proactively manage your data ingest in various ways. To see the underlying NRQL query that is used to generate the chart, click View query. From the account dropdown, select Manage your data, and then select Data ingestion. For how to get more details about ingested data, see Get ingest details. Data ingestion sources The data ingestion UI chart shows you a high level breakdown of your billable data usage. The table below explains those sources. In this table, \"usage metric group\" refers to the value of that source's usageMetric attribute value on the NrConsumption event. Data sources Description Metrics In the data ingestion chart, Metrics is a combination of two types of metrics: metric timeslice data and dimensional metrics. Usage metric group: MetricsBytes. Metric timeslice data averages to one-hour periods after eight days. After 90 days, the permanent metric data continues to be stored in one-hour periods. We currently store the raw metric data for 30 days. You are only billed for the initial ingest volume. You are not billed for subsequent rollups. APM This includes APM events, like Transaction and TransactionError. Usage metric group: ApmEventsBytes. Infrastructure Includes several categories of infrastructure monitoring events, described below. Infrastructure host data. Usage metric group:InfraHostBytes. Information related to your servers and virtual machines coming from infrastructure agents, including storage and network data. Infrastructure process data stored in ProcessSample. Usage metric group: InfraProcessBytes. Data related to each process running on the hosts running the infrastructure agent. This feature is turned off by default. For more information, see Process metrics. Infrastructure integrations. Usage metric group: InfraIntegrationBytes. Performance data related to applications and services, typically managed by the customer, including data related to Docker containers, Windows services, Nagios checks, and cloud integrations such as managed services in AWS, Azure, and GCP. Logging Includes logs and any Log_<value> custom data partition created. Usage metric group: LoggingBytes. Log records are stored on the Log data type by default. Additional custom data partitions will create new data types, which are always prefixed with Log_ and are counted as part of the overall set of log data stored. With LogExtendedRecord, log messages longer than 4KB are split into multiple events that, when needed, are stitched together to display the original message; this reduces the size of message data. As of September 2021, log storage as blobs replaces LogExtendedRecord. With blob storage, NRDB can store up to 128,000 bytes for any attribute, not just messages. For more information, see our log blobs docs. Default Custom events. Usage metric group: CustomEventsBytes Mobile events Mobile events, including the general Mobile event, MobileRequestError, MobileBreadcrumb, MobileSession, MobileHandledException, MobileCrash. Usage metric group: MobileEventsBytes. Tracing Usage metric group: TracingBytes. This includes the Span data type and OpenTelemetry's SpanEvent. You are not charged for DistributedTraceSummary events. Browser events Browser events, including the namespaces of Browser, Browser:EventLog, Browser:JSErrors, and PcvPerf (PageView timing). Usage metric group: BrowserEventsBytes. Lambda AWS Lambda events. Usage metric group: ServerlessBytes. Understand where data is coming from You can inspect your data ingest to gain more information about your ingest health. From the data ingestion UI page, you can analyze your usage in more detail. Spending some time understanding your ingested data and where it comes from and how it changes over time can be valuable. You'll know your ingest baselines, and you'll be able to more easily spot anomalies, like ingest spikes, and understand their source. On the data ingestion chart, time is on the X axis and the bands representing data sources are located along the Y axis. Click on a data source band you want to inspect at the spot in the X axis that corresponds with the date you want to investigate. This image shows the data source band for June 15 right before it's clicked. A modal opens with the account, data source, and facet selected. You can do a handful of things on this page: Change the account, data source, or facet you want to drill down into. Change the time range. Review the results of the query in chart form. The chart displays the top 15 results for the facet query. Open the NRQL query in the Query builder where you'll find additional facets that you can use. For more about creating more detailed queries: Learn some NRQL basics. See some example usage-related queries. How ingested data is broken down Some of the usage data in this UI can vary depending on your account. This information is intended to help you understand how we're working with your ingest data: The chart on the Data ingestion page shows data usage for a little longer time frame than that covered by your retention settings for each data ingest source. If you choose a date outside of your designated retention period for an ingest source, you'll get the message that there's no chart data available. Select a more recent date to fix this problem. If you inspect a data source for an account that has less than a terrabyte of data, we compute the ingest volume over a 24 hour period; otherwise, we compute it for a one hour period. The ingest value provided on the main Data ingestion chart will be slightly different from that reflected during inspection. This is because our facet computation is an estimate. Set alerts for data use For how to set alerts that will notify you when you're reaching data ingest levels you don't want to cross, see Query and alert on usage data. For example, you might set an alert on logs, which can accumulate quickly in an active system. Adjust your data ingest Here are some ideas for managing your data: Drop unwanted data On ingest, we apply data dropping rules so you won't be charged for data that's not useful. Learn how to set additional data dropping rules yourself. For how to drop log data, see Drop log data. Disable agents and integrations If you have agents or integrations that you don't need at all, you can uninstall/delete those tools. For instructions, see the specific docs for that tool. Adjust APM data ingest Options for adjusting APM data include: Configure the sampling rate for transaction events. Set appropriate Apdex scores, for example, for frequency of traces. Optimize custom instrumentation and/or custom metrics. Adjust infrastructure data ingest Options for adjusting infrastructure data include: Adjust sampling rate for network, storage, and system events. Disable process metrics. Adjust polling intervals: Polling for cloud integrations. For on-host integrations: edit the configuration file for a specific integration. Control the reporting of specific attributes. Manage Kubernetes events integration. Adjust log data ingest Options for adjusting log data ingest include: Use the log forwarder to filter log events on the sending side. Drop log data, either via the UI or with NerdGraph.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.12215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Adjust <em>APM</em> data ingest",
        "body": " replaces LogExtendedRecord. With blob storage, NRDB can store up to 128,000 bytes for any attribute, not just messages. For more information, see our log blobs docs. Default <em>Custom</em> events. Usage <em>metric</em> group: <em>Custom</em>EventsBytes <em>Mobile</em> events <em>Mobile</em> events, including the general <em>Mobile</em> event"
      },
      "id": "603e978228ccbc8984eba79e"
    },
    {
      "sections": [
        "Introduction to New Relic",
        "Get started with New Relic",
        "All the answers in one place",
        "Bring all your data together",
        "Analyze your data",
        "Respond to incidents faster",
        "Troubleshoot from anywhere in your stack"
      ],
      "title": "Introduction to New Relic",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Welcome to New Relic",
        "Get started"
      ],
      "external_id": "f47a40a9afd699e69c351f5e87f64ed5dadd7e43",
      "image": "https://docs.newrelic.com/static/44970161aec793f3141cfcdc0fc96a57/c1b63/observability.png",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/intro-new-relic/",
      "published_at": "2021-12-31T01:18:23Z",
      "updated_at": "2021-12-31T01:18:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic is an observability platform that helps you build better software. You can bring in data from any digital source so that you can fully understand your system and how to improve it. This short video shows twenty of the most common ways to get your data into New Relic (approx. 5:22 minutes): With New Relic, you can: Bring all your data together: Instrument everything and import data from across your technology stack using our agents, integrations, and APIs, and access it from a single UI. Analyze your data: Get all your data at your fingertips to find the root causes of problems and optimize your systems. Build dashboards and charts or use our powerful query language. Respond to incidents quickly: Our machine learning solution proactively detects and explains anomalies and warns you before they become problems. Get started with New Relic Here's how you can quickly get started capturing and analyzing your data: If you don't have a New Relic account, sign up at newrelic.com/signup. It's free, forever! Follow the steps in our Add your data UI page to get data flowing in. For your first install, we recommend the Guided install option, which will set up many integrations with a single command. Once you have data coming into New Relic, learn more about the New Relic UI or set up Alerts. All the answers in one place New Relic is built for full stack observability. It links all relevant data so that you get the whole picture of everything that enables your systems to deliver value to your customers, from the container running a microservice in the cloud to a mobile website's shopping cart button. Monitoring vs. observability: New Relic provides answers to essential questions in one place. As just one example of what you can do with New Relic, imagine you are a Kubernetes administrator overseeing many clusters and pods of software containers. Where do you start troubleshooting? This short video shows how you can locate a problem cluster and use distributed tracing to find relevant logs: Bring all your data together Capture, organize, and make sense of your data in New Relic One, no matter where it comes from. Use our agents and integrations to automatically collect data from common frameworks and tools, or use our APIs for data that’s more specific to your business or technology. If you don't see your technologies or tasks listed here, see a larger list at New Relic Instant Observability. There you will find integrations bundled into quickstarts, providing you instant access to pre-built dashboards and alerts specific to your technology. If you want to... New Relic can help you... Instrument your application Instrument your code: Use our APM agents to automatically instrument your applications in C, Go, Java, .NET, Node.js, PHP, Python, and Ruby. Track transactions: Gather distributed tracing details as your transactions cross boundaries between apps and services. Instrument your environment Instrument your infrastructure: Observe your entire environment (including Linux, Windows, AWS, Azure, Google Cloud Platform, Kubernetes, Docker, and more). Collect and centralize logs: See your log data in context with your other application and infrastructure data. Save time switching between tools and reach solutions more quickly. Instrument your digital experiences Enhance browser performance: Decrease page load times, as well as triage and eliminate errors. Monitor mobile apps: Troubleshoot crashes and check the health of your Android and iOS apps with our mobile agents. Simulate user activity: Ensure you’re meeting customer expectations by running automated checks to monitor key user flows and experiences. Send data via APIs or build your own solution Collect data without an agent: Call our APIs directly if you prefer to use OpenTelemetry or other agents. Build your own integration: You can use our Flex tool, or one of language-specific SDKs for creating your own exporters to send data to New Relic. As a full platform user you get access to our entire set of observability tools in New Relic One: Application monitoring Browser monitoring Mobile monitoring Synthetic monitoring Serverless monitoring Infrastructure monitoring Log management You can start anywhere, but you'll never get lost. True observability across your entire stack means that you're in control. Analyze your data With your data secure at New Relic, our platform can alert you to problems and help you organize, process, and understand your data, whether it's metrics, events, logs, or traces: Explore your data visually: Jump into our data explorer to navigate all your data and make connections between your entities without any knowledge of query languages. Query and visualize your data: Use our curated dashboard visualizations or create your own. Use NRQL (New Relic Query Language) to slice and dice your data and dig deeper into questions. Query your data programmatically: Access your data through our NerdGraph GraphQL API. Easily prototype queries in our GraphiQL editor. Respond to incidents faster DevOps, site-reliability, and network operation teams need reliable, real-time alerts and anomaly detection to ensure their systems are always up and running efficiently. Let Applied Intelligence, our hybrid machine learning engine, automatically detect anomalies, reduce alert noise, and enrich incidents with context so that you can respond faster to incidents. Proactive detection: Be notified of unusual app behavior and get an analysis of this unusual behavior sent to Slack. Not using Slack? Set up a webhook to deliver messages when you need them. Get notifications: Set up alerts across your data sources and get notified when systems need your attention. Preserve your attention and control how many threshold violations should fire before you're notified. Troubleshoot from anywhere in your stack Being fully connected, the New Relic UI allows you to start your observability journey from any element of your stack. For example, you can get to crucial infrastructure logs from traces of an application running on a problematic Kubernetes pod. Use the Explorer in New Relic One to access and observe the full stack of your software, see performance data and alerting status at a glance, and check relationships. We provide you with a simple yet powerful visual tool to monitor all your entities, that is, anything we can identify that reports data. In the New Relic ecosystem, entities include basic components like applications, hosts, containers, or database services, but they can also refer to custom groupings of such elements. You can also create your own entities. The more entities you instrument, the more data you'll bring in. The more data you've brought to New Relic, the more you'll understand your metrics, events, logs, and traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79108,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " digital experiences Enhance <em>browser</em> performance: Decrease page load times, as well as triage and eliminate errors. Monitor <em>mobile</em> apps: Troubleshoot crashes and check the health of your Android and iOS apps with our <em>mobile</em> agents. Simulate user activity: Ensure you’re meeting customer expectations"
      },
      "id": "619d5b3e196a6705bda0837d"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/custom-instrumentation": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "47ea348bf8d620acfae2fbf48452147553d329ba",
      "image": "https://docs.newrelic.com/static/bfccf48174daa734a2359d7c15354222/c1b63/RTS-small.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-12-31T02:17:03Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "617e63f228ccbc68a6800a0a"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "df68b7e1064ffd08c3471f8543e71465ecf843f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-12-31T02:16:40Z",
      "updated_at": "2021-10-23T19:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "617e715f196a673207f7da50"
    },
    {
      "sections": [
        "Link your applications to Kubernetes"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "f38fa2f86a7bace81dbe42d5a77c42c4d2b28282",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes/",
      "published_at": "2021-12-31T02:16:19Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Agents can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on agent compatibility and installation instructions, see our Kubernetes documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>Agents</em> can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on <em>agent</em> compatibility and installation instructions, see our Kubernetes documentation."
      },
      "id": "617e522028ccbc69cb80111e"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "47ea348bf8d620acfae2fbf48452147553d329ba",
      "image": "https://docs.newrelic.com/static/bfccf48174daa734a2359d7c15354222/c1b63/RTS-small.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-12-31T02:17:03Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "617e63f228ccbc68a6800a0a"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "df68b7e1064ffd08c3471f8543e71465ecf843f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-12-31T02:16:40Z",
      "updated_at": "2021-10-23T19:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "617e715f196a673207f7da50"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "4cf9b83341980cee4119604839fb31d65ab9e2ba",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-12-31T02:15:26Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "617e51dde7b9d29437c0575c"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "47ea348bf8d620acfae2fbf48452147553d329ba",
      "image": "https://docs.newrelic.com/static/bfccf48174daa734a2359d7c15354222/c1b63/RTS-small.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-12-31T02:17:03Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "617e63f228ccbc68a6800a0a"
    },
    {
      "sections": [
        "Link your applications to Kubernetes"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "f38fa2f86a7bace81dbe42d5a77c42c4d2b28282",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes/",
      "published_at": "2021-12-31T02:16:19Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Agents can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on agent compatibility and installation instructions, see our Kubernetes documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>Agents</em> can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on <em>agent</em> compatibility and installation instructions, see our Kubernetes documentation."
      },
      "id": "617e522028ccbc69cb80111e"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "4cf9b83341980cee4119604839fb31d65ab9e2ba",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-12-31T02:15:26Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "617e51dde7b9d29437c0575c"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/agent-data/real-time-streaming": [
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "df68b7e1064ffd08c3471f8543e71465ecf843f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-12-31T02:16:40Z",
      "updated_at": "2021-10-23T19:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "617e715f196a673207f7da50"
    },
    {
      "sections": [
        "Link your applications to Kubernetes"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "f38fa2f86a7bace81dbe42d5a77c42c4d2b28282",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes/",
      "published_at": "2021-12-31T02:16:19Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Agents can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on agent compatibility and installation instructions, see our Kubernetes documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>Agents</em> can be configured to collect Kubernetes-related environment variables and add them to Transaction events to provide context between your Kubernetes cluster and your services. For details on the benefits see this blog post. For more information on <em>agent</em> compatibility and installation instructions, see our Kubernetes documentation."
      },
      "id": "617e522028ccbc69cb80111e"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "4cf9b83341980cee4119604839fb31d65ab9e2ba",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-12-31T02:15:26Z",
      "updated_at": "2021-10-23T19:42:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "617e51dde7b9d29437c0575c"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/app-naming/name-your-application": [
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "487aff56ffce5c35d019e9871fbbf58d5f74b855",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-12-31T02:17:23Z",
      "updated_at": "2021-11-25T11:58:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with tags. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 177.2749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use multiple <em>names</em> for an <em>app</em>",
        "sections": "<em>Name</em> <em>app</em> instances via <em>agent</em> config file",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " with the same <em>app</em> <em>name</em>, <em>agent</em> language, and license key, New Relic aggregates their data into a single New Relic-monitored <em>app</em>. You can also view data for the individual hosts and instances from the <em>app</em>&#x27;s New Relic <em>APM</em> Overview page. To segment your <em>app</em> in a different way, or to work with each"
      },
      "id": "617e63f3196a6757faf7c315"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.48785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> configuration",
        "sections": "Server-side <em>agent</em> configuration",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your <em>app</em>. Then click Settings &gt; Application &gt; Server-side <em>agent</em> configuration. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s configuration file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "image": "https://docs.newrelic.com/static/e8d42feaa627a4f1abd362c85a07596d/c1b63/example-doc-in-folder.png",
      "url": "https://docs.newrelic.com/docs/style-guide/writing-docs/processes-procedures/understand-edit-docs-site-structure/",
      "sections": [
        "Understand and edit docs site structure (nav file, sidebar, categories)",
        "Terms",
        "Understand how the docs site structure works",
        "How is the displayed structure related to the actual folders?",
        "What determines a doc's URL?",
        "What does a nav file do?",
        "Where is the docs site structure exposed?",
        "What determines a doc's sidebar?",
        "When you click a sidebar category, what determines how that auto-index page displays?",
        "Nav file format",
        "Tip",
        "Procedures",
        "Overview of steps for a large docs site restructure project",
        "Add a new category",
        "Add a new nav file",
        "Add a new category to a nav file",
        "Add a doc to sidebar/nav-file",
        "Add doc in multiple sidebar locations",
        "Move docs to other categories",
        "Move docs using nav file",
        "Move docs between folders",
        "Move or delete a folder",
        "Create a \"dummy\" sub-category of docs that don't live in that category",
        "Make a sidebar category heading clickable",
        "Troubleshoot category views not working correctly"
      ],
      "published_at": "2021-12-31T01:00:15Z",
      "title": "Understand and edit docs site structure (nav file, sidebar, categories)",
      "updated_at": "2021-11-26T05:15:14Z",
      "type": "docs",
      "external_id": "5d3034f40c4bc56ef3e55daae52c963806719083",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc contains information and procedures pertaining to the structure of the docs site, including: the nav files, the sidebar, docs category (index) views, and more. For succinct instructions, see Procedures, but it is highly recommended you understand the general concepts of how the docs site structure works if you will be doing larger docs site projects. Terms When talking about the docs site structure, sometimes people use different words for the same things. Below is a list of terms that can help us communicate about the docs site structure: Nav files: In the github docs site, there are yaml files under the nav folder that are used to determine the docs site structure that we display. This structure is exposed in the docs site left sidebar and when you view docs category views (also known as index views, like this one). Folder: In this context, \"folders\" refers to the actual docs site folder structure (those folders and files in the content section). Referring to \"folders\" can be a helpful way to differentiate between the actual folder structure and the displayed structure that's set using the nav files. Sidebar: On public-facing docs, the sidebar is what is visible on the left hand side, showing the structure of that category of docs. The sidebar and index view are both determined by the structure set in the nav file. Category or sub-category: we use these words a bit interchangeably to refer to specific areas of the docs site. For example, this view shows a list of docs in a specific category, as does this higher level category view. In this doc, we'll often use the phrase \"category view\" to indicate a page load of a specific category of docs. Auto-index pages: This is another way, the more technical way, to refer to a category view of docs (for example, this view). \"Auto-index page\" and \"category view\" are used a bit interchangably in this doc, with \"category view\" being used as it's more informal and easy to parse. (Note that this use of \"index\" is a different use of \"index\" than the authored index.mdx files, which are used to display landing pages.) Understand how the docs site structure works This section will explain some of the logic behind how the docs site structure is determined and how the structure we display to the public relates to the actual docs folder structure. How is the displayed structure related to the actual folders? The actual docs folder structure (the folders and mdx files in the content folder) is entirely separate from the docs site structure in the sidebar. The displayed structure of the docs site is determined solely by the nav files (the yaml-format files in the nav folder). It's important to understand the above point. The divergence of the docs folder structure and the displayed docs site structure is necessary: we need a way to control the displayed site structure, which is used for the sidebar and auto-index pages, without requiring us to keep the folder structure and folder names and doc file names completely parallel and matching. Because these two things are so separate, it means we have some fairly complex behind-the-scenes logic to get them to work together. And this means that there can be fairly unintuitive aspects of how that logic works. We do have procedures for common use cases, but it will help you a lot to understand the specifics below of how the displayed structure is generated. What determines a doc's URL? Where a doc file (mdx file) is located in the content folder, and the associated folder and file names, are the only factors that govern that doc's URL. For example, consider the following doc file automated-user-provisioning-single-sign.mdx: This doc's URL is solely based on its folder location and the names of the folders. In this case, its URL is: docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign Copy This has important implications, including: When you move a doc from one folder to another, its URL changes, and this means that you will have to add a redirect to that doc of its original URL. If you rename an mdx file name or a folder name, that changes its URL, so that means you would have to add a redirect to that doc for its original URL. What does a nav file do? The nav files are quite simple. A nav file controls these things: The docs structure (the various levels of docs) for that category of docs. The category headers, set by title (for example, On-host integrations list) and path (for example, /docs/integrations/on-host-integrations). The doc information, set by title (for example, NGINX integration) and path (the doc's URL). A category and a doc in a nav file have the same elements: a title and a `path. What separates a category from a doc is that: A category contains docs in the level below it. If a category has a path (which isn't required but should be present for most docs), the path points to a content docs folder that has at least one doc in it. For more on nav file format, see Nav file format Where is the docs site structure exposed? The structure set in the nav files is exposed in two places: The left sidebar of a doc that shows the structure of that category. When a category header in the sidebar is clicked, it shows a view of that docs site category. Doc category views, also sometimes called auto-index pages: for example, this view, which shows a particular section of docs. What determines a doc's sidebar? As stated above, the sidebar is just one way that the docs site structure governed by the nav files is exposed. When a doc is loaded, the docs site searches for that URL in the nav files. If it finds a match, it displays that nav file in the sidebar with that doc highlighted. If it finds that doc in more than one nav file, it attempts to find the right nav file by choosing the nav that matches the top level category in the doc URL. For example, if a doc with a relative URL /docs/accounts/accounts-billing/account-setup/create-your-new-relic-account was in two nav files, the docs site code would search to see if one of the nav files has docs/accounts as its first path field. If it finds a match, it uses that nav file. For an example of a doc that is placed in two different nav files, for this auto-index page click the Manage data doc and see how, when it loads, it displays the sidebar for the nav file that better matches its URL. When you click a sidebar category, what determines how that auto-index page displays? When you click on a docs category header in the sidebar and an auto-index page loads (like this one), what governs what is displayed there? Here is how this process works: A category header in the sidebar has an associated URL, which is set in the nav file. In the example nav file snippet below, the Get started category view has a path set to /docs/apis/intro-apis. This is what governs the sidebar heading title of \"Get started\" and tells it the URL to use. - title: APIs path: /docs/apis pages: - title: Get started path: /docs/apis/intro-apis pages: - title: New Relic APIs path: /docs/apis/intro-apis/introduction-new-relic-apis - title: API keys path: /docs/apis/intro-apis/new-relic-api-keys Copy If the associated folder of that path has an index mdx file (representing a landing page, like this one), the docs site displays that landing page. If there is no landing page, we display the docs and structure contained in that section of the nav file. For example, this view is based on the nav file section under that category header. For this to work correctly, the docs site verifies that that path matches an actual docs site folder that has at least one mdx file. Put another way: if we used a completely arbitrary URL path for a category's path, like docs/random-category/random-category-2, it would not work. To display a nav file, the path requires an existing folder with at least one doc in there. Other aspects to consider: A path is not required. A category header in the nav file does not require a path; that is just what tells it to create a link and a URL for that view. If a category in a nav file lacks a path, it won't have a link or associated URL for it (for an example, see the \"New Relic University\" category in this section). Having a category without an associated link/URL can be an acceptable choice if you are creating a category of docs that don't reside in that section and you simply want to give a helpful category view in the sidebar. Folder structure URLs aren't important. Every folder in the docs site can be the basis for a URL, but we should only consider valuable the URLs we've chosen for inclusion in the nav files. For example, here's a URL based on an actual folder containing one doc. But because there is no path in a nav file corresponding to that URL, it doesn't display anything. Nav file format Below is a snippet of the agents.yml nav file. Note that the file has indentation that corresponds to the level of the navigation hierarchy. When making changes or creating a new nav file, be sure to use the existing spacing format. yml title: Agents path: /docs/agents pages: - title: Manage APM agents path: /docs/agents/manage-apm-agents pages: - title: Agent data path: /docs/agents/manage-apm-agents/agent-data pages: - title: Real time streaming path: /docs/agents/manage-apm-agents/agent-data/real-time-streaming - title: Custom instrumentation path: /docs/agents/manage-apm-agents/agent-data/custom-instrumentation - title: Agent attributes path: /docs/agents/manage-apm-agents/agent-data/agent-attributes - title: Custom events path: /docs/agents/manage-apm-agents/agent-data/collect-custom-events - title: Custom metrics path: /docs/agents/manage-apm-agents/agent-data/collect-custom-metrics - title: Manage errors path: /docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected - title: Link Kubernetes path: /docs/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes - title: App naming pages: - title: Name your application path: /docs/agents/manage-apm-agents/app-naming/name-your-application - title: Use multiple names for an app path: /docs/agents/manage-apm-agents/app-naming/use-multiple-names-app Copy Tip Navigation nesting is currently limited to a maximum of six levels deep. Please reach out to the engineering team if that is not enough. Here are important elements of the nav file: Key Required? Description title yes The text shown in the navigation, either of a doc or a category. path yes The URL path to the doc or the category view. Do not use trailing slashes. For docs categories in the nav file, the path is required to create an index view. Without the path, a docs category won't be clickable as a link and won't display a view of those docs. Learn more about index views. rootNav no rootNav controls whether a nav file will be displayed or hidden on the docs site home page. It is enabled by default. If you want to hide a category from the home page (as we do for our style guide docs, for example), you would set this to false, as shown below: title: Style guide path: /docs/style-guide Copy children no This is hardly ever used. It indicates a sub-navigation node. Procedures Below are instructions for several common procedures. It may help you to review the terms we use before starting a procedure. Procedures include: Add a new docs category Add a doc to sidebar/nav-file Move docs between folders or categories Move or delete folders Create a \"dummy\" category for docs that don’t live in that area Make a category heading clickable Troubleshoot messed up category views Overview of steps for a large docs site restructure project For some smaller docs site edits, you can sometimes simply edit the nav files and not have to touch the doc files or folders. But for larger projects, you may want to or need to edit and move the docs files and folders themselves. Below is a broad overview of the chunks of work such larger projects generally entail. Plan out what the new nav file structure will look like, and plan out the work of moving docs files or creating new folders. It can help to write down the chunks of work a large project will entail. Move the affected doc files to their new folder locations, making sure to add redirects. For more on that, see Move docs between folders. Delete any empty folders. Edit the nav files to reflect the new desired structure and point to the new doc URLs. If there are category header path URLs that are no longer needed, add those URLs as redirects to specific docs (preferred) or the taxonomy redirects file. For more specific and granular procedures, keep reading. Add a new category We'll explain two procedures: adding a subcategory of docs in an existing nav file, and adding an entirely new nav file. Add a new nav file Adding an entirely new nav file should be rare, and something we only do occasionally during large overhauls of site structure. To add an entirely new nav file: Copy an existing file nav file, or create a new nav file. Customize the new nav file with the categories and docs you want, using the structure of existing nav files as a template. For more on structure, see nav format. Tip You need at least one level of nesting inside the nav file. Without that, doc titles in the auto-generated category views will render as H2 headings. For example, src/content/level-one/level-two/doc will work, but src/content/level-one/doc will produce strange formatting. Add a new category to a nav file To add a new category to a nav file: In an existing nav file, add a new category, represented by its title and path. If you're adding a path for that category (recommended), it must use the URL of an existing folder with at least one mdx file in it. Add the docs you want in that section. Ensure your new content matches the indenting of the surrounding nav file. To learn more about how this works, see: How a doc's sidebar is determined How a doc category view is determined If a category view isn't clickable, see Make category view clickable. Add a doc to sidebar/nav-file Once you create a doc, you need to place it in one or more nav files. To do this: In the nav file location where you want to locate it, add the title (its short title displayed in the sidebar and category views) and the path, which is the doc's URL. Ensure that you've emulated the indenting based on the surrounding nav file content or other nav files. Add doc in multiple sidebar locations To add a doc in more than one sidebar location, simply add that doc (its title and path) wherever you want it to be in the nav file. For more on how the sidebar is determined for docs in multiple nav files, see Sidebar. You can add a doc URL in multiple nav file locations. Move docs to other categories Because the nav file and the actual folder structure aren't connected, there are two different ways to \"move docs\": Move a doc in the nav files: preferred and most common procedure. Move a doc between folders: less frequent, mainly when doing larger projects where we want to do a significant overhaul of the docs structure and want to ensure the folder structure doesn't become too divergent from the nav file structure. Move docs using nav file Move a doc in the nav file when you want to change where it's visible in the sidebar menus. To move a doc from one place to another in the nav file: In the first nav file, copy the two rows representing that doc's entry (the title and path lines) and paste that content into the place you want it to live in the new nav file. In the new nav file section, make sure that new content is aligned properly with the surrounding nav file content. See Nav format for more about nav file structure. Move docs between folders Note that moving docs between the folders should be relatively rare. The main reasons to do this are when the folder structure and nav file structure are becoming very different, which can be bad for a couple reasons: Too much divergence can create issues with category view displays or sidebar actions. Too much divergence can make finding and editing docs harder, so there can be value to keeping things fairly up to date and parallel. When you move a doc between folders or rename a doc, that changes its URL. Similarly, if you rename a folder, that changes the URL of all docs in that area. To move a doc between folders: Get the current URL of the doc you want to move and add that URL to its own list of redirects. Tips: One way to do this in VSCode is to right click the file and click \"Get relative path\". If you are moving many files, ask the team about ways to programmatically add redirects. Remove the trailing slash. Move the doc to the new folder. Update nav files with the new URL. This is easily overlooked but having the correct doc URL in the nav file, and not a redirect, is important. Note that a doc URL may be in more than one nav file so searching the site for that URL can help. Move or delete a folder Sometimes when we are doing a larger restructuring project, we may want to move or delete the actual folders instead of simply editing the nav files. If you are moving an entire folder or multiple folders to another folder, docs and all: Move the folder on your local disk to the new location (in Finder, for example). Next, because that move changes all the URLs of the docs and categories, you'll need to add redirects: For adding redirects for docs, see the procedures for moving a doc between folders. For category redirects: For the section of the nav file affected by your folder editing, gather all the category URLs (path fields) that relate to the moved or deleted folders. We don't need to redirect all folder-related URL paths: we only need to redirect the nav file paths because those represent the paths that we actually link to in the docs (in other words: we aren't using folder-based URLs if they don't have a nav file path). Add those category path URLs as redirects in specific docs or, if that won't work, in the taxonomy-redirects file. We should aim to add category redirects in specific docs and the reason for this is that the taxonomy-redirects file is hard to use and because it's a better customer experience to land on a doc versus a category if possible. In most cases, you'll be able to find a fitting doc to redirect to but if only a category view makes sense, use the taxonomy redirects file. For larger projects, this can be tough work, so you'll want to check out the build and make sure all the sidebar links and category headers are working as expected. For deleting folders, you'll want to essentially follow the same steps as above: either moving or deleting the docs in those folders first, gathering the affected category path URLs and adding them as redirects, adn then deleting the empty folders. Create a \"dummy\" sub-category of docs that don't live in that category Sometimes you want to create a category of docs that is there to help expose a related doc or set of docs. For example, in this view, we have added a category for 'New Relic University' even though that's not a doc that lives in that section; in this case, it's not even a doc on our site. In the example above, this 'New Relic University' category header is in regular text and not a link, and that's because it doesn't have a path set for it in the nav file. This also means that in the sidebar, this category header is not a clickable link and simply functions as a collapser/expander. This is acceptable if you don't mind it but below we explain how you can get a clickable category if you need it. To create a so-called \"dummy\" category: Add the category structure you want in the nav file. If you're okay not having a clickable category header, your new category doesn't require a path. If you want a clickable category header, you will need to use or create a folder that matches the new category path and that has at least one mdx file in it (details). In the nav file, add the title and path information for the docs you want in that new category. Test your new category to ensure it is working correctly. Make a sidebar category heading clickable If there's a sidebar category that's only acting as an expander/collapser and doesn't have a link, that's because it either a) doesn't have a path set in the nav file, or b) that path goes to a folder that doesn't have a doc in it. For more on this, see the instructions regarding clickable headers in the \"dummy\" category section. Troubleshoot category views not working correctly If a docs category view is not working correctly, review how category views are formed. If this does happen, get another opinion from another tech writer to make sure you're not missing something, as we should rarely have problems. One reason that a category view might not work is specifically for path URLs that are also landing pages. In this case, if that path is used in more than one location in the same nav file, the docs site can be confused about which category view to use. We may fix this with a coding fix but in meantime: consider pointing to other URLs and not that path, so that there's only one use of that path per nav file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.52306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "-<em>apm</em>-<em>agents</em>&#x2F;<em>agent</em>-data&#x2F;link-your-applications-kubernetes - title: <em>App</em> <em>naming</em> pages: - title: <em>Name</em> your application path: &#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>manage</em>-<em>apm</em>-<em>agents</em>&#x2F;<em>app</em>-<em>naming</em>&#x2F;<em>name</em>-your-application - title: Use multiple names for an <em>app</em> path: &#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>manage</em>-<em>apm</em>-<em>agents</em>&#x2F;<em>app</em>-<em>naming</em>&#x2F;use-multiple-names-<em>app</em> Copy"
      },
      "id": "61b3551828ccbc07bf8c5771"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/app-naming/use-multiple-names-app": [
    {
      "sections": [
        "Name or change the name of your application",
        "Important",
        "Changing the name vs. the alias",
        "Give each app a descriptive name",
        "Assign the name in your config file",
        "Change the application's alias",
        "Tip",
        "Using multiple names for an app"
      ],
      "title": "Name or change the name of your application",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "0750a52decc0b0e42514f8964593479d92440b5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/app-naming/name-your-application/",
      "published_at": "2021-12-31T02:17:03Z",
      "updated_at": "2021-10-23T19:47:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic connects metrics to individual applications using your license key and the primary application name. You can change the app's name in your config file, or assign an alias to the app to change how it appears in the New Relic UI. Important If you do not specify the app name in your New Relic configuration file, most New Relic agents provide a generic application name by default. To ensure all aggregated data for the same app is reported accurately, make sure you give each app a descriptive name. Changing the name vs. the alias You can assign a new app name or change the app alias. These have two different effects: Term How to change it Effect Name Assign the name in your config file Changing the app name in the agent's configuration file will cause the application to report to a new heading in the New Relic user interface, with a total discontinuity of data. This is useful, for example, if you want to start over and report new data. If no other agents are reporting to the old app name, the old app name will appear gray and can be deleted. Alias Change the alias in the APM Settings UI Creating an alias for the app name only changes how the app name appears in the New Relic UI. Changing the alias does not affect how data is reported. It simply helps you keep track of your data with a useful alias. Give each app a descriptive name By default, most New Relic agents provide a default application name, such as My Application or PHP Application, for each app that is linked to your account. Important We recommend changing the default name of an app to a more descriptive name before deployment, and it can be up to 128 characters long. Each unique app name creates a new application record in your New Relic UI, which allows you to: Run an application on more than one host, and have all the data aggregated (collected) under the same name. Run multiple applications on a single host, and have all the data aggregated (collected) under different names. Assign the name in your config file To change the app name, set the app name value in the agent's configuration file. If you have deployed an app via one APM agent, and then deploy another app with the same name via a different APM agent, New Relic will automatically append the agent language name to the end of the second app's name. For example, if you deploy a Node.js app named New-App, and then deploy a .NET app named New-App, New Relic will automatically append the second app name as New-App (DOTNET). Agent Configuration file value C Identify a maximum of three names separated by a semicolon ;in your newrelic_app_config_t* config;. Go Set AppName to a maximum of three names separated by a semicolon. Java See the options for naming your Java application. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP See the options for naming your PHP application. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. Change the application's alias The application name you set in the New Relic user interface is a human-readable alias. If you rename your app, the visible name is updated everywhere in the New Relic UI, including in linked browser apps. Initially, this alias is the same as the app's identifier name in the New Relic agent configuration file. However, changing the UI alias does not affect the underlying app name used for data rollup, which is set in the agent config file. The application must be actively reporting data to change the alias. Changing the UI alias will cause all agents that report under the app identifier to restart themselves. To change the alias for your application's name in the New Relic user interface: Go to one.newrelic.com > APM > (select an app) > Settings > Application. In the Application alias field, type a new name (alias) for the selected app. Select Save application settings. Tip You can also change the app's alias with the New Relic REST API. Using multiple names for an app By giving your app multiple names, you can aggregate metrics for multiple agents across an entire app or service. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.67462,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Name</em> or change the <em>name</em> of your <em>application</em>",
        "sections": "<em>Name</em> or change the <em>name</em> of your <em>application</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ", for example, if you want to start over and report new data. If no other <em>agents</em> are reporting to the old <em>app</em> <em>name</em>, the old <em>app</em> <em>name</em> will appear gray and can be deleted. Alias Change the alias in the <em>APM</em> Settings UI Creating an alias for the <em>app</em> <em>name</em> only changes how the <em>app</em> <em>name</em> appears in the New Relic"
      },
      "id": "617e6431196a678ff9f7c336"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.48785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> configuration",
        "sections": "Server-side <em>agent</em> configuration",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your <em>app</em>. Then click Settings &gt; Application &gt; Server-side <em>agent</em> configuration. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s configuration file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "image": "https://docs.newrelic.com/static/e8d42feaa627a4f1abd362c85a07596d/c1b63/example-doc-in-folder.png",
      "url": "https://docs.newrelic.com/docs/style-guide/writing-docs/processes-procedures/understand-edit-docs-site-structure/",
      "sections": [
        "Understand and edit docs site structure (nav file, sidebar, categories)",
        "Terms",
        "Understand how the docs site structure works",
        "How is the displayed structure related to the actual folders?",
        "What determines a doc's URL?",
        "What does a nav file do?",
        "Where is the docs site structure exposed?",
        "What determines a doc's sidebar?",
        "When you click a sidebar category, what determines how that auto-index page displays?",
        "Nav file format",
        "Tip",
        "Procedures",
        "Overview of steps for a large docs site restructure project",
        "Add a new category",
        "Add a new nav file",
        "Add a new category to a nav file",
        "Add a doc to sidebar/nav-file",
        "Add doc in multiple sidebar locations",
        "Move docs to other categories",
        "Move docs using nav file",
        "Move docs between folders",
        "Move or delete a folder",
        "Create a \"dummy\" sub-category of docs that don't live in that category",
        "Make a sidebar category heading clickable",
        "Troubleshoot category views not working correctly"
      ],
      "published_at": "2021-12-31T01:00:15Z",
      "title": "Understand and edit docs site structure (nav file, sidebar, categories)",
      "updated_at": "2021-11-26T05:15:14Z",
      "type": "docs",
      "external_id": "5d3034f40c4bc56ef3e55daae52c963806719083",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc contains information and procedures pertaining to the structure of the docs site, including: the nav files, the sidebar, docs category (index) views, and more. For succinct instructions, see Procedures, but it is highly recommended you understand the general concepts of how the docs site structure works if you will be doing larger docs site projects. Terms When talking about the docs site structure, sometimes people use different words for the same things. Below is a list of terms that can help us communicate about the docs site structure: Nav files: In the github docs site, there are yaml files under the nav folder that are used to determine the docs site structure that we display. This structure is exposed in the docs site left sidebar and when you view docs category views (also known as index views, like this one). Folder: In this context, \"folders\" refers to the actual docs site folder structure (those folders and files in the content section). Referring to \"folders\" can be a helpful way to differentiate between the actual folder structure and the displayed structure that's set using the nav files. Sidebar: On public-facing docs, the sidebar is what is visible on the left hand side, showing the structure of that category of docs. The sidebar and index view are both determined by the structure set in the nav file. Category or sub-category: we use these words a bit interchangeably to refer to specific areas of the docs site. For example, this view shows a list of docs in a specific category, as does this higher level category view. In this doc, we'll often use the phrase \"category view\" to indicate a page load of a specific category of docs. Auto-index pages: This is another way, the more technical way, to refer to a category view of docs (for example, this view). \"Auto-index page\" and \"category view\" are used a bit interchangably in this doc, with \"category view\" being used as it's more informal and easy to parse. (Note that this use of \"index\" is a different use of \"index\" than the authored index.mdx files, which are used to display landing pages.) Understand how the docs site structure works This section will explain some of the logic behind how the docs site structure is determined and how the structure we display to the public relates to the actual docs folder structure. How is the displayed structure related to the actual folders? The actual docs folder structure (the folders and mdx files in the content folder) is entirely separate from the docs site structure in the sidebar. The displayed structure of the docs site is determined solely by the nav files (the yaml-format files in the nav folder). It's important to understand the above point. The divergence of the docs folder structure and the displayed docs site structure is necessary: we need a way to control the displayed site structure, which is used for the sidebar and auto-index pages, without requiring us to keep the folder structure and folder names and doc file names completely parallel and matching. Because these two things are so separate, it means we have some fairly complex behind-the-scenes logic to get them to work together. And this means that there can be fairly unintuitive aspects of how that logic works. We do have procedures for common use cases, but it will help you a lot to understand the specifics below of how the displayed structure is generated. What determines a doc's URL? Where a doc file (mdx file) is located in the content folder, and the associated folder and file names, are the only factors that govern that doc's URL. For example, consider the following doc file automated-user-provisioning-single-sign.mdx: This doc's URL is solely based on its folder location and the names of the folders. In this case, its URL is: docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign Copy This has important implications, including: When you move a doc from one folder to another, its URL changes, and this means that you will have to add a redirect to that doc of its original URL. If you rename an mdx file name or a folder name, that changes its URL, so that means you would have to add a redirect to that doc for its original URL. What does a nav file do? The nav files are quite simple. A nav file controls these things: The docs structure (the various levels of docs) for that category of docs. The category headers, set by title (for example, On-host integrations list) and path (for example, /docs/integrations/on-host-integrations). The doc information, set by title (for example, NGINX integration) and path (the doc's URL). A category and a doc in a nav file have the same elements: a title and a `path. What separates a category from a doc is that: A category contains docs in the level below it. If a category has a path (which isn't required but should be present for most docs), the path points to a content docs folder that has at least one doc in it. For more on nav file format, see Nav file format Where is the docs site structure exposed? The structure set in the nav files is exposed in two places: The left sidebar of a doc that shows the structure of that category. When a category header in the sidebar is clicked, it shows a view of that docs site category. Doc category views, also sometimes called auto-index pages: for example, this view, which shows a particular section of docs. What determines a doc's sidebar? As stated above, the sidebar is just one way that the docs site structure governed by the nav files is exposed. When a doc is loaded, the docs site searches for that URL in the nav files. If it finds a match, it displays that nav file in the sidebar with that doc highlighted. If it finds that doc in more than one nav file, it attempts to find the right nav file by choosing the nav that matches the top level category in the doc URL. For example, if a doc with a relative URL /docs/accounts/accounts-billing/account-setup/create-your-new-relic-account was in two nav files, the docs site code would search to see if one of the nav files has docs/accounts as its first path field. If it finds a match, it uses that nav file. For an example of a doc that is placed in two different nav files, for this auto-index page click the Manage data doc and see how, when it loads, it displays the sidebar for the nav file that better matches its URL. When you click a sidebar category, what determines how that auto-index page displays? When you click on a docs category header in the sidebar and an auto-index page loads (like this one), what governs what is displayed there? Here is how this process works: A category header in the sidebar has an associated URL, which is set in the nav file. In the example nav file snippet below, the Get started category view has a path set to /docs/apis/intro-apis. This is what governs the sidebar heading title of \"Get started\" and tells it the URL to use. - title: APIs path: /docs/apis pages: - title: Get started path: /docs/apis/intro-apis pages: - title: New Relic APIs path: /docs/apis/intro-apis/introduction-new-relic-apis - title: API keys path: /docs/apis/intro-apis/new-relic-api-keys Copy If the associated folder of that path has an index mdx file (representing a landing page, like this one), the docs site displays that landing page. If there is no landing page, we display the docs and structure contained in that section of the nav file. For example, this view is based on the nav file section under that category header. For this to work correctly, the docs site verifies that that path matches an actual docs site folder that has at least one mdx file. Put another way: if we used a completely arbitrary URL path for a category's path, like docs/random-category/random-category-2, it would not work. To display a nav file, the path requires an existing folder with at least one doc in there. Other aspects to consider: A path is not required. A category header in the nav file does not require a path; that is just what tells it to create a link and a URL for that view. If a category in a nav file lacks a path, it won't have a link or associated URL for it (for an example, see the \"New Relic University\" category in this section). Having a category without an associated link/URL can be an acceptable choice if you are creating a category of docs that don't reside in that section and you simply want to give a helpful category view in the sidebar. Folder structure URLs aren't important. Every folder in the docs site can be the basis for a URL, but we should only consider valuable the URLs we've chosen for inclusion in the nav files. For example, here's a URL based on an actual folder containing one doc. But because there is no path in a nav file corresponding to that URL, it doesn't display anything. Nav file format Below is a snippet of the agents.yml nav file. Note that the file has indentation that corresponds to the level of the navigation hierarchy. When making changes or creating a new nav file, be sure to use the existing spacing format. yml title: Agents path: /docs/agents pages: - title: Manage APM agents path: /docs/agents/manage-apm-agents pages: - title: Agent data path: /docs/agents/manage-apm-agents/agent-data pages: - title: Real time streaming path: /docs/agents/manage-apm-agents/agent-data/real-time-streaming - title: Custom instrumentation path: /docs/agents/manage-apm-agents/agent-data/custom-instrumentation - title: Agent attributes path: /docs/agents/manage-apm-agents/agent-data/agent-attributes - title: Custom events path: /docs/agents/manage-apm-agents/agent-data/collect-custom-events - title: Custom metrics path: /docs/agents/manage-apm-agents/agent-data/collect-custom-metrics - title: Manage errors path: /docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected - title: Link Kubernetes path: /docs/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes - title: App naming pages: - title: Name your application path: /docs/agents/manage-apm-agents/app-naming/name-your-application - title: Use multiple names for an app path: /docs/agents/manage-apm-agents/app-naming/use-multiple-names-app Copy Tip Navigation nesting is currently limited to a maximum of six levels deep. Please reach out to the engineering team if that is not enough. Here are important elements of the nav file: Key Required? Description title yes The text shown in the navigation, either of a doc or a category. path yes The URL path to the doc or the category view. Do not use trailing slashes. For docs categories in the nav file, the path is required to create an index view. Without the path, a docs category won't be clickable as a link and won't display a view of those docs. Learn more about index views. rootNav no rootNav controls whether a nav file will be displayed or hidden on the docs site home page. It is enabled by default. If you want to hide a category from the home page (as we do for our style guide docs, for example), you would set this to false, as shown below: title: Style guide path: /docs/style-guide Copy children no This is hardly ever used. It indicates a sub-navigation node. Procedures Below are instructions for several common procedures. It may help you to review the terms we use before starting a procedure. Procedures include: Add a new docs category Add a doc to sidebar/nav-file Move docs between folders or categories Move or delete folders Create a \"dummy\" category for docs that don’t live in that area Make a category heading clickable Troubleshoot messed up category views Overview of steps for a large docs site restructure project For some smaller docs site edits, you can sometimes simply edit the nav files and not have to touch the doc files or folders. But for larger projects, you may want to or need to edit and move the docs files and folders themselves. Below is a broad overview of the chunks of work such larger projects generally entail. Plan out what the new nav file structure will look like, and plan out the work of moving docs files or creating new folders. It can help to write down the chunks of work a large project will entail. Move the affected doc files to their new folder locations, making sure to add redirects. For more on that, see Move docs between folders. Delete any empty folders. Edit the nav files to reflect the new desired structure and point to the new doc URLs. If there are category header path URLs that are no longer needed, add those URLs as redirects to specific docs (preferred) or the taxonomy redirects file. For more specific and granular procedures, keep reading. Add a new category We'll explain two procedures: adding a subcategory of docs in an existing nav file, and adding an entirely new nav file. Add a new nav file Adding an entirely new nav file should be rare, and something we only do occasionally during large overhauls of site structure. To add an entirely new nav file: Copy an existing file nav file, or create a new nav file. Customize the new nav file with the categories and docs you want, using the structure of existing nav files as a template. For more on structure, see nav format. Tip You need at least one level of nesting inside the nav file. Without that, doc titles in the auto-generated category views will render as H2 headings. For example, src/content/level-one/level-two/doc will work, but src/content/level-one/doc will produce strange formatting. Add a new category to a nav file To add a new category to a nav file: In an existing nav file, add a new category, represented by its title and path. If you're adding a path for that category (recommended), it must use the URL of an existing folder with at least one mdx file in it. Add the docs you want in that section. Ensure your new content matches the indenting of the surrounding nav file. To learn more about how this works, see: How a doc's sidebar is determined How a doc category view is determined If a category view isn't clickable, see Make category view clickable. Add a doc to sidebar/nav-file Once you create a doc, you need to place it in one or more nav files. To do this: In the nav file location where you want to locate it, add the title (its short title displayed in the sidebar and category views) and the path, which is the doc's URL. Ensure that you've emulated the indenting based on the surrounding nav file content or other nav files. Add doc in multiple sidebar locations To add a doc in more than one sidebar location, simply add that doc (its title and path) wherever you want it to be in the nav file. For more on how the sidebar is determined for docs in multiple nav files, see Sidebar. You can add a doc URL in multiple nav file locations. Move docs to other categories Because the nav file and the actual folder structure aren't connected, there are two different ways to \"move docs\": Move a doc in the nav files: preferred and most common procedure. Move a doc between folders: less frequent, mainly when doing larger projects where we want to do a significant overhaul of the docs structure and want to ensure the folder structure doesn't become too divergent from the nav file structure. Move docs using nav file Move a doc in the nav file when you want to change where it's visible in the sidebar menus. To move a doc from one place to another in the nav file: In the first nav file, copy the two rows representing that doc's entry (the title and path lines) and paste that content into the place you want it to live in the new nav file. In the new nav file section, make sure that new content is aligned properly with the surrounding nav file content. See Nav format for more about nav file structure. Move docs between folders Note that moving docs between the folders should be relatively rare. The main reasons to do this are when the folder structure and nav file structure are becoming very different, which can be bad for a couple reasons: Too much divergence can create issues with category view displays or sidebar actions. Too much divergence can make finding and editing docs harder, so there can be value to keeping things fairly up to date and parallel. When you move a doc between folders or rename a doc, that changes its URL. Similarly, if you rename a folder, that changes the URL of all docs in that area. To move a doc between folders: Get the current URL of the doc you want to move and add that URL to its own list of redirects. Tips: One way to do this in VSCode is to right click the file and click \"Get relative path\". If you are moving many files, ask the team about ways to programmatically add redirects. Remove the trailing slash. Move the doc to the new folder. Update nav files with the new URL. This is easily overlooked but having the correct doc URL in the nav file, and not a redirect, is important. Note that a doc URL may be in more than one nav file so searching the site for that URL can help. Move or delete a folder Sometimes when we are doing a larger restructuring project, we may want to move or delete the actual folders instead of simply editing the nav files. If you are moving an entire folder or multiple folders to another folder, docs and all: Move the folder on your local disk to the new location (in Finder, for example). Next, because that move changes all the URLs of the docs and categories, you'll need to add redirects: For adding redirects for docs, see the procedures for moving a doc between folders. For category redirects: For the section of the nav file affected by your folder editing, gather all the category URLs (path fields) that relate to the moved or deleted folders. We don't need to redirect all folder-related URL paths: we only need to redirect the nav file paths because those represent the paths that we actually link to in the docs (in other words: we aren't using folder-based URLs if they don't have a nav file path). Add those category path URLs as redirects in specific docs or, if that won't work, in the taxonomy-redirects file. We should aim to add category redirects in specific docs and the reason for this is that the taxonomy-redirects file is hard to use and because it's a better customer experience to land on a doc versus a category if possible. In most cases, you'll be able to find a fitting doc to redirect to but if only a category view makes sense, use the taxonomy redirects file. For larger projects, this can be tough work, so you'll want to check out the build and make sure all the sidebar links and category headers are working as expected. For deleting folders, you'll want to essentially follow the same steps as above: either moving or deleting the docs in those folders first, gathering the affected category path URLs and adding them as redirects, adn then deleting the empty folders. Create a \"dummy\" sub-category of docs that don't live in that category Sometimes you want to create a category of docs that is there to help expose a related doc or set of docs. For example, in this view, we have added a category for 'New Relic University' even though that's not a doc that lives in that section; in this case, it's not even a doc on our site. In the example above, this 'New Relic University' category header is in regular text and not a link, and that's because it doesn't have a path set for it in the nav file. This also means that in the sidebar, this category header is not a clickable link and simply functions as a collapser/expander. This is acceptable if you don't mind it but below we explain how you can get a clickable category if you need it. To create a so-called \"dummy\" category: Add the category structure you want in the nav file. If you're okay not having a clickable category header, your new category doesn't require a path. If you want a clickable category header, you will need to use or create a folder that matches the new category path and that has at least one mdx file in it (details). In the nav file, add the title and path information for the docs you want in that new category. Test your new category to ensure it is working correctly. Make a sidebar category heading clickable If there's a sidebar category that's only acting as an expander/collapser and doesn't have a link, that's because it either a) doesn't have a path set in the nav file, or b) that path goes to a folder that doesn't have a doc in it. For more on this, see the instructions regarding clickable headers in the \"dummy\" category section. Troubleshoot category views not working correctly If a docs category view is not working correctly, review how category views are formed. If this does happen, get another opinion from another tech writer to make sure you're not missing something, as we should rarely have problems. One reason that a category view might not work is specifically for path URLs that are also landing pages. In this case, if that path is used in more than one location in the same nav file, the docs site can be confused about which category view to use. We may fix this with a coding fix but in meantime: consider pointing to other URLs and not that path, so that there's only one use of that path per nav file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.52306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "-<em>apm</em>-<em>agents</em>&#x2F;<em>agent</em>-data&#x2F;link-your-applications-kubernetes - title: <em>App</em> <em>naming</em> pages: - title: <em>Name</em> your application path: &#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>manage</em>-<em>apm</em>-<em>agents</em>&#x2F;<em>app</em>-<em>naming</em>&#x2F;<em>name</em>-your-application - title: Use multiple names for an <em>app</em> path: &#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>manage</em>-<em>apm</em>-<em>agents</em>&#x2F;<em>app</em>-<em>naming</em>&#x2F;use-multiple-names-<em>app</em> Copy"
      },
      "id": "61b3551828ccbc07bf8c5771"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/add-rename-remove-hosts": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.97104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your app. Then click Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s <em>configuration</em> file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.0456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic <em>agents</em> support HTTPS. If the <em>configuration</em> is not set appropriately, the <em>agent</em> will override the property to ensure all data in transit per"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Tip",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "e0027e4ca72d231ea54847b3b7cf7cf8be0c7df6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-12-31T02:18:07Z",
      "updated_at": "2021-10-31T09:38:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip APM's configurable security policies is available in limited release for approved New Relic accounts. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.71324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " security website. Compatibility and requirements <em>APM</em> <em>agent</em> versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security"
      },
      "id": "617e6431e7b9d23689c05c1f"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/enable-configurable-security-policies": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.97104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your app. Then click Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s <em>configuration</em> file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.0456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic <em>agents</em> support HTTPS. If the <em>configuration</em> is not set appropriately, the <em>agent</em> will override the property to ensure all data in transit per"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    },
    {
      "sections": [
        "View config values for your app",
        "Problem",
        "Solution"
      ],
      "title": "View config values for your app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "757d72d327509a436316375496dd440b0a425db1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/view-config-values-your-app/",
      "published_at": "2021-12-31T02:19:34Z",
      "updated_at": "2021-10-23T19:48:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You need an easy way to get information about your application's configuration settings. Solution If you do not want to view your configuration file itself, you can view the configuration settings in the APM UI, go to one.newrelic.com and click APM. Click your app, then click Settings > Environment > Agent initialization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.08572,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "Problem You need an easy way to get information about your application&#x27;s <em>configuration</em> settings. Solution If you do not want to view your <em>configuration</em> file itself, you can view the <em>configuration</em> settings in the <em>APM</em> UI, go to one.newrelic.com and click <em>APM</em>. Click your app, then click Settings &gt; Environment &gt; <em>Agent</em> initialization."
      },
      "id": "617e596f64441f179efbed1d"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/high-security-mode": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.97098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your app. Then click Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s <em>configuration</em> file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Tip",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "e0027e4ca72d231ea54847b3b7cf7cf8be0c7df6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-12-31T02:18:07Z",
      "updated_at": "2021-10-31T09:38:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip APM's configurable security policies is available in limited release for approved New Relic accounts. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.71324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " security website. Compatibility and requirements <em>APM</em> <em>agent</em> versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security"
      },
      "id": "617e6431e7b9d23689c05c1f"
    },
    {
      "sections": [
        "View config values for your app",
        "Problem",
        "Solution"
      ],
      "title": "View config values for your app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "757d72d327509a436316375496dd440b0a425db1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/view-config-values-your-app/",
      "published_at": "2021-12-31T02:19:34Z",
      "updated_at": "2021-10-23T19:48:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You need an easy way to get information about your application's configuration settings. Solution If you do not want to view your configuration file itself, you can view the configuration settings in the APM UI, go to one.newrelic.com and click APM. Click your app, then click Settings > Environment > Agent initialization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.08571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "Problem You need an easy way to get information about your application&#x27;s <em>configuration</em> settings. Solution If you do not want to view your <em>configuration</em> file itself, you can view the <em>configuration</em> settings in the <em>APM</em> UI, go to one.newrelic.com and click <em>APM</em>. Click your app, then click Settings &gt; Environment &gt; <em>Agent</em> initialization."
      },
      "id": "617e596f64441f179efbed1d"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration": [
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.0456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic <em>agents</em> support HTTPS. If the <em>configuration</em> is not set appropriately, the <em>agent</em> will override the property to ensure all data in transit per"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Tip",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "e0027e4ca72d231ea54847b3b7cf7cf8be0c7df6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-12-31T02:18:07Z",
      "updated_at": "2021-10-31T09:38:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip APM's configurable security policies is available in limited release for approved New Relic accounts. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.71324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " security website. Compatibility and requirements <em>APM</em> <em>agent</em> versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security"
      },
      "id": "617e6431e7b9d23689c05c1f"
    },
    {
      "sections": [
        "View config values for your app",
        "Problem",
        "Solution"
      ],
      "title": "View config values for your app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "757d72d327509a436316375496dd440b0a425db1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/view-config-values-your-app/",
      "published_at": "2021-12-31T02:19:34Z",
      "updated_at": "2021-10-23T19:48:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You need an easy way to get information about your application's configuration settings. Solution If you do not want to view your configuration file itself, you can view the configuration settings in the APM UI, go to one.newrelic.com and click APM. Click your app, then click Settings > Environment > Agent initialization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.08571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "Problem You need an easy way to get information about your application&#x27;s <em>configuration</em> settings. Solution If you do not want to view your <em>configuration</em> file itself, you can view the <em>configuration</em> settings in the <em>APM</em> UI, go to one.newrelic.com and click <em>APM</em>. Click your app, then click Settings &gt; Environment &gt; <em>Agent</em> initialization."
      },
      "id": "617e596f64441f179efbed1d"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/support-arm-graviton-x86-64": [
    {
      "sections": [
        "Monitor non-web scripts, worker processes, tasks, and functions",
        "Integrate the Python agent",
        "Wrap the task to be monitored",
        "Force registration of the Python agent",
        "Upload data on process shutdown",
        "Monitor Django management commands"
      ],
      "title": "Monitor non-web scripts, worker processes, tasks, and functions",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "e0ec476580cd457af0bd8cdca2ba6ed63852f2c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions/",
      "published_at": "2021-12-30T20:19:12Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent is mainly designed to monitor web apps and their web requests, and therefore it includes built-in instrumentation for WSGI-based web apps and popular web frameworks. But you can also monitor arbitrary job-based systems, standalone scripts, worker processes, and non-web transactions using the background_task method. These transactions show up as non-web transactions in the New Relic UI. The Python agent also has built-in instrumentation for the task-queuing systems Celery and Gearman. Integrate the Python agent The first requirement is getting the agent initialized and running with the process to be monitored. This is the same process described in Standard Python install for a web application. If the task to be tracked is running in a background thread of an existing monitored web application process, then initialization of the agent would already be performed so you shouldn't need to repeat this step. If instrumenting an application that is not also handling web traffic, you won't need to wrap the WSGI application entry point. Wrap the task to be monitored Instead of wrapping the WSGI application entry point, you must wrap any function that performs a background task that you wish to track. For example: import newrelic.agent @newrelic.agent.background_task() def execute_task(): ... Copy By default the name of the task will be the name of the function the decorator is applied to. If you wish to override the task name, it can be supplied as a named argument to the decorator. An alternate group can also be specified in place of the default Function: import newrelic.agent @newrelic.agent.background_task(name='database-update', group='Task') def database_update(): ... Copy If the name of the task needs to be set dynamically, then it will be necessary to use a context manager object instead. When using a context manager object, it is first necessary to retrieve the application object corresponding to the application data is to be reported against. Leaving out the name of the application when retrieving the application object will result in that corresponding to the default application named in the agent configuration being used. import newrelic.agent def execute_task(task_name): application = newrelic.agent.application() with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy Note that whatever is wrapped by the background task decorator or context manager object, it must be a task which has finite execution time. You must not wrap the main loop of a process within which the separate tasks are being run. Only the execution of the individual tasks should be wrapped. If you incorrectly wrap the main loop, because the main loop would never return, then although data will be captured, it will never be reported because aggregation and reporting of data only happens after the task actually completes. So wrap the specific granular task you want to track. Such a task can be executed more than once in the life time of the process and all will be reported. Force registration of the Python agent By default the agent will register itself the first time a transaction (either web or non-web) is run. Because data cannot actually be accumulated until the agent registers itself and that will normally happen as a parallel task, then data for the initial transactions will not be captured. For a long running process this is generally acceptable and is better than delaying startup of a web server, preventing any requests being handled, until registration occurs. For non-web transactions however, it can often be the case that a script only performs one task and is long running. For this reason, a delay on startup to wait for the agent to register is acceptable, as it ensures that that data is captured. In this case, one can force registration in one of two ways. The simplest is to specify a startup timeout in the agent configuration. This timeout is how long the agent should wait for registration before proceeding when performing lazy registration of the agent. This represents the maximum time it will wait. If registration takes less time than specified by the timeout it will continue immediately. If using an agent configuration file, this is done by adding the following entry to the newrelic section of the agent configuration file.: startup_timeout = 10.0 Copy Alternatively, the startup timeout can be specified using the NEW_RELIC_STARTUP_TIMEOUT environment variable. Note that you should be careful about using this startup timeout for a web application, as doing so will cause the web server to stall when handling the initial web requests, delaying how quickly a user will get a response. If necessary, forcing registration of the agent can also be performed in code within the application code as well. import newrelic.agent application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy The timeout should be a named parameter to the register_application() function. If an application name other than that specified by the agent configuration needs to be used, it should be the first argument to the register_application() function. The result when registering the agent for the application, whether it is successful or not within the timeout period, is the corresponding application object. This can be used with the background task context manager. Upload data on process shutdown The agent is intended to be used in long running processes. Although it can be used in scripts which run one-off tasks, it is necessary to force registration of the agent for the application as explained above. This ensures that data will be captured for the initial task run in the script. This doesn't mean though that the details of the task are guaranteed to be reported. This is because data is not reported for a task at the completion of the task. Instead the data is accumulated and would normally be reported once a minute. For a script running a one-off task however, the whole script may not run long enough so that the background data harvest and reporting of data to the data collector can be run. To cope with data from partial harvest periods, the agent will attempt to upload such partial data on shutdown of the agent when the script exits. It will not try forever to do this and instead will timeout if this process takes to long so as not to delay indefinitely the shutdown of the process. In this case, there is a default shutdown timeout of 2.5 seconds. The specific value here is chosen because of certain time constraints in place when running an agent in a Python web application under the Apache web server. For the case of Apache the timeout cannot be made longer as Apache will kill off the processes anyway after 3 seconds. The agent therefore exits a bit before that to give other code which needs to run on exit a chance before Apache kills the process. In practice it could be the case that this timeout isn't sufficiently long enough to report data on script exit, especially if there is a slow network or firewalls between the host where the script is run and our data collector. In this case it may be necessary to increase the shutdown timeout to ensure that data from a one off task in a script is actually reported. If using an agent configuration file, this is changed by adding an entry: shutdown_timeout = 2.5 Copy in the [newrelic] section of the agent configuration file. Alternatively, the shutdown timeout can be specified using the NEW_RELIC_SHUTDOWN_TIMEOUT environment variable. Only modify this shutdown timeout if it is found to be required. Monitor Django management commands One common use case is the monitoring of Django management commands. Because it is a common scenario we provide builtin support for this. It is however optionally enabled though as it isn't possible to automatically monitor all Django management commands. This is because some of them, such as runserver and run_gunicorn are infinite loops. Instrumenting those two in particular will also interfere with our regular instrumentation for monitoring those as web applications. Due to the limitation on what Django management commands can be monitored, you need to add to the agent configuration file a special configuration section [import-hook:django]. Under this you need to then provide a space separated list under the setting instrumentation.scripts.django_admin: [import-hook:django] instrumentation.scripts.django_admin = syncdb sqlflush Copy By default, the startup timeout is automatically specified to be 10.0 seconds when monitoring the Django management commands. If you need to override the startup timeout, you can set the instrumentation.background_task.startup_timeout setting within the same import-hook:django configuration section. Once the additional configuration has been specified, you can then run your Django management command wrapped by our newrelic-admin wrapper script: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python manage.py syncdb Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.37839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Integrate the Python <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": " in that corresponding to the default application named in the <em>agent</em> <em>configuration</em> being used. import newrelic.<em>agent</em> def execute_task(task_name): application = newrelic.<em>agent</em>.application() with newrelic.<em>agent</em>.BackgroundTask(application, name=task_name, group=&#x27;Task&#x27;): ... Copy Note that whatever is wrapped"
      },
      "id": "617db7e064441fa7a2fbc4f9"
    },
    {
      "sections": [
        "Python custom metrics",
        "Important",
        "Charting custom metrics",
        "Push versus pull interfaces",
        "Recording a single metric",
        "Recording multiple metrics",
        "Naming of custom metrics",
        "Pre-aggregated metrics",
        "Custom metric data sources",
        "Registering a data source",
        "Initialization of a data source",
        "Instances of a data source",
        "Life cycle of a data source",
        "Configuring a data source",
        "Setup from configuration file"
      ],
      "title": "Python custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "f9a53099356096d43e66677875a5d909a2fbf340",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-custom-metrics/",
      "published_at": "2021-12-30T20:19:12Z",
      "updated_at": "2021-10-30T21:56:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the Python agent. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application. Recommendation: To avoid potential data problems, keep the total number of unique metrics introduced by custom metrics under 2000. Important Before using custom metrics, you must get the agent initialized and integrated with the target process. For instructions, see Python agent integration. Charting custom metrics To view custom metrics, query your data to search metrics and create customizable charts. Push versus pull interfaces The Python agent provides two different ways of recording custom metrics. The first is a push-style API where you can decide when to record a custom metric. The second is a pull-style API where you register a custom metric data source, and the agent polls your code for metrics once per harvest cycle. The pull-style API is important where you need to generate rate or utilization metrics over the period of the harvest cycle. This is because you can properly calculate the duration of the harvest cycle and also ensure that only one metric is recorded for the harvest cycle. Recording a single metric To record a single custom metric, the Python agent provides the function: newrelic.agent.record_custom_metric(name, value, application=None) Copy When called without an application object as newrelic.agent.record_custom_metric('Custom/Value', value) Copy then it must be called within the context of a transaction that is being monitored by the agent. This is because the current transaction will be looked up and the custom metrics will initially be attached to that transaction. So long as the transaction is not subsequently marked to be ignored, the custom metrics will then be aggregated with other metrics for the application the transaction is being reported to, when the transaction completes. If this API function is called outside of the context of a monitored transaction, such as in a background thread (which isn't being tracked as a background task), then the call does nothing and the data is discarded. In order to be able to record custom metrics in such a situation, it is necessary to supply the application object corresponding to the application against which the custom metrics should be recorded. application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metric('Custom/Value', value(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy In the case of recording custom metrics against the current transaction (by not supplying an application object), no thread locking is required at the time of the API call, as the custom metrics will be attached to the transaction object initially. It is only when the whole transaction is being recorded at completion that a thread lock needs to be acquired. This is the same lock though as needs to be acquired to merge all metrics from the transaction with the metric table for the current harvest cycle. So, no additional locking is required on top of what is already required. Where the API call is being supplied the application object however, it is necessary to acquire a lock for each call to record a custom metric. Recording metrics one at a time in this way for a large number of metrics may therefore have undue effects due to thread lock contention. Recording multiple metrics If you are recording multiple metrics in one go, to reduce the need for thread locking you can instead use the function: newrelic.agent.record_custom_metrics(metrics, application=None) Copy This works the same way as the record_custom_metric() call except that an iterable can be provided in place of the name and value arguments. The iterable can be a list, tuple or other iterable object, including a generator function. The iterable must return a tuple consisting of the name and value for the custom metric. import psutil import os def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metrics(memory_metrics(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy When used with an application object, no matter how many custom metrics are being recorded, thread locking will only need to be performed once for each call. Naming of custom metrics All custom metrics reported by the Python agent should start with the prefix Custom/. This would typically be followed with a category name and label segment. If the Custom/ metric is not used, then the custom metrics may not be available for selection in the Data explorer. Pre-aggregated metrics When recording a set of metrics by passing an iterable over the set of available metrics, the same named metric may appear more than once. In this situation the agent would then aggregate the indvidual values into one sample. Although possible, if retaining and then later passing all the individual raw samples for a single metric in this way is not practical, then the source of the metrics can instead pre aggregate metrics and provide the resulting aggregrated data sample. Instead therefore of the value being a numerical value, a dictionary would be passed for the value. The fields within the dictionary would be: count total min max sum_of_squares An implementation of a helper class that you could use to perform aggregation for a single metric is: class Stats(dict): def __init__(self, count=0, total=0.0, min=0.0, max=0.0, sum_of_squares=0.0): self.count = count self.total = total self.min = min self.max = max self.sum_of_squares = sum_of_squares def __setattr__(self, name, value): self[name] = value def __getattr__(self, name): return self[name] def merge_stats(self, other): self.total += other.total self.min = self.count and min(self.min, other.min) or other.min self.max = max(self.max, other.max) self.sum_of_squares += other.sum_of_squares self.count += other.count def merge_value(self, value): self.total += value self.min = self.count and min(self.min, value) or value self.max = max(self.max, value) self.sum_of_squares += value ** 2 self.count += 1 Copy This class is itself a dictionary and so an instance of it can be passed directly as the value. This might then be used as: application = newrelic.agent.register_application() def sample_value(): return ... def report_custom_metrics(): count = 0 stats = Stats() while True: count += 1 stats.merge_value(sample_value()) if count % 60 == 0: newrelic.agent.record_custom_metric('Custom/Value', stats, application) stats = Stats() time.sleep(1.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy Custom metric data sources The record_custom_metric() and record_custom_metrics() API calls still require explicit action on your part to push custom metrics to the agent. Pushing data to the agent, especially if being done from a background thread and done on a 60 second interval, can be problematic though. This is because when the data is pushed it may not sync precisely with when the agent is reporting data back to the data collector. If a background thread was pre aggregating metrics over a 60 second period and then recording them, if that falls close to the time when the agent is reporting data, it could occur either just before or just after the agent reports the data. This lack of synchronization in time could therefore result in no metrics for that sample being reported in one harvest cycle and two in the next, where as the intent would be that there is one per harvest cycle. The solution to this is for the agent to pull custom metrics from the producer of the metrics as part of the process of reporting data to ensure they will be reported immediately and synchronised with the harvest cycle. The source of such metrics in this pull-style API is called a metric data source. Registering a data source The API function for registering a metric data source is: newrelic.agent.register_data_source(source, application=None, name=None, settings=None, **properties) Copy Because of varying requirements around how custom metrics may need to be produced, a number of different ways are available of implementing the data source. The simplest type of data source is one which is providing a gauge metric. That is one where some value at that particular point in time is relevant and what has happened historically doesn't matter. import psutil import os @newrelic.agent.data_source_generator(name='Memory Usage') def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) newrelic.agent.register_data_source(memory_metrics) Copy The decorator used here is: newrelic.agent.data_source_generator(name=None, **properties) Copy It is specifically for wrapping a generator function, or a function which otherwise returns an iterable when called. The name when registering a data source is optional. It exists mainly so that when logging errors the message can give a more recognisable name for the data source. If name isn't passed to register_data_source(), then any name associated with the actual data source using the decorator will be used instead, or the name of the function if the data source itself is not named. If an application object is not provided when registering a data source, then the data source will be automatically associated with all applications for which data is being reported by the agent in that process. If an application is provided, the data source will only be associated with that specific application. Whether a data source is registered against an application explicitly or is applied to all applications, the agent needs to first be registered for that application. This would normally happen if using a data source in an existing web application process which was being monitored. If however you are using a data source in a standalone program to report only custom metrics, you still need to ensure that the API call register_application() is used if necessary to force the registration of the agent for an application before any data will be collected. Initialization of a data source Although the decorator provides the ability to name a data source, the more important reason for the decorator is that it hides the complexity of a sequence of setup steps to get a data source running. The sequence of these steps is: The data source is initialized, with a dictionary holding any configuration being passed to it to set it up to run in a particular way. Upon being initialized, the data source returns a dictionary of properties describing the data source. This includes a reference to a factory function for creating a specific instance of the data source provider. An instance of the data source provider is then created for a specific consumer (application) by calling the factory. The factory function is passed a dictionary describing the environment in which it is running, including the name of the consumer. Rewriting the above example so as to not rely on the decorator, we would have: import os import psutil def memory_metrics_data_source(settings): def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) def memory_metrics_factory(environ): return memory_metrics properties = {} properties['name'] = 'Memory Usage' properties['factory'] = memory_metrics_factory return properties newrelic.agent.register_data_source(memory_metrics_data_source) Copy The purpose of the more complex underlying protocol is to provide sufficient hook points to properly initialize data sources and customise them based on that configuration and the specifics of the consumer. Instances of a data source Nothing more needed to be done in the prior example because gauge metrics, which don't care about the last time they were generated, were being returned. Where a metric reflects something happening over time, and therefore needs to retain some state, we need though an ability to be able to create an instance of the data source. The factory function therefore provides the ability for an instance of a data source to be created for each application against which metrics are being reported. There is allowance for one instance of the data source per application rather than one per process, because the start and end times for the harvest cycle for different applications may be different. If there was only one per process in this scenario and the metric had a connection to the duration of the harvest cycle, then the resulting metrics wouldn't be correct for each application. The ability is therefore provided for a data source instance to be application specific. Using nested functions as above, a data source which needs to maintain state could therefore be written as. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') def cpu_metrics_data_source(settings, environ): state = {} state['last_timestamp'] = time.time() state['times'] = os.times() def cpu_metrics(): now = time.time() new_times = os.times() elapsed_time = now - state['last_timestamp'] user_time = new_times[0] - state['times'][0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) state['last_timestamp'] = now state['times'] = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) return cpu_metrics newrelic.agent.register_data_source(cpu_metrics_data_source) Copy The decorator used here is: newrelic.agent.data_source_factory(name=None, **properties) Copy For this case the decorator is wrapping a factory function. Because the decorator is automatically returning the properties for the data source when required, the factory takes both the settings and the description of the environ it is being used in. Using nested functions is a bit magic and requires the code to use a dictionary on the stack of the outer function to hold the state. The alternative is to implement the data source as an actual class with the decorator applied to the class. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = time.time() self.times = os.times() def __call__(self): now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy Life cycle of a data source Although a data source could produce metrics at any time, the agent itself isn't always reporting metrics for an application. Specifically, it will only start collecting metrics and report them once the agent has managed to register itself with the data collector for a specific application. This distinction is important for data sources which generate metrics based on a time period. It would be required to only have metrics produced by a data source to cover the period back to the point at which registration occurred, or back to the last time that metrics were reported by the agent. If this isn't done, the reported metrics will not align and so it will not be possible to ensure that they correlate properly with metrics from tracking of web transactions or background tasks. For this reason, the factory for a data source will only be called to create an instance of the data source when registration for the application has completed and metrics collection started. This ensures that any reference timestamp will be correct. If the agent run for a particular application is terminated, due to a server side forced restart resulting from server side configuration changes, or because of successive failures to report data to the data collector, then the data source will be dropped. A new instance of the data source will then be created when the agent has been able to reregister itself again for the application. The correct cleanup of a data source in this case will depend on prompt destruction of the data source object when it is dropped. Because of object reference count cycles, this cannot be relied upon. It is also desirable to avoid a data source needing to add a __del__() method in order to trigger cleanup actions because of the problems that a __del__() method introduces in the way of actually preventing prompt destruction of the object. For this reason, if a data source needs more control over setup and shutdown, including perhaps being able to stay persistent in memory and not be dropped, yet suspend calculations for metrics, then it can provide start() and stop() methods when being implemented as a class instance. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = None self.times = None def start(self): self.last_timestamp = time.time() self.times = os.times() def stop(self): self.last_timestamp = None self.times = None def __call__(self): if self.times is None: return now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('CPU/User Time', user_time) yield ('CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy With the start() and stop() methods defined, the instance of the data source will not be destroyed at the termination of the agent run but kept around. The agent at this point is then expecting that the data source will itself deal with the suspension of any aggregation of metrics, dropping any accumulated metrics and ensure that when the agent reregisters the application with the data collector and calls start() again, only then would tracking for metrics be resumed. Configuring a data source Data sources may not always be bound to one specific information source. It may be necessary to register a data source against different underlying information sources from which metrics are generated. In this case distinct settings can be passed when registering a data source using the register_data_source() function. When using a data factory, these settings will then be available when the data source is being initialized. @newrelic.agent.data_source_factory() class HostMonitorDataSource(object): def __init__(self, settings, environ): self.hostname = settings['hostname'] def __call__(self): ... newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-1)', settings=dict(hostname='host-1')) newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-2)', settings=dict(hostname='host-2')) Copy If provision of settings is optional, the data source should only attempt to access settings if the settings option is not None. Even if supplied a dictionary, it should also cope with missing settings in the dictionary. Setup from configuration file Although the examples here showed the use of the register_data_source() API call, this would not be the normal way by which data sources would be registered. This is not the preferred way as it would require modifications to the application to import the module for the data source and register it. Instead, the primary way for defining and integrating data sources into an existing monitored web application would be to list them in the agent configuration file. This entails adding an additional section in the agent configuration file for each data source with prefix data-source:: [data-source:process-info] enabled = true function = samplers.process_info:process_info_data_source Copy If registering a data source from the agent configuration file, there should be no separate registration for the same data source being performed using the register_data_source() function occuring in your application code or in the module defining the data source. If there is, then two instances of the data source would end up being registerd. If needing to provide specific settings for a data source, this can be done by creating a separate section in the agent configuration file and referring to the section name in the settings value in the data source configuration. [data-source:host-monitor] enabled = true function = samplers.process_info:process_info_data_source name = Host Monitor (host-1) settings = host-monitor:host-1 [host-monitor:host-1] hostname = host-1 Copy As data source settings supplied via the configuration file will always be passed as string values, it is recommended that even when using register_data_source() with application code to register a data source and provide settings explicitly, that strings be used for setting values. The data source should then deal with the conversion to a different type such as a numeric value or list of values.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.51543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Configuring</em> a data source",
        "tags": "<em>Agents</em>",
        "body": " application is terminated, due to a server side forced restart resulting from server side <em>configuration</em> changes, or because of successive failures to report data to the data collector, then the data source will be dropped. A new instance of the data source will then be created when the <em>agent</em> has been"
      },
      "id": "617dbf9f196a67adbbf7dfa4"
    },
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-30T17:04:34Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 78.8787,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Python <em>agent</em>",
        "sections": "Browser monitoring and the Python <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>agent</em> with your Python <em>agent</em>, ensure you have the latest release. For more information, see the <em>agent</em> installation instructions. <em>Support</em> for automatic instrumentation The Python <em>agent</em> only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/configuration/view-config-values-your-app": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.97092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " the UI for apps that use other New Relic <em>agents</em>: Go to one.newrelic.com and click <em>APM</em>. Click on your app. Then click Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. Once you set any of these options from the UI, they will override any conflicting options in the <em>agent</em>&#x27;s <em>configuration</em> file"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.04556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic <em>agents</em> support HTTPS. If the <em>configuration</em> is not set appropriately, the <em>agent</em> will override the property to ensure all data in transit per"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Tip",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "e0027e4ca72d231ea54847b3b7cf7cf8be0c7df6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-12-31T02:18:07Z",
      "updated_at": "2021-10-31T09:38:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip APM's configurable security policies is available in limited release for approved New Relic accounts. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.71324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " security website. Compatibility and requirements <em>APM</em> <em>agent</em> versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security"
      },
      "id": "617e6431e7b9d23689c05c1f"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/troubleshooting/agent-nrintegrationerrors-appear-insights": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.84337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> configuration",
        "sections": "Server-side <em>agent</em> configuration",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all <em>APM</em> <em>agents</em> monitoring that application, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "Get environment data about your APM app",
        "Problem",
        "Solution"
      ],
      "title": "Get environment data about your APM app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Troubleshooting"
      ],
      "external_id": "07870669016a0c24b9cd50fcf67966ea55ef9b49",
      "image": "https://docs.newrelic.com/static/1a6d2627ddd9082d34cdd5b81cc29035/c1b63/troubleshooting-apm-environment.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/troubleshooting/get-environment-data-about-your-apm-app/",
      "published_at": "2021-12-31T02:20:14Z",
      "updated_at": "2021-10-23T19:51:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You need an easy way to get information about your application's environment, such as: What services a particular agent version is using What apps have outdated agent versions What hosts use which agents What values apply to specific agent settings Solution To see which services and settings apply to an agent, or to see which agent uses a specific service or setting, go to one.newrelic.com. Click on your app in the list, then click Settings > Environment > Environment snapshot. The Environment snapshot page helps you connect payloads from agents that include environment data, so you have a sense of what monitoring data is recorded. This also helps you more easily identify discrepancies across your services, and determine what might need to be updated. In the following example, the user mouses over the second agent on the list. Most of the settings for this agent are consistent with others, but it's easy to see specific host settings for logical processors, physical cores, and Ruby patch levels. Also notice that this agent is using an earlier Ruby version. one.newrelic.com > APM > Settings > Environment > Environment snapshot: To see specific settings that apply to an agent and its services, or to see which of a setting's values apply to specific agents, mouse over any agent or value. Information on the Environment snapshot page depends on the APM agent you use. For example, apps using the Ruby agent show settings for gems, while apps using the Java agent show settings for jars.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.01239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get environment data about your <em>APM</em> app",
        "sections": "Get environment data about your <em>APM</em> app",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " and its services, or to see which of a setting&#x27;s values apply to specific <em>agents</em>, mouse over any <em>agent</em> or value. Information on the Environment snapshot page depends on the <em>APM</em> <em>agent</em> you use. For example, apps using the Ruby <em>agent</em> show settings for gems, while apps using the Java <em>agent</em> show settings for jars."
      },
      "id": "617e649c28ccbc8b5a7ff459"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.20085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "New Relic&#x27;s default <em>APM</em> <em>agent</em> settings provide a high level of security. However, you may need to guarantee that even if the default <em>APM</em> <em>agent</em> settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on <em>APM</em>"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    }
  ],
  "/docs/apm/agents/manage-apm-agents/troubleshooting/get-environment-data-about-your-apm-app": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-31T02:19:18Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.84332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> configuration",
        "sections": "Server-side <em>agent</em> configuration",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all <em>APM</em> <em>agents</em> monitoring that application, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "APM agent NRIntegrationError config mismatch issue",
        "Problem",
        "Solution",
        "Go",
        "Tip",
        "Java",
        ".NET",
        "Node.js",
        "Python",
        "Ruby"
      ],
      "title": "APM agent NRIntegrationError config mismatch issue",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Troubleshooting"
      ],
      "external_id": "32e59fa3b63faa8465002f68055ba92dce9f838b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/troubleshooting/agent-nrintegrationerrors-appear-insights/",
      "published_at": "2021-12-31T02:20:03Z",
      "updated_at": "2021-10-23T19:52:29Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem An NrIntegrationError event is generated that has the following message: Configuration mismatch: Agent configured harvest limit for EVENT TYPE exceeds maximum limit; limit adjusted to LIMIT Copy Solution This is caused by a configuration mismatch with the agent. See the relevant agent solution to resolve your configuration mismatch: Go In your newrelic.Config: For transaction events, adjust the value of TransactionEvents.MaxSamplesStored. Tip The Go Agent currently does not support adjusting this value for custom events. Java In your newrelic.yml: For transaction events, adjust the value of transaction_events.max_samples_stored. For custom events, adjust the value of custom_events.max_samples_stored. .NET In your newrelic.config: For transaction events, adjust the value of the maximumSamplesStored attribute under the transactionEvents element. For custom events, adjust the value of the maximumSamplesStored attribute under the customEvents element. Node.js For transaction events, in the transaction_events: { section of your app's newrelic.js, adjust the value of max_samples_per_minute. For custom events, in the custom_insights_events: { section of your app's newrelic.js, adjust the value of max_samples_stored. Python In your newrelic.ini: For transaction events, adjust the value of event_harvest_config. harvest_limits.analytic_event_data. For custom events, adjust the value of event_harvest_config.harvest_limits.custom_event_data. For error events, adjust the value of event_harvest_config.harvest_limits.error_event_data. For span events, adjust the value of event_harvest_config.harvest_limits.span_event_data. Ruby In your newrelic.yml: For transaction events, adjust the value of analytics_events.max_samples_stored. For custom events, adjust the value of custom_events.max_samples_stored. For error events, adjust the value of error_collector.max_event_samples_stored. Tip This error does not apply to the C SDK or PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.938286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>agent</em> NRIntegrationError config mismatch issue",
        "sections": "<em>APM</em> <em>agent</em> NRIntegrationError config mismatch issue",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "Problem An NrIntegrationError event is generated that has the following message: Configuration mismatch: <em>Agent</em> configured harvest limit for EVENT TYPE exceeds maximum limit; limit adjusted to LIMIT Copy Solution This is caused by a configuration mismatch with the <em>agent</em>. See the relevant <em>agent</em>"
      },
      "id": "617e521e196a675a64f7e648"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "460ad5339fa585b7fcf6db77644b85ddf015c7d6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-12-31T02:18:28Z",
      "updated_at": "2021-12-10T00:20:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing model require Enterprise edition. Customers on our original pricing model have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI For users on our original user model: Only the account owner can configure this. Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. For users on the New Relic One user model: Get the account ID for the account you want to enable. Then use that to go to this URL: https://rpm.newrelic.com/accounts/YOUR_ACCOUNT_ID. On that page, you can configure high security mode. If the agent is configured for high security via the UI but not locally, then the agent connections are rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.20084,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "New Relic&#x27;s default <em>APM</em> <em>agent</em> settings provide a high level of security. However, you may need to guarantee that even if the default <em>APM</em> <em>agent</em> settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on <em>APM</em>"
      },
      "id": "617e646328ccbc8b5a7ff3ac"
    }
  ],
  "/docs/apm/agents/net-agent/attributes/custom-attributes-net": [
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.885666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the form of <em>attributes</em>. This method requires .<em>NET</em> <em>agent</em> version and .<em>NET</em> <em>agent</em> API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being"
      },
      "id": "617e9ba328ccbc6a037ff538"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/attributes/enable-disable-attributes-net": [
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.88565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the form of <em>attributes</em>. This method requires .<em>NET</em> <em>agent</em> version and .<em>NET</em> <em>agent</em> API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being"
      },
      "id": "617e9ba328ccbc6a037ff538"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15349,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/attributes/net-attribute-examples": [
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.88565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the form of <em>attributes</em>. This method requires .<em>NET</em> <em>agent</em> version and .<em>NET</em> <em>agent</em> API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being"
      },
      "id": "617e9ba328ccbc6a037ff538"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15349,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Cloud Services",
        "Important",
        "Check Web or Worker role's location",
        "Install the NuGet package for Cloud Services",
        "Instrument Worker role",
        "Custom instrumentation example for Worker role",
        "Custom instrumentation file deployment",
        "Optional: Create custom config file",
        "View your app's performance"
      ],
      "title": "Install the .NET agent on Azure Cloud Services",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "4d29407927b8e103f97458ec4db3f7b67e9b446a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-installation/install-net-agent-azure-cloud-services/",
      "published_at": "2021-12-31T02:28:36Z",
      "updated_at": "2021-10-23T19:55:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install APM's .NET agent on Microsoft's Azure Cloud Services platform. This is not the same as installing the Infrastructure integrations for Microsoft Azure. To make sure you are using the most relevant instructions, first see the .NET agent install overview. Important Before installing the NuGet package into a multi-project Visual Studio solution, make sure you have selected the correct project for your New Relic .NET application (for example, a specific website project). Check Web or Worker role's location If Service files are nested within a Solution folder, the NuGet installer cannot locate or update the necessary files. This will cause issues with the .NET agent setup, which will in turn prevent the agent from reporting metrics on your Cloud Service. Recommendation: Place the Web or Worker role at the root of the solution before installing the NuGet package. Once the New Relic .NET agent is installed, you can move the Cloud role back into the Solution folder. Install the NuGet package for Cloud Services Important The NuGet packages in this procedure support only the old packages.config. They do not support the new PackageReference format. For more information see Microsoft's package reference documentation For multi-project solutions, make sure you have selected the correct project (for example, a specific website project) before installing the NuGet package. Open your Visual Studio solution, or create a new one by selecting File > New > Project. For multi-project solutions, make sure you have selected the correct project (for example, a specific website project). If you do not already have an Azure Cloud Service project in your solution, add one by right-clicking your app in the Solution Explorer and selecting Add Windows Azure Cloud Service Project. Open the Package Manager console by selecting Tools > Library Package Manager > Package Manager Console. Set your project as the default project. From the Package Manager command prompt, type Install-Package NewRelicWindowsAzure and press Enter. Follow the prompts to enter your New Relic license key and your application name as you want it to appear in the New Relic UI. Or, use your solution name as the default app name. From the Solution Explorer, right-click your Azure Cloud Service project, and select Publish. If this is your first time deploying this app to Azure, enter your Azure credentials. If applicable, instrument methods for Worker roles. Instrument Worker role A Worker role is a non-web process run as an Azure Cloud Service. To instrument a Worker role, you must create custom transactions. The .NET agent automatically instruments external calls and database calls, but it does not instrument default methods for transactions. Creating custom transactions solves this. After the Worker role starts up and the method executes, transaction data will appear in the APM Summary and Transactions pages under the Non-web category. The NuGet installer automatically adds the NewRelic.AppName parameter to the application config. This appears as <YOUR_WORKER_ROLE_NAME>.dll.config in E:\\approot. The .NET agent also automatically instruments WaWorkerHost.exe. This is the name of the actual Worker role process. Custom instrumentation example for Worker role This is a custom instrumentation example for a Worker role. It creates a custom transaction named ProcessMessage. The transaction begins when the ProcessMessage method is entered, and it ends when the method returns. The following example uses MyWorkerRole as the namespace. If you do not specify a name, it will default to the Solution name. namespace MyWorkerRole { public class NotificationQueue { public bool ProcessMessage(Message message) { // code to process message } } } Copy Here is the custom instrumentation file for the code: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerfactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Custom/ProcessMessage\"> <match assemblyname=\"MyWorkerRole\" classname=\"MyWorkerRole.NotificationQueue\"> <exactmethodmatcher methodName=\"ProcessMessage\" /> </match> </tracerfactory> </instrumentation> </extension> Copy On a local installation, place this instrumentation file in C:\\ProgramData\\New Relic\\.NET Agent\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an Azure Cloud Service deployment: In your Azure Cloud project, add the instrumentation file to your Worker role inside the Roles folder. After installing the New Relic .NET agent NuGet package, locate newrelic.cmd in your Worker Role project. Find the statement IF %ERRORLEVEL% EQU 0 within the :INSTALL_NEWRELIC_AGENT block, and add the following statement to the conditional: IF %ERRORLEVEL% EQU 0 ( copy /Y \"%RoleRoot%\\approot\\MyInstrumentation.xml\" \"%NR_HOME%\\extensions\" >> %RoleRoot%\\nr.log ) ELSE ( Copy In this example, the newrelic.cmd batch file copies the custom instrumentation file to the Extensions folder in D:\\ProgramData\\New Relic\\.NET Agent\\, or %NR_HOME%. This example uses MyInstrumentation.xml, but any name will work as long as the file name and copy command match, and the file is valid XML. Optional: Create custom config file You can create a custom configuration file in Visual Studio. This allows you to make changes to newrelic.config inside Visual Studio, without having to remote into your Azure Role instance every time you make a change. Whenever you publish your app, the config file in Visual Studio is automatically uploaded to the remote host. The choices you make with the installation wizard do not matter. Installing locally does not affect your Azure development environment. In Visual Studio, select the Solution Explorer, then open NewRelicAgent_x64_XYZ.msi. Follow the steps to install the agent locally. Import newrelic.config into your project: In Solution Explorer > Cloud Project, right-click the Web Role, then select Add > Existing Item. Navigate to C: \\ ProgramData \\ New Relic \\ .NET Agent and select newrelic.config. From C: \\ ProgramData \\ New Relic \\ .NET Agent, edit newrelic.cmd. In the :INSTALL_NEWRELIC_AGENT section, find this statement: IF $ERRORLEVEL% EQU 0 ( Copy Add the following code as another statement inside the IF block, then save the file: copy /Y \"%RoleRoot%\\approot\\newrelic.config\" \"%NR_HOME%\" >> %RoleRoot%\\nr.log Copy You can now edit the newrelic.config hosted in Visual Studio. Whenever you publish your app, the copy command will upload the config file to the remote host. View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Cloud Services. To view your app's performance in APM: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure Portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure Portal by going to New Relic Accounts > choose your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.45853,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&gt; &lt;&#x2F;tracerfactory&gt; &lt;&#x2F;instrumentation&gt; &lt;&#x2F;extension&gt; Copy On a local <em>installation</em>, place this instrumentation file in C:\\ProgramData\\New Relic\\.<em>NET</em> <em>Agent</em>\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an <em>Azure</em> Cloud Service deployment: In your"
      },
      "id": "617e59b164441f1faffbd8a6"
    }
  ],
  "/docs/apm/agents/net-agent/azure-installation/install-net-agent-azure-cloud-services": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "98e8f038d2e302e37bb01a6e7f38ac07d6f5aa62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-12-31T02:21:42Z",
      "updated_at": "2021-10-23T19:55:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.33562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "617e59ef28ccbc30227ffee8"
    }
  ],
  "/docs/apm/agents/net-agent/azure-installation/install-net-agent-azure-service-fabric": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "98e8f038d2e302e37bb01a6e7f38ac07d6f5aa62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-12-31T02:21:42Z",
      "updated_at": "2021-10-23T19:55:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.33562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "617e59ef28ccbc30227ffee8"
    }
  ],
  "/docs/apm/agents/net-agent/azure-installation/install-net-agent-azure-web-apps": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.766785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.153366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "98e8f038d2e302e37bb01a6e7f38ac07d6f5aa62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-12-31T02:21:42Z",
      "updated_at": "2021-10-23T19:55:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.33561,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "617e59ef28ccbc30227ffee8"
    }
  ],
  "/docs/apm/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.766785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.153366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Azure Web Apps: Using Always On and no data appears",
        "Important",
        "Problem",
        "Cause",
        "Solution",
        "Other options",
        "Use Kudu to name your app.",
        "Use app/web.config to name your app.",
        "Use Synthetic monitoring to monitor your website."
      ],
      "title": "Azure Web Apps: Using Always On and no data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d428aa4ed9ebda700fc9e5abda0a5800f12b971a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears/",
      "published_at": "2021-12-31T02:23:09Z",
      "updated_at": "2021-10-23T17:44:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Beginning with .NET agent version 8.22.181.0, Azure's Always On setting may be enabled without interfering with the agent. If you'd like to use Always On, simply update the agent. If your application targets .NET Framework 4.0 or lower, Always On will still interfere with the agent and the workarounds below are still applicable. Problem You installed New Relic's .NET agent through Microsoft Azure Web Apps and are using Azure's Always On setting. After generating some traffic and waiting a few minutes for data collection to start for your app, data still does not appear in the APM user interface. Cause If no data appears within five minutes, Azure's Always On setting may be conflicting with New Relic. This feature is only available in Azure's Basic and Standard modes. The Always On setting prevents the environment variable APP_POOL_ID from being set. New Relic's .NET agent needs this environment variable to get the app name. If the agent cannot determine an application name, then it won't start up. Solution If you are using Microsoft's Standard or Basic tiers with the Azure Portal, ensure that the Always On setting is disabled. In the Azure Portal, select (your app) > Settings > Application Settings. Set the Always On toggle to Off. Other options Here are some other options you can try. If these do not work, you must turn off the Always On setting. Use Kudu to name your app. To name your application in the local newrelic.config using Kudu: From the Microsoft Azure Portal, select (your app) > Tools > Kudu, then select Go. Select Debug Console > CMD. Select Site > wwwroot > newrelic. Select the edit icon for newrelic.config, and add: <application> <name> Your app's name </name> </application> Copy Save and restart your application. Use app/web.config to name your app. Important This option has been found to only be a temporary fix. The .NET agent may stop reporting intermittently. To name your application in its app/web.config file: Add the following key to appSettings: <appSettings> <add key=\"NewRelic.AppName\" value=\"Your app's name\" /> </appSettings> Copy Restart your instance. Use Synthetic monitoring to monitor your website. Depending on your usage of Always On, you can try using Synthetic monitoring to keep your website active. If you are not using the Always On setting, you can try using the Synthetic monitoring free pinger monitor. If you are using the Always On setting, Synthetic monitoring needs to be able to reach an endpoint for your worker roles. If it can't, you can try using a Synthetics scripted monitor to run on your site.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.35058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "sections": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Important Beginning with .<em>NET</em> <em>agent</em> version 8.22.181.0, <em>Azure</em>&#x27;s Always On setting may be enabled without interfering with the <em>agent</em>. If you&#x27;d like to use Always On, simply update the <em>agent</em>. If your application targets .<em>NET</em> Framework 4.0 or lower, Always On will still interfere with the <em>agent</em>"
      },
      "id": "617e9f5764441f10a6fbf04f"
    }
  ],
  "/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1533,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Azure Web Apps: Using Always On and no data appears",
        "Important",
        "Problem",
        "Cause",
        "Solution",
        "Other options",
        "Use Kudu to name your app.",
        "Use app/web.config to name your app.",
        "Use Synthetic monitoring to monitor your website."
      ],
      "title": "Azure Web Apps: Using Always On and no data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d428aa4ed9ebda700fc9e5abda0a5800f12b971a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears/",
      "published_at": "2021-12-31T02:23:09Z",
      "updated_at": "2021-10-23T17:44:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Beginning with .NET agent version 8.22.181.0, Azure's Always On setting may be enabled without interfering with the agent. If you'd like to use Always On, simply update the agent. If your application targets .NET Framework 4.0 or lower, Always On will still interfere with the agent and the workarounds below are still applicable. Problem You installed New Relic's .NET agent through Microsoft Azure Web Apps and are using Azure's Always On setting. After generating some traffic and waiting a few minutes for data collection to start for your app, data still does not appear in the APM user interface. Cause If no data appears within five minutes, Azure's Always On setting may be conflicting with New Relic. This feature is only available in Azure's Basic and Standard modes. The Always On setting prevents the environment variable APP_POOL_ID from being set. New Relic's .NET agent needs this environment variable to get the app name. If the agent cannot determine an application name, then it won't start up. Solution If you are using Microsoft's Standard or Basic tiers with the Azure Portal, ensure that the Always On setting is disabled. In the Azure Portal, select (your app) > Settings > Application Settings. Set the Always On toggle to Off. Other options Here are some other options you can try. If these do not work, you must turn off the Always On setting. Use Kudu to name your app. To name your application in the local newrelic.config using Kudu: From the Microsoft Azure Portal, select (your app) > Tools > Kudu, then select Go. Select Debug Console > CMD. Select Site > wwwroot > newrelic. Select the edit icon for newrelic.config, and add: <application> <name> Your app's name </name> </application> Copy Save and restart your application. Use app/web.config to name your app. Important This option has been found to only be a temporary fix. The .NET agent may stop reporting intermittently. To name your application in its app/web.config file: Add the following key to appSettings: <appSettings> <add key=\"NewRelic.AppName\" value=\"Your app's name\" /> </appSettings> Copy Restart your instance. Use Synthetic monitoring to monitor your website. Depending on your usage of Always On, you can try using Synthetic monitoring to keep your website active. If you are not using the Always On setting, you can try using the Synthetic monitoring free pinger monitor. If you are using the Always On setting, Synthetic monitoring needs to be able to reach an endpoint for your worker roles. If it can't, you can try using a Synthetics scripted monitor to run on your site.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.35058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "sections": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Important Beginning with .<em>NET</em> <em>agent</em> version 8.22.181.0, <em>Azure</em>&#x27;s Always On setting may be enabled without interfering with the <em>agent</em>. If you&#x27;d like to use Always On, simply update the <em>agent</em>. If your application targets .<em>NET</em> Framework 4.0 or lower, Always On will still interfere with the <em>agent</em>"
      },
      "id": "617e9f5764441f10a6fbf04f"
    }
  ],
  "/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-unable-open-log-file": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1533,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Azure Web Apps: Using Always On and no data appears",
        "Important",
        "Problem",
        "Cause",
        "Solution",
        "Other options",
        "Use Kudu to name your app.",
        "Use app/web.config to name your app.",
        "Use Synthetic monitoring to monitor your website."
      ],
      "title": "Azure Web Apps: Using Always On and no data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d428aa4ed9ebda700fc9e5abda0a5800f12b971a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears/",
      "published_at": "2021-12-31T02:23:09Z",
      "updated_at": "2021-10-23T17:44:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Beginning with .NET agent version 8.22.181.0, Azure's Always On setting may be enabled without interfering with the agent. If you'd like to use Always On, simply update the agent. If your application targets .NET Framework 4.0 or lower, Always On will still interfere with the agent and the workarounds below are still applicable. Problem You installed New Relic's .NET agent through Microsoft Azure Web Apps and are using Azure's Always On setting. After generating some traffic and waiting a few minutes for data collection to start for your app, data still does not appear in the APM user interface. Cause If no data appears within five minutes, Azure's Always On setting may be conflicting with New Relic. This feature is only available in Azure's Basic and Standard modes. The Always On setting prevents the environment variable APP_POOL_ID from being set. New Relic's .NET agent needs this environment variable to get the app name. If the agent cannot determine an application name, then it won't start up. Solution If you are using Microsoft's Standard or Basic tiers with the Azure Portal, ensure that the Always On setting is disabled. In the Azure Portal, select (your app) > Settings > Application Settings. Set the Always On toggle to Off. Other options Here are some other options you can try. If these do not work, you must turn off the Always On setting. Use Kudu to name your app. To name your application in the local newrelic.config using Kudu: From the Microsoft Azure Portal, select (your app) > Tools > Kudu, then select Go. Select Debug Console > CMD. Select Site > wwwroot > newrelic. Select the edit icon for newrelic.config, and add: <application> <name> Your app's name </name> </application> Copy Save and restart your application. Use app/web.config to name your app. Important This option has been found to only be a temporary fix. The .NET agent may stop reporting intermittently. To name your application in its app/web.config file: Add the following key to appSettings: <appSettings> <add key=\"NewRelic.AppName\" value=\"Your app's name\" /> </appSettings> Copy Restart your instance. Use Synthetic monitoring to monitor your website. Depending on your usage of Always On, you can try using Synthetic monitoring to keep your website active. If you are not using the Always On setting, you can try using the Synthetic monitoring free pinger monitor. If you are using the Always On setting, Synthetic monitoring needs to be able to reach an endpoint for your worker roles. If it can't, you can try using a Synthetics scripted monitor to run on your site.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.35058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "sections": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Important Beginning with .<em>NET</em> <em>agent</em> version 8.22.181.0, <em>Azure</em>&#x27;s Always On setting may be enabled without interfering with the <em>agent</em>. If you&#x27;d like to use Always On, simply update the <em>agent</em>. If your application targets .<em>NET</em> Framework 4.0 or lower, Always On will still interfere with the <em>agent</em>"
      },
      "id": "617e9f5764441f10a6fbf04f"
    }
  ],
  "/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.766655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Azure Cloud Services: No data appears",
        "Problem",
        "Solution"
      ],
      "title": "Azure Cloud Services: No data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "552beae09bbb95650dd5f9cb1a8a36777f403aba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears/",
      "published_at": "2021-12-31T02:22:27Z",
      "updated_at": "2021-10-23T17:44:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem You installed New Relic's .NET agent through Microsoft Azure Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution In order for the .NET agent to start up and attach to your app, at least one metric must be collected. If you have an external call or database call that New Relic instruments, then your app will report data to your APM Summary page. In addition, information about external calls will appear on your app's Service maps. Without custom instrumentation, Worker roles only report database calls and external calls. (Instrumenting a Worker Role is similar to instrumenting a custom application.) To view other details, you must gather custom metrics using New Relic's .NET API and view them in a custom dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.5085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Cloud Services: No data appears",
        "sections": "<em>Azure</em> Cloud Services: No data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem You installed New Relic&#x27;s .<em>NET</em> <em>agent</em> through Microsoft <em>Azure</em> Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution"
      },
      "id": "617e5a0528ccbc4354800476"
    }
  ],
  "/docs/apm/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.766655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Azure Web Apps: Using Always On and no data appears",
        "Important",
        "Problem",
        "Cause",
        "Solution",
        "Other options",
        "Use Kudu to name your app.",
        "Use app/web.config to name your app.",
        "Use Synthetic monitoring to monitor your website."
      ],
      "title": "Azure Web Apps: Using Always On and no data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d428aa4ed9ebda700fc9e5abda0a5800f12b971a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears/",
      "published_at": "2021-12-31T02:23:09Z",
      "updated_at": "2021-10-23T17:44:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Beginning with .NET agent version 8.22.181.0, Azure's Always On setting may be enabled without interfering with the agent. If you'd like to use Always On, simply update the agent. If your application targets .NET Framework 4.0 or lower, Always On will still interfere with the agent and the workarounds below are still applicable. Problem You installed New Relic's .NET agent through Microsoft Azure Web Apps and are using Azure's Always On setting. After generating some traffic and waiting a few minutes for data collection to start for your app, data still does not appear in the APM user interface. Cause If no data appears within five minutes, Azure's Always On setting may be conflicting with New Relic. This feature is only available in Azure's Basic and Standard modes. The Always On setting prevents the environment variable APP_POOL_ID from being set. New Relic's .NET agent needs this environment variable to get the app name. If the agent cannot determine an application name, then it won't start up. Solution If you are using Microsoft's Standard or Basic tiers with the Azure Portal, ensure that the Always On setting is disabled. In the Azure Portal, select (your app) > Settings > Application Settings. Set the Always On toggle to Off. Other options Here are some other options you can try. If these do not work, you must turn off the Always On setting. Use Kudu to name your app. To name your application in the local newrelic.config using Kudu: From the Microsoft Azure Portal, select (your app) > Tools > Kudu, then select Go. Select Debug Console > CMD. Select Site > wwwroot > newrelic. Select the edit icon for newrelic.config, and add: <application> <name> Your app's name </name> </application> Copy Save and restart your application. Use app/web.config to name your app. Important This option has been found to only be a temporary fix. The .NET agent may stop reporting intermittently. To name your application in its app/web.config file: Add the following key to appSettings: <appSettings> <add key=\"NewRelic.AppName\" value=\"Your app's name\" /> </appSettings> Copy Restart your instance. Use Synthetic monitoring to monitor your website. Depending on your usage of Always On, you can try using Synthetic monitoring to keep your website active. If you are not using the Always On setting, you can try using the Synthetic monitoring free pinger monitor. If you are using the Always On setting, Synthetic monitoring needs to be able to reach an endpoint for your worker roles. If it can't, you can try using a Synthetics scripted monitor to run on your site.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.35057,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "sections": "<em>Azure</em> Web Apps: Using Always On and no data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Important Beginning with .<em>NET</em> <em>agent</em> version 8.22.181.0, <em>Azure</em>&#x27;s Always On setting may be enabled without interfering with the <em>agent</em>. If you&#x27;d like to use Always On, simply update the <em>agent</em>. If your application targets .<em>NET</em> Framework 4.0 or lower, Always On will still interfere with the <em>agent</em>"
      },
      "id": "617e9f5764441f10a6fbf04f"
    }
  ],
  "/docs/apm/agents/net-agent/configuration/name-your-net-application": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        ".NET agent configuration",
        "Configuration overview",
        "Important",
        "Configuration methods and precedence levels",
        "Required environment variables",
        "Caution",
        ".NET Framework environment variables",
        ".NET Core environment variables",
        "Profiler conflict explanation",
        "Optional environment variables",
        "Setup options, newrelic.config",
        "Configuration element",
        "agentEnabled",
        "maxStackTraceLines",
        "timingPrecision",
        "Service element",
        "licenseKey (required)",
        "sendEnvironmentInfo",
        "syncStartup",
        "sendDataOnExit",
        "sendDataOnExitThreshold",
        "completeTransactionsOnThread",
        "requestTimeout",
        "autoStart",
        "Obscuring key element",
        "Proxy element",
        "host",
        "port",
        "uriPath",
        "domain",
        "user",
        "password",
        "passwordObfuscated",
        "Log element",
        "level",
        "auditLog",
        "console",
        "directory",
        "fileName",
        "Application element (required)",
        "name",
        "disableSamplers",
        "Data transmission element",
        "putForDataSend",
        "Host name",
        "Set using config file",
        "Set using environment variable",
        "Cloud platform utilization",
        "detectAws",
        "detectAzure",
        "detectGcp",
        "detectPcf",
        "detectDocker",
        "detectKubernetes",
        "Instrumentation options",
        "Instrumentation element",
        "Applications element (instrumentation)",
        "Attributes element",
        "enabled",
        "include",
        "exclude",
        "Feature options",
        "App pools",
        "defaultBehavior",
        "applicationPool",
        "Cross application traces",
        "Error collection",
        "Tip",
        "captureEvents",
        "maxEventSamplesStored",
        "ignoreClasses",
        "ignoreMessages",
        "ignoreErrors (obsolete)",
        "ignoreStatusCodes",
        "expectedClasses",
        "expectedMessages",
        "expectedStatusCodes",
        "attributes",
        "High security mode",
        "Strip exception messages",
        "Transaction events",
        "maximumSamplesStored",
        "Custom events",
        "Custom parameters",
        "Labels (tags)",
        "Browser instrumentation",
        "autoInstrument",
        "requestPathsExcluded",
        "Slow queries",
        "Transaction traces",
        "transactionThreshold",
        "recordSql",
        "explainEnabled",
        "explainThreshold",
        "maxSegments",
        "maxExplainPlans",
        "maxStackTrace",
        "Datastore tracer",
        "instanceReporting",
        "databaseNameReporting",
        "queryParameters",
        "Distributed tracing",
        "excludeNewrelicHeader",
        "Disable span events via config file",
        "Disable span events via environment variable",
        "Infinite Tracing",
        "trace_observer",
        "Span events",
        "Capture HTTP Request Headers",
        "Settings in app.config or web.config",
        "Enable and disable the agent",
        "Application name",
        "License key",
        "Change newrelic.config location",
        "Settings in appsettings.json"
      ],
      "title": ".NET agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Configuration"
      ],
      "external_id": "fd9643d4551ea4fd76f3275edc05251e6dc52f5c",
      "image": "https://docs.newrelic.com/static/cffd7eb2d22c8e338531c38f35208c7c/c1b63/net-agent-config-settings-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/configuration/net-agent-configuration/",
      "published_at": "2021-12-30T21:58:48Z",
      "updated_at": "2021-12-14T22:59:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You'll be able to configure our .NET agent to suit your environnment after you create a New Relic account (it's free, forever) and install the .NET agent. Configuration overview APM agent configuration options allow you to control some aspects of how the agent behaves. Some of these config options are part of the basic install process (like setting your license key and app name), but most are more advanced settings, such as setting a log level, setting up proxy host access, excluding certain attributes, and enabling distributed tracing. The .NET agent gets its configuration from the newrelic.config file, which is generated as part of the install process. By default, only a global newrelic.config file is created, but you can also create app-local newrelic.config files for finer control over a multi-app system. Other ways to set config options include: using environment variables, or setting server-side configuration from the UI. For more on the various config options and what overrides what, see Config settings precedence. Support for both .NET Framework and .NET Core use the same configuration options and have the same APM features, unless otherwise stated. If you make changes to the config file and want to validate that it's in the right format, you can check it against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows) with any XSD validator. Important For IIS: after you change your newrelic.config or app.config file, perform an IISRESET from an administrative command prompt. Log level adjustments do not require a reset. Configuration methods and precedence levels Upon installation, the .NET agent's configuration file (newrelic.config) applies to all monitored applications, but you can configure the agent in other ways. Here's a diagram showing how different configuration options take precedence over one another: This diagram explains the order of precedence for different ways you might configure the .NET agent. Here are details about the configuration methods shown in the diagram, and their precedence levels: .NET configuration Details and precedence web.config or app.config or appsettings.json Configuration settings set in these files take highest precedence. However, if the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Environment variables Second-highest precedence. For more about these, see .NET environment variables. Server-side configuration Third-highest precedence. A limited number of server-side configuration settings are available; the other settings will come from other configuration sources. App-local newrelic.config Fourth-highest precedence. You can create app-local newrelic.config files to configure individual apps on a multi-app system. These local configuration files override settings in the global newrelic.config file. The agent looks for app-local config files in the following directories, in this order: A directory specified in your web.config or app.config file with the NewRelic.ConfigFile property The web app's root directory (with the app.config or web.config) The directory containing your app's executable file Note that the app-local config file must be complete and validate against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows). Default (global) newrelic.config Default source and the lowest precedence. Will configure all applications on a host in the absence of other config files. The global config file is located in the New Relic agent home directory: %PROGRAMDATA%\\New Relic\\.NET Agent Required environment variables New Relic's .NET agent relies on environment variables to tell the .NET Common Language Runtime (CLR) to attach New Relic to your processes. Some .NET agent install procedures (like the MSI installer) will automatically set these variables for you; some procedures will require you to manually set them. Caution Security recommendation: You should consider what users can set system environment variables. You should also secure the accounts under which your applications execute to prevent user environment variables overriding system environment variables .NET Framework environment variables For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. .NET Core environment variables For .NET Core, the following variables are required: Linux: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path/to/agent/directory CORECLR_PROFILER_PATH=\"${CORECLR_NEWRELIC_HOME}/libNewRelicProfiler.so\" Copy Windows: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. If your system has previously used monitoring services (non-New Relic), you may have a \"profiler conflict\" when trying to install and use the New Relic agent. More details: Profiler conflict explanation New Relic’s .NET agents rely on environment variables to tell the .NET Common Language Runtime (CLR) to load New Relic into your processes. The install-related environment variables are Microsoft variables, not New Relic variables. They can be used by other .NET profilers, and only one profiler can be attached to a process at a time. For this reason, if you have used previous application monitoring products, you may have profiler conflicts. For specific install instructions, see the .NET agent install documentation. Optional environment variables Some configuration options in New Relic's .NET agent can be set via environment variables as an alternative to setting them in a config file. Below is a list of environment variables recognized by the .NET agent with example values. NEW_RELIC_LICENSE_KEY=XXXXXXXX NEW_RELIC_LOG=MyApp.log NEW_RELIC_APP_NAME=Descriptive Name MAX_TRANSACTION_SAMPLES_STORED=500 MAX_EVENT_SAMPLES_STORED=500 NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_SPAN_EVENTS_ENABLED=false NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED=2000 NEW_RELIC_LABELS=foo:bar;zip:zap NEW_RELIC_CONFIG_OBSCURING_KEY=XXXXXXXX NEW_RELIC_DISABLE_SAMPLERS=true NEWRELIC_PROFILER_LOG_DIRECTORY=path\\to\\a\\directory (not configurable via config file) NEWRELIC_LOG_DIRECTORY=path\\to\\a\\directory (Insert a directory where you want to put the agent and profiler logs. You can't set this directory for both agent and profiler logs in the configuration file.) NEWRELIC_LOG_LEVEL=off|error|warn|info|debug|finest|all Copy If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Setup options, newrelic.config Use these options to setup and configure your agent via the newrelic.config file. The New Relic .NET agent supports the following categories of setup options: Configuration element Service element Obscuring key element Proxy element Log element Application element (configuration) Data transmission element Host name Configuration element The root element of the configuration document is a configuration element. <configuration xmlns=\"urn:newrelic-config\" agentEnabled=\"true\" maxStackTraceLines=\"50\" timingPrecision=\"low\"> Copy The configuration element supports the following attributes: agentEnabled Type Boolean Default true Enable or disable the New Relic agent. maxStackTraceLines Type Integer Default 80 The maximum number of stack frames to trace in any stack dump. timingPrecision Type String Default low Controls the precision of the timers. High precision will provide better data, but at a lower execution speed. Possible values are high and low. Service element The first child of the configuration element is a service element. The service element configures the agent's connection to the New Relic service. <service licenseKey=\"YOUR_LICENSE_KEY\" sendEnvironmentInfo=\"true\" syncStartup=\"false\" sendDataOnExit=\"false\" sendDataOnExitThreshold=\"60000\" autoStart=\"true\"/> Copy The service element supports the following attributes: licenseKey (required) Type String Default (none) Your New Relic license key. New Relic uses the license key to match your app's data to the correct account in the UI. Set the license key via environment variable. Alternatively, set the NEW_RELIC_LICENSE_KEY environment variable in the application's environment. NEW_RELIC_LICENSE_KEY=XXXXXXXX Copy sendEnvironmentInfo Type Boolean Default true Instructs the agent to record execution environment information. Environment information includes operating system, agent version, and which assemblies are available. syncStartup Type Boolean Default false Block application startup until the agent connects to New Relic. If set to true, the first transaction may take substantially longer to complete, because it is blocked until the connection to New Relic is finished. sendDataOnExit Type Boolean Default false Block application shutdown while the agent initiates a final harvest cycle and sends all data to New Relic. sendDataOnExitThreshold Type Integer Default 60000 Unit Milliseconds The minimum amount of time the process must run before the agent blocks it from shutting down. This setting only applies when sendDataOnExit is true. completeTransactionsOnThread Type Boolean Default false If false, the agent uses a pool thread to complete the transaction processing. If true, the agent will complete transaction processing on the request thread. requestTimeout Type Integer Default 2000 (sendDataOnExit enabled) 120000 (sendDataOnExit disabled) Unit Milliseconds The agent's request timeout when communicating with New Relic. autoStart Type Boolean Default True Automatically start the .NET agent when the first instrumented method is hit. Obscuring key element The obscuringKey element is an optional child of the service element. The .NET Agent uses this value to deobfuscate supported configuration values. For example, when an obfuscated proxy password is supplied, it will be deobfuscated using this key. <service licenseKey=\"YOUR_LICENSE_KEY\"> <obscuringKey>OBSCURING_KEY</obscuringKey> </service> Copy The obscuring key may also be configured by setting the NEW_RELIC_CONFIG_OBSCURING_KEY environment variable. Caution Security recommendation: The placement of the obscuring Key in the same configuration file as an obfuscated value may pose a security risk. Consider placing the obscuring key in an environment variable and limiting access to environment variables within your environment. Proxy element The proxy element is an optional child of the service element. The proxy element is used when the agent communicates to the New Relic back-end service via a proxy. <service licenseKey=\"YOUR_LICENSE_KEY\"> <proxy host=\"hostname\" port=\"PROXY_PORT\" uriPath=\"path/to/something.aspx\" domain=\"mydomain.com\" user=\"PROXY_USERNAME\" password=\"PROXY_PASSWORD\" passwordObfuscated=\"OBFUSCATED_PROXY_PASSWORD\"/> </service> Copy The proxy element supports the following attributes: host Type String Default (none) Defines the proxy host. port Type Integer Default 8080 Defines the proxy port. uriPath Type String Default (none) Optionally define a proxy URI path. domain Type String Default (none) Optionally define a domain to use when authenticating with the proxy server. user Type String Default (none) Optionally define a user name for authentication. password Type String Default (none) Optionally define a password for authentication. passwordObfuscated Type String Default (none) For additional security, the .NET Agent supports the use of an obfuscated proxy password with the passwordObfuscated attribute. The obfuscated proxy password is generated using the following New Relic CLI command: newrelic agent config obfuscate --key OBSCURING_KEY --value \"CLEAR_TEXT_PROXY_PASSWORD\" Copy Important When using an obfuscated proxy password, the obscuring key must also be configured. Log element The log element is a child of the configuration element. The log element configures New Relic's logging . The agent generates its own log file to keep its logging information separate from your application's logs. <log level=\"info\" auditLog=\"false\" console=\"false\" directory=\"PATH\\TO\\LOG\\DIRECTORY\" fileName=\"FILENAME.log\" /> Copy The log element supports the following attributes: level Type String Default info Defines the level of detail recorded in the log file. Possible values, in increasing order of detail, are: off error warn info debug finest all Alternatively, set the NEWRELIC_LOG_LEVEL environment variable in the application's environment. Important Increasing the log level will increase New Relic's performance impact. auditLog Type Boolean Default false Records all data sent to and received from New Relic in both an auditlog log file and the standard log file. console Type Boolean Default false Send log messages to the console, in addition to the log file. directory Type String Default C:\\ProgramData\\New Relic\\.NET Agent\\Logs The directory to hold log files generated by the agent. If this is omitted, then a directory named logs in the New Relic agent install area will be used by default. fileName Type String Default (none) Defines a name for the log file. If you do not define a fileName, the name is derived from the name of the monitored process. Alternatively, set the NEW_RELIC_LOG environment variable in the application's environment. NEW_RELIC_LOG=MyApp.log Copy Application element (required) The application element is a child of the configuration element. This required element defines your application name, and disables or enables sampling. name Type String Default My Application The name of your .NET application is a child of the application element. New Relic will aggregate your data according to this name. For example, if you have two running applications named AppA and AppB, you will see two applications in the New Relic interface: AppA and AppB. You can also assign up to three names to your app. The first name is the primary name. For example: <application> <name>MY APPLICATION PRIMARY</name> <name>SECOND APP NAME</name> <name>THIRD APP NAME</name> </application> Copy Alternatively, set the NEW_RELIC_APP_NAME environment variable in the application's environment. NEW_RELIC_APP_NAME=Descriptive Name Copy disableSamplers Type Boolean Default false Samplers collect information about memory and CPU consumption. Set this to true to disable sampling. Alternatively, set the NEW_RELIC_DISABLE_SAMPLERS environment variable in the application's environment. NEW_RELIC_DISABLE_SAMPLERS=true Copy Data transmission element The dataTransmission element is a child of the configuration element. This element affects how data is sent to New Relic and can be used if you have specific data transmission requirements. <dataTransmission putForDataSend=\"false\" compressedContentEncoding=\"deflate\"/> Copy The dataTransmission element supports the following attributes: putForDataSend Type Boolean Default false Defines the HTTP method used when sending data to New Relic. Set this to true to enable using the PUT method when sending data. The POST method is used by default. Host name If the default host name label in the APM UI is not useful, you can decorate that name in the New Relic UI with a display name. After the application process is restarted and the .NET agent is reporting again, the display name will appear in the Servers drop-down list. This host name setting does not affect the list of hosts on your application's Summary page. To set a display name, choose one of the following options. The environment variable takes precedence over the config file value. Then restart your application to see your changes in the New Relic UI. Set using config file Set the displayName attribute in the processHost element in newrelic.config. The processHost element is a child of the configuration element. <configuration . . . > <processHost displayName=\"CUSTOM_NAME\" /> </configuration> Copy Set using environment variable Set the NEW_RELIC_PROCESS_HOST_DISPLAY_NAME environment variable: NEW_RELIC_PROCESS_HOST_DISPLAY_NAME = \"CUSTOM_NAME\" Copy Cloud platform utilization Configures the utilization configuration element to control how the agent collects utilization information and sends it to the New Relic service to determine pricing. The agent can collect information from Amazon Web Services (AWS) EC2 instances, Docker containers, Azure, Google Cloud Platform, Pivotal Cloud Foundry, and Kubernetes. detectAws Type Boolean Default true Determines whether the agent polls AWS metadata API. detectAzure Type Boolean Default true Determines whether the agent polls Azure metadata API. detectGcp Type Boolean Default true Determines whether the agent polls GCP metadata API. detectPcf Type Boolean Default true Determines whether the agent polls PCF information from environment variables. detectDocker Type Boolean Default true Determines whether the agent reads Docker information from the file system. detectKubernetes Type Boolean Default true Determines whether the agent polls Kubernetes information from environment variables. Instrumentation options Use these options to configure which elements of your application and environment to instrument. New Relic for .NET supports the following categories of instrumentation options: Instrumentation element Applications element (instrumentation) Attributes element Instrumentation element The instrumentation element is a child of the configuration element. By default, the .NET agent instruments IIS asp worker processes and Azure web and worker roles. To instrument other processes, see Instrumenting custom applications. Applications element (instrumentation) The applications element is a child of the instrumentation element. The applications element specifies which non-web apps to instrument. It contains a name attribute. Important This is not the same as the application (configuration) element, which is a child of the configuration element. <instrumentation> <applications> <application name=\"MyService1.exe\" /> <application name=\"MyService2.exe\" /> <application name=\"MyService3.exe\" /> </applications> </instrumentation> Copy Attributes element An attribute is a key/value pair that determines the properties of an event or transaction. Each attribute is sent to APM transaction traces, APM error traces, Transaction events, TransactionError events, or PageView events. The primary attributes element enables or disables attribute collection for the .NET agent, and defines specific attributes to collect or exclude. You can also configure attribute settings based on their destination: Error collection, transaction traces, browser instrumentation, and transaction events. In this example, the agent excludes all attributes whose key begins with myApiKey (myApiKey.bar, myApiKey.value), but collects the custom attribute myApiKey.foo. <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> Copy You can view the .NET APM attributes on the .NET agent attributes page. You can also define custom attributes with the agent API call AddCustomAttribute. enabled Type Boolean Default true Enable or disable attribute collection. When set to false in the primary attribute element, this setting overrides all attribute settings for individual destinations. include Type String Default (none) If attributes are enabled, the agent will collect all attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. exclude Type String Default (none) If attributes are enabled, the agent will not collect attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. Feature options Use these options to enable, disable, and configure New Relic features. New Relic for .NET allows you to configure the following features: App pools Cross application traces Error collection High security mode Strip exception messages Transaction events Custom events Custom parameters Tags/labels Browser instrumentation Slow Queries Transaction traces Datastore tracer Distributed tracing Span events Capture HTTP Request Headers App pools Important This is only applicable to a system's global config file. The applicationPools element is a child of the configuration element. The applicationPools element specifies for the profiler exactly which application pools to instrument and uses the same name as the IIS application pool name. This configuration element is useful when you may need to instrument only a small subset of your app pools. For example, a given server might have several hundred application pools, but only a few of those pools need to be instrumented by the .NET agent. Here is an example of disabling instrumentation for specific application pools: <applicationPools> <applicationPool name=\"Foo\" instrument=\"false\"/> <applicationPool name=\"Bar\" instrument=\"false\"/> </applicationPools> Copy Here is an example of disabling instrumentation for all application pools currently executing on the server and enabling instrumentation for specific application pools: <applicationPools> <defaultBehavior instrument=\"false\"/> <applicationPool name=\"Foo\" instrument=\"true\"/> <applicationPool name=\"Bar\" instrument=\"true\"/> </applicationPools> Copy The applicationPools element supports the following elements: defaultBehavior Type Boolean Default false Defines how the .NET agent will behave on a \"global\" level for application pools served via IIS. The .NET agent instruments all application pools by default. When true, application pools listed under applicationPool with an instrument attribute set to false will not be instrumented. Essentially, when set to false, the application pool list acts as an allow list. When set to true, the application pool list acts as a deny list. applicationPool Defines instrumentation behavior for a specific application pool. The name attribute is the name of an application pool. Enable or disable profiling in the instrument attribute. Define this application in the name attribute. Cross application traces The crossApplicationTracer element is a child of the configuration element. crossApplicationTracer links transaction traces across applications. When linked in a service-oriented architecture, all instrumented applications that communicate with each other via HTTP will now \"link\" transaction traces with the applications that they call and the applications they are called by. Cross application tracing makes it easier to understand the performance relationship between services and applications. <crossApplicationTracer enabled=\"true\"/> Copy The crossApplicationTracer element supports the following attribute: enabled Type Boolean Default true Enable or disable cross application tracing Error collection The errorCollector element is a child of the configuration element. errorCollector configures error collection, which captures information about uncaught exceptions and sends them to New Relic. <errorCollector enabled=\"true\" captureEvents=\"true\" maxEventSamplesStored=\"100\"> <ignoreClasses> <errorClass>System.IO.FileNotFoundException</errorClass> <errorClass>System.Threading.ThreadAbortException</errorClass> </ignoreClasses> <ignoreMessages> <errorClass name=\"System.Exception\"> <message>Ignore message</message> <message>Ignore too</message> </errorClass> </ignoreMessages> <ignoreStatusCodes> <code>401</code> <code>404</code> </ignoreStatusCodes> <expectedClasses> <errorClass>System.ArgumentNullException</errorClass> <errorClass>System.ArgumentOutOfRangeException</errorClass> </expectedClasses> <expectedMessages> <errorClass name=\"System.Exception\"> <message>Expected message</message> <message>Expected too</message> </errorClass> </expectedMessages> <expectedStatusCodes>403,500-505</expectedStatusCodes> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </errorCollector> Copy Tip For an overview of error configuration in APM, see Manage errors in APM. Important expectedClasses, expectedMessages, and expectedStatusCodes configuration settings require .NET agent version 8.31.0.0 or higher. The errorCollector element supports the following elements and attributes: enabled Type Boolean Default true Enable or disable the error collector. captureEvents Type Boolean Default true Enable or disable the capturing of error events. maxEventSamplesStored Type Integer Default 100 Reservoir limit for error events. ignoreClasses A list of fully qualified class names to be ignored. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreErrors (obsolete) Type String Default (none) Lists specific exceptions to not report to New Relic. The full name of the exception should be used, such as System.IO.FileNotFoundException. ignoreStatusCodes Type String Default (none) Lists specific HTTP error codes to not report to New Relic. You can use standard integral HTTP error codes, such as just 401, or you may use Microsoft full status codes with decimal points, such as 401.4 or 403.18. The status codes should be equal to or greater than 400. expectedClasses A list of fully qualified class names to be marked as expected. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedStatusCodes A comma separated list of status codes. The list may include integer ranges, using a single dash (-) and will be inclusive of both the starting and ending integer in the range. attributes Use this sub-element to customize your agent attribute settings for error traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. High security mode The highSecurity element is a child of the configuration element. To enable high security mode, set this property to true and enable the high security property in the New Relic user interface. Enabling high security turns SSL on; request parameters, custom parameters and HTTP request headers are not collected; strip exception messages is enabled; and queries can't be sent to New Relic in their raw form. enabled Type Boolean Default false Enable or disable high security mode. Example: <highSecurity enabled=\"true\"/> Copy Strip exception messages The stripExceptionMessages element is a child of the configuration element. To enable strip exception messages, set this property to true. By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you enable high security mode, this is automatically changed to true, and the agent strips the messages from exceptions. enabled Type Boolean Default false Enable or disable strip exception messages. Example: <stripExceptionMessages enabled=\"true\"/> Copy Transaction events The transactionEvents element is a child of the configuration element. Use transactionEvents to configure transaction events. <transactionEvents enabled=\"true\" maximumSamplesStored=\"10000\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionEvents> Copy The transactionEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_TRANSACTION_SAMPLES_STORED environment variable in the application's environment. MAX_TRANSACTION_SAMPLES_STORED=500 Copy attributes Use this sub-element to customize your agent attribute settings for transaction events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to transaction events. Attribute settings can be applied globally to all event types to with this configuration setting. Caution When distributed tracing and/or Infinite Tracing are enabled, information from transaction events is applied to the root Span Event of the transaction. Consider applying any attribute settings for transaction events to span events and/or apply them as Global Attribute settings. Custom events The customEvents element is a child of the configuration element. Use customEvents to configure custom events. <customEvents enabled=\"true\" maximumSamplesStored=\"10000\"/> Copy The CustomEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_EVENT_SAMPLES_STORED environment variable in the application's environment. MAX_EVENT_SAMPLES_STORED=500 Copy Custom parameters The customParameters element is a child of the configuration element. Use customParameters to configure custom parameters. <customParameters enabled=\"true\" /> Copy The CustomParameters element supports the following attributes: enabled Type Boolean Default true Enable or disable the capture of custom parameters. Labels (tags) The labels element is a child of the configuration element. This sets tag names and values. The list is a semicolon delimited list of colon-separated name and value pairs. You can also use with the NEW_RELIC_LABELS environment variable. Example: <labels>foo:bar;zip:zap</labels> Copy Browser instrumentation The browserMonitoring element is a child of the configuration element. browserMonitoring configures browser monitoring in your .NET application. Browser gives you insight your end users' performance experience. This is accomplished by measuring the time it takes for your users' browsers to download and render your webpages by injecting a small amount of JavaScript code into the header and footer of each page. // If you use both the Exclude and Attribute elements // the Exclude element must be listed first. <browserMonitoring autoInstrument=\"true\"> <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </browserMonitoring> Copy The browserMonitoring element supports the following attributes: autoInstrument Type Boolean Default true By default the agent automatically injects the browser agent JavaScript. To turn off automatic injection, set this attribute to false. attributes Use this sub-element to customize your agent attribute settings for browser monitoring. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. requestPathsExcluded Use this sub-element to prevent the browser agent from being injected in specific pages. The element is used as follows: <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> Copy The agent will not inject the browser agent into pages whose URL matches one of the specified regular expressions. The regular expression should follow Microsoft guidelines for the Regex class. It is a reference to the virtual directory of the path in your application and not the full URL of the path you wish to exclude. For example, to exclude the pages in https://www.mywebsite.com/mywebpages/ you would simply insert /mywebpages/ as the path regex value. The requestPathsExcluded element should be used in cases where it is impossible or undesirable to use the DisableBrowserMonitoring() call. To minimize a possible performance impact try to use as few regular expressions as possible and keep them as simple as possible. Slow queries The slowSql element is a child of the configuration element. slowSql configures capturing information about slow query executions, and captures and obfuscates explain plans for these queries. <slowSql enabled=\"true\"/> Copy The slowSql element supports the following attribute: enabled Type Boolean Default true Enable or disable slow query tracing. Transaction traces The transactionTracer element is a child of the configuration element. transactionTracer configures transaction traces. Included in the trace is the exact call sequence of the transactions, including any query statements issued. <transactionTracer enabled=\"true\" transactionThreshold=\"apdex_f\" recordSql=\"obfuscated\" explainEnabled=\"true\" explainThreshold=\"500\" maxSegments=\"3000\" maxExplainPlans=\"20\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionTracer> Copy The transactionTracer element supports the following attributes: enabled Type Boolean Default true Enable or disable transaction traces. transactionThreshold Type String Default apdex_f Defines the threshold for transaction traces. If a transaction takes longer than the threshold, it is eligible for being traced. See transaction trace basics for more about the rules governing traces. The default value is apdex_f, which sets the threshold to four times the application's apdex_t value. For more information about apdex_t, see Apdex. You can also set the threshold to be a specific time value in milliseconds. recordSql Type String Default obfuscated Select a query tracing policy. Options are off, which records nothing; obfuscated, which records an obfuscated version of the query; or raw, which records the query exactly as it is issued to the database. Caution Recording raw queries may capture sensitive information. explainEnabled Type Boolean Default false When true, the agent captures EXPLAIN statements for slow queries. explainThreshold Type Integer Default 500 Unit Milliseconds The agent collects slow query data for queries that exceed this threshold, along with any available explain plans, as part of transaction traces. maxSegments Type Integer Default 3000 The maximum number of segments to collect in a transaction trace. maxExplainPlans Type Integer Default 20 The maximum number of explain plans to collect during a harvest cycle. maxStackTrace Type Integer Default 0 By default maxStackTrace is set to 0, which disables stack traces as part of a transaction trace. If this value is set greater than 0, then stack traces will be captured for transaction traces. attributes Use this sub-element to customize your agent attribute settings for transaction traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Datastore tracer The datastoreTracer element is a child of the configuration element. <datastoreTracer> <instanceReporting enabled=\"true\" /> <databaseNameReporting enabled=\"true\" /> <queryParameters enabled=\"false\" /> </datastoreTracer> Copy The datastoreTracer element supports the following sub-elements: instanceReporting Use this sub-element to enable collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on slow query traces and transaction traces. The default value of attribute enabled is true. databaseNameReporting Use this sub-element to enable collection of the database name on slow query traces and transaction traces for some database drivers. The default value of attribute enabled is true. queryParameters Use this sub-element to enable collection of the SQL query parameters on slow query traces. The default value of attribute enabled is false. Caution Recording query parameters may capture sensitive information. The transactionTracer.recordSql configuration option must be set to raw or this option is ignored. Distributed tracing The distributedTracing element is a child of the configuration element. <distributedTracing enabled=\"false\" excludeNewrelicHeader=\"false\"/> Copy Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the planning guide. Important Requires .NET agent version 8.6.45.0 or higher. The distributedTracing element supports the following attributes: To enable or disable, see Enable distributed tracing. enabled Type Boolean Default false Alternatively, enable distributed tracing via the NEW_RELIC_DISTRIBUTED_TRACING_ENABLED environment variable in the application's environment. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy excludeNewrelicHeader Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. Distributed tracing reports span events. Span event reporting is enabled by default, but distributed tracing must be enabled for spans to be reported. To disable span events, choose one of the following options: Disable span events via config file Set the <spanEvents> element to false to disable via the newrelic.config file. This element is a child of the <configuration> element. <configuration . . . > <spanEvents enabled=\"false\" /> </configuration> Copy Disable span events via environment variable Set the NEW_RELIC_SPAN_EVENTS_ENABLED environment variable in the application's environment. NEW_RELIC_SPAN_EVENTS_ENABLED=false Copy Infinite Tracing Infinite Tracing extends the distributed tracing service by employing a trace observer that is external to the agent. It observes 100% of your application traces across various services and provides actionable data so you can solve issues faster. Important Infinite Tracing requires .NET Agent version 8.30 or higher. To turn on Infinite Tracing, enable distributed tracing and add the additional settings below <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy The infiniteTracing element supports the following elements: trace_observer The trace_observer element identifies an observer host that is independent from the agent. For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint. The trace observer may be configured using the NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST environment variable as well. Important When configuring the trace observer, you should not supply the protocol as part of the host. For example, use myhost.infinitetracing.com instead of https://myhost.infinitetracing.com. Span events The spanEvents element is a child of the configuration element. Use spanEvents to configure span events. <spanEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </spanEvents> Copy The spanEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Int Default 2000 The maximum number of samples to store in memory at a time. This may be configured using the NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED environment variable as well. Important This configuration option is only available in the .NET Agent v9.0 or higher. attributes Use this sub-element to customize your agent attribute settings for span events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to span events. Attribute settings may be applied globally to all event types to with this configuration setting. Capture HTTP Request Headers The allowAllHeaders element is a child of the configuration element. Set this to true to allow the .NET Agent to capture all HTTP request headers as request.headers.{http-header-name} attributes. Set this to false to only allow the .NET agent to collect the following HTTP request headers: request.headers.referer request.headers.accept request.headers.content-length request.headers.host request.headers.user-agent Copy enabled Type Boolean Default false Enable or disable HTTP request headers capture. Example: <allowAllHeaders enabled=\"true\" /> <attributes enabled=\"true\"> <include>request.headers.*</include> </attributes> Copy Important The allowAllHeaders setting is only available in the .NET Agent version 8.40.0+. When using allowAllHeaders to capture attributes, the captured request header attributes are still being controlled by the root level and destination level attributes settings. Without setting the request.header.* in the include list under the attributes element (see the following), the .NET Agent still filters out all header attributes. The default newrelic.config is set to include the request.header.*. <allowAllHeaders enabled=\"true\" /> <attributes enabled=\"true\"> <include>request.headers.*</include> ... </attributes> Copy The default newrelic.config is also set to explicitly exclude the following HTTP request headers to prevent the .NET Agent collecting unwanted data. <attributes enabled=\"true\"> <exclude>request.headers.cookie</exclude> <exclude>request.headers.authorization</exclude> <exclude>request.headers.proxy-authorization</exclude> <exclude>request.headers.x-*</exclude> </attributes> Copy Settings in app.config or web.config For ASP.NET and .NET Framework console apps you can also configure the following settings in your app's app.config or web.config, within the outermost element, <configuration>: Enable and disable the agent <appSettings> <add key = \"NewRelic.AgentEnabled\" value=\"false\" /> </appSettings> Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Application name For more information, see Name your .NET application. <appSettings> <add key = \"NewRelic.AppName\" value =\"Descriptive Name\" /> </appSettings> Copy License key <appSettings> <add key = \"NewRelic.LicenseKey\" value =\"XXXXXXXX\" /> </appSettings> Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. <appSettings> <add key = \"NewRelic.ConfigFile\" value=\"C:\\Path-to-alternate-config-dir\\newrelic.config\" /> </appSettings> Copy Settings in appsettings.json For .NET Core apps, you can configure the following settings in appsettings.json if the following is true: The appsettings.json file must be located in the current working directory of the application. The application must have the following dependencies: Microsoft.Extensions.Configuration Microsoft.Extensions.Configuration.Json Microsoft.Extensions.Configuration.EnvironmentVariables Enable and disable the agent { \"NewRelic.AgentEnabled\":\"false\" } Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled setting in this file will be ignored. Application name For more information, see Name your .NET application. { \"NewRelic.AppName\": \"Descriptive Name\" } Copy License key { \"NewRelic.LicenseKey\": \"XXXXXXXX\" } Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. { \"NewRelic.ConfigFile\": \"C:\\\\Path-to-alternate-config-dir\\\\newrelic.config\" } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.69621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>configuration</em>",
        "sections": ".<em>NET</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "You&#x27;ll be able to configure our .<em>NET</em> <em>agent</em> to suit your environnment after you create a New Relic account (it&#x27;s free, forever) and install the .<em>NET</em> <em>agent</em>. <em>Configuration</em> overview APM <em>agent</em> <em>configuration</em> options allow you to control some aspects of how the <em>agent</em> behaves. Some of these config options"
      },
      "id": "617e9587196a67924df7e55e"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/configuration/net-agent-configuration": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.102356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49258,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Name your .NET application",
        "Set your app name (recommended method)",
        "Other methods",
        "Important",
        "Steps",
        "Use multiple app names",
        "Newrelic.config file",
        "Web.config file",
        "App.config file"
      ],
      "title": "Name your .NET application",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Configuration"
      ],
      "external_id": "92e8aa685f1e6633b3d1b584e91e9efd0adb3006",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/configuration/name-your-net-application/",
      "published_at": "2021-12-31T02:23:59Z",
      "updated_at": "2021-10-23T17:56:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent gives you several ways to change the application name reported and displayed in APM. This document gives you an overview of those naming options. For a general overview of APM app naming (not .NET-specific), see Name your application. To change an application's name without breaking data continuity, use the UI alias-change option. Set your app name (recommended method) When you first deploy your app, you can change the default name to a more descriptive one. Since New Relic collects metrics using these names, customizing them allows you to run the same application on multiple hosts and get metrics from all their instances. Typically, configuring your app-local newrelic.config file is the most convenient naming method. Naming method Description Recommended: Configure your app-local newrelic.config file This method lets you give your app a unique name with specific configuration settings. It also works for both IIS and non-IIS hosted apps. Copy the newrelic.config file from the agent home directory into your app's root folder. Default: %ALLUSERSPROFILE%\\New Relic\\.NET Agent Open the copy and set your app name as follows: <application> <name> App Name </name> </application> Copy Restart your application. As long as your app is active, data should appear within a few minutes. If not, follow our troubleshooting procedures. Other methods If you have a specific use or purpose in mind, you may prefer a different naming method. Here's a full list of the alternative methods: Important Some methods take precedence over others. Before choosing a naming method, make sure you understand how your configurations may be affected. Naming method Description Configure your web.config file If you have apps hosted on IIS and prefer not to have a local newrelic.config file, you can configure the naming settings in your web.config file. Steps For .NET Framework apps: Add the following entry to the appSettings section of your file, and then restart your application. <appSettings> <add key = \"NewRelic.AppName\" value = \"App Name\" /> </appSettings> Copy For .NET Core apps: Add the NEW_RELIC_APP_NAME environment variable to your file as follows, and then restart your application. <aspNetCore processPath=\"dotnet\" arguments=\".\\MyApp.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" hostingModel=\"InProcess\" > <environmentVariables> <environmentVariable name=\"NEW_RELIC_APP_NAME\" value=\"App Name\" /> </environmentVariables> </aspNetCore> Copy Set app name using environment variables If you want to easily set app names during the deployment of containers, set an environment variable in the application's environment. Steps Set the environmental variable NEW_RELIC_APP_NAME in your application's environment: NEW_RELIC_APP_NAME = \"App name\" Copy Important This method only works if you're using .NET agent version 6.17.387.0 or higher. Name after app pools If your IIS application pools already have unique names you like, or if you're using a shared network content infrastructure (SNCI), you can name your app after its assigned app pool. Steps Remove any NewRelic.AppName keys from the <appSettings> section in web.config. Make sure not to delete the surrounding <appSettings> tags. Remove any <name> child elements from the <application> parent element in newrelic.config. Make sure not to delete the surrounding <application> tags. Each app will then report according to its app pool name. Configure your app.config file If you have applications not hosted on IIS and prefer not to have a local newrelic.config file, you can configure the naming settings in your app.config file. Steps Add the following entry to your app.config file (for example, applicationname.exe.config), and then restart your application. <appSettings> <add key = \"NewRelic.AppName\" value = \"App Name\" /> </appSettings> Copy Use the .NET agent API If you want to rename your app programmatically, you can use the SetApplicationName() agent API call to set the app name at run time. This name will take priority over all other application naming sources. As long as your app is active, data should appear within a few minutes. If not, make sure you've performed an IISRESET from an administrative command prompt if you've changed your .NET app's configuration file (newrelic.config or app.config). Otherwise, follow our troubleshooting procedures. Use multiple app names You can use multiple app names to aggregate data from your applications. We sometimes call this \"rolling up\" your data. For the .NET agent, you can set up to three application names. The first name is the primary application name, and the second and third names are used for the more general data aggregation categories. For more about how multiple app names work, see Use multiple app names. Newrelic.config file Here's an example of setting multiple names in your app-local newrelic.config file: <application> <name>Primary App Name</name> <name>Second App Name</name> <name>Third App Name</name> </application> Copy Web.config file Here's an example of setting multiple names in your web.config file: <appSettings> <add key=\"NewRelic.AppName\" value=\"App Name, App Name 2, App Name 3\" /> </appSettings> Copy App.config file Here's an example of setting multiple names in your app.config file: <appSettings> <add key=\"NewRelic.AppName\" value=\"App Name, App Name 2, App Name 3\" / </appSettings> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.063675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Name your .<em>NET</em> application",
        "sections": "Name your .<em>NET</em> application",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>configuration</em> settings. It also works for both IIS and non-IIS hosted apps. Copy the newrelic.config file from the <em>agent</em> home directory into your app&#x27;s root folder. Default: %ALLUSERSPROFILE%\\New Relic\\.<em>NET</em> <em>Agent</em> Open the copy and set your app name as follows: &lt;application&gt; &lt;name&gt; App Name &lt;&#x2F;name"
      },
      "id": "617e9ab628ccbc977c7ff198"
    }
  ],
  "/docs/apm/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Important",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "3f09412e78afeaa0f470445a1c433ac77d0f680d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:19:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Important If some of your methods still don't show up in traces after adding the [Trace] attribute, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.55408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "617e9fc0196a672142f7d03b"
    },
    {
      "sections": [
        "Introduction to .NET custom instrumentation",
        "Important",
        "Choose a method of custom instrumentation",
        "Creating transactions vs. adding detail",
        "Classify as \"web\" or \"non-web\" (attribute method only)"
      ],
      "title": "Introduction to .NET custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "e891d81d053b6b7c9fb4376e0e263da67b9a19cc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation/",
      "published_at": "2021-12-31T02:25:16Z",
      "updated_at": "2021-10-23T17:57:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For fully supported frameworks (.NET Framework | .NET Core), the New Relic .NET agent automatically collects and reports information on web transactions and browser tasks. However, if you are using an application framework that isn't automatically instrumented (or not using a framework) you may see large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use custom instrumentation to add transactions and detail. This document describes how to instrument activity that is not instrumented by the .NET agent by default. For other ways of configuring your app's instrumentation, see Guide to using the .NET agent API. Important For both of the agent's supported frameworks (.NET Framework and .NET Core), custom instrumentation is done the same way, unless otherwise stated. Choose a method of custom instrumentation The .NET agent supports two methods of custom instrumentation: Method Description Attribute custom instrumentation Instrument your code by decorating your methods with an attribute. Attribute instrumentation is simpler to implement than XML instrumentation because you only need to add a single decorator, in the same place in your code as the method you want to instrument. For instructions, see Custom instrumentation via attributes. XML custom instrumentation Instrument your code by listing the target methods in an XML file. XML instrumentation is more complex than attribute instrumentation, and it will fail if you change the name of the assembly, class, or method you want to instrument. However, XML instrumentation does not require you to modify your source code. For instructions, see Create transactions via XML and Add detail to transactions via XML. Creating transactions vs. adding detail When you add custom instrumentation via either method, you need to choose between creating a new transaction and adding instrumentation to an existing transaction: Situation Recommendation The method you want to instrument does not appear in the New Relic UI at all Create a new transaction. For details, see: Custom instrumentation via attributes Create transactions via XML The transaction appears in the New Relic UI but contains sections of uninstrumented time Add detail to an existing transaction. For details, see: Custom instrumentation via attributes Add detail to transactions via XML Classify as \"web\" or \"non-web\" (attribute method only) APM separates transactions into web transactions and non-web transactions in the UI. When you add detail to an existing transaction, its category is determined by the category of the parent transaction. When you create a transaction via custom instrumentation using the attribute method, you must categorize it as web or non-web. (This is not possible with XML instrumentation; all XML-created transactions are classified as non-web.) Category When to use Web Use web for web requests. You can only mark new transactions as web transactions with custom instrumentation using attributes, not by using XML. Non-web Use non-web for other types of background requests, such as console apps and services. All transactions created using XML are classified as non-web. Transactions created using attributes can be classified either as web or non-web.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.84088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use <em>custom</em> <em>instrumentation</em> to add transactions and detail. This document describes how to <em>instrument</em> activity that is not instrumented by the .<em>NET</em> <em>agent</em> by default. For other ways"
      },
      "id": "617e9f8628ccbc53447ff12c"
    },
    {
      "sections": [
        "Create transactions via XML (.NET)",
        "Create transactions using XML",
        "For the .NET Framework or Core agent on Windows",
        "Important",
        "For the .NET Core agent on Linux",
        "For Azure App Services",
        "Tip",
        "View transactions in the UI",
        "Example: Instrument three methods",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Example: Instrument a console app",
        "Example app"
      ],
      "title": "Create transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "10ae0b4efb80fb527b16a10f567f4e645b032411",
      "image": "https://docs.newrelic.com/static/0ed431b536aef47896991b59af94f453/c1b63/custom_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/create-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-10-23T18:01:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic instruments supported frameworks automatically. However, you may also have other frameworks for which some transactions are not being created automatically or additional methods that you would like to instrument. You can add custom instrumentation to these methods by creating transactions. Transactions created via XML are classified as non-web in the New Relic UI. This document describes how to create transactions with an XML file. You can also: Add details to existing transactions using XML Create transactions and add detail to existing transactions with the .NET agent API. If you have a non-IIS application, XML instrumentation requires enabling the Instrument all option during the .NET agent installation. Create transactions using XML Custom transactions (transactions not instrumented automatically) are defined in a custom instrumentation XML file. You define a method that triggers the creation of a transaction. You can also instrument additional methods called by the trigger method. Some important rules to know before you create a custom transaction: Database and external calls do not require custom instrumentation because they're automatically instrumented. Ensure your XML file is in the correct path. To define its instrumentation set, the .NET agent reads every XML file in the Extensions directory. If a method you attempt to instrument is already part of an existing transaction, it will be added as a segment to that transaction. No new transaction will be created. This will occur even if the parent method is instrumented using custom instrumentation. Avoid instrumenting things like Main() as this method won't end until the application ends and data may not be sent to New Relic. To create a custom instrumentation file: Create a new .xml file in the Extensions directory within your .NET Agent directory. The location of this directory depends on your OS: For the .NET Framework or Core agent on Windows C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Use the ProgramData directory, not the Program Files directory. For the .NET Core agent on Linux PATH_TO_AGENT_DIRECTORY/Extensions Copy PATH_TO_AGENT_DIRECTORY will be the default /usr/local/newrelic-netcore20-agent or the directory chosen at installation. For Azure App Services .NET Framework agent: D:\\home\\site\\wwwroot\\newrelic\\extensions Copy .NET Core agent: D:\\home\\site\\wwwroot\\newrelic_core\\extensions Copy Copy this template into the file you created. This template defines two separate class and methods as transactions but more can be added: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy In the file you created, customize the attribute values Name, AssemblyName, NameSpace.ClassName, and MethodName. Customize these values for both the trigger method and for any methods called by the trigger method. Tip These values are case sensitive. Name: Defines the transaction name. The metricName attribute is optional. If omitted, the transaction name will be NameSpace.ClassName/MethodName. The transaction category will be \"Custom\". The resulting full metric name will be \"OtherTransaction/Custom/Name . If you wish to change the transaction category from \"Custom\", use the SetTransactionName api call. The New Relic UI groups transactions under categories in the transaction type field. AssemblyName: The assembly that contains the trigger method. NameSpace.ClassName: The fully-qualified class name that contains the trigger method. MethodName: The exact name of the trigger method. Adding additional methods must include the \"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" attribute to be defined as a transaction. Tags without this attribute will add detail to existing transactions only. Optional: To check if the XML file is formatted correctly, you can check it against the XSD (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) using any XSD validator. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. View transactions in the UI The custom transaction starts when the method specified by methodName is invoked in the assembly specified by assemblyName. The transaction ends when the method returns or throws an exception. You can view these metrics in the Transactions page and in transaction traces. To view the transaction: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > Type > (select a type). The type is defined by Category/Name. one.newrelic.com > APM > (select an app) > Monitoring > Transactions > Type > (selected type): Use the Type menu to view your custom transactions. Example: Instrument three methods This example presents a simple implementation of creating transactions. Example custom instrumentation file This custom instrumentation file defines the three methods to instrument. Only two are defined as transactions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Bars\"> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar1\" /> <exactMethodMatcher methodName=\"Bar2\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar3\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods, with comments explaining when each one will be instrumented by the agent: var bar = new Bar(); bar.Bar1(); // Creates a transaction named Bars in the Custom category. bar.Bar2(); // Creates a transaction named Bars in the Custom category. bar.Bar3(); // Won't create a new transaction. See `If Bar3 is called directly`, below. namespace Foo { public class Bar { // The agent creates a transaction that includes an external service request in its transaction traces. public void Bar1() { new WebClient().DownloadString(\"http://www.google.com/\"); } // Creates a transaction containing one segment. public void Bar2() { // The Bar3 segment will contain your SQL query inside of it and possibly an execution plan. Bar3(); } // If Bar3 is called directly, the agent will not create a transaction. // However, if Bar3 is called from Bar1 or Bar2, Bar3 will appear as a segment containing its SQL query. private void Bar3() { using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } } } Copy Example: Instrument a console app This simple console app demonstrates creating transactions. After running the application a few times, you see the transactions you created in the Transactions page (at one.newrelic.com > APM > (select an app) > Transactions > Type). The Dummy segment will be visible in the transactions breakdown table and in any transaction traces. Example custom instrumentation file This custom instrumentation file defines two methods to instrument: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"CustomTransaction\"> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"StartTransaction\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"Dummy\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example app This code contains the two methods specified by the custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Console.WriteLine(\"Custom Transactions\"); var t = new CustomTransaction(); while (true) t.StartTransaction(); } } class CustomTransaction { public void StartTransaction() { Console.WriteLine(\"StartTransaction\"); Dummy(); } void Dummy() { System.Threading.Thread.Sleep(5000); } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.00232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create transactions via XML (.<em>NET</em>)",
        "sections": "For the .<em>NET</em> Framework or Core <em>agent</em> on Windows",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " have a non-IIS application, XML <em>instrumentation</em> requires enabling the <em>Instrument</em> all option during the .<em>NET</em> <em>agent</em> installation. Create transactions using XML <em>Custom</em> transactions (transactions not instrumented automatically) are defined in a <em>custom</em> <em>instrumentation</em> XML file. You define a method"
      },
      "id": "617e9aeb28ccbc08957feebd"
    }
  ],
  "/docs/apm/agents/net-agent/custom-instrumentation/create-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Important",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "3f09412e78afeaa0f470445a1c433ac77d0f680d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:19:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Important If some of your methods still don't show up in traces after adding the [Trace] attribute, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.55407,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "617e9fc0196a672142f7d03b"
    },
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "8220ccbb945751144b8f1fff165dd9250be651ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:17:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Important If some of your methods still don't show up in traces after adding XML custom instrumentation, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "617e9aece7b9d2a2b1c04e45"
    },
    {
      "sections": [
        "Introduction to .NET custom instrumentation",
        "Important",
        "Choose a method of custom instrumentation",
        "Creating transactions vs. adding detail",
        "Classify as \"web\" or \"non-web\" (attribute method only)"
      ],
      "title": "Introduction to .NET custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "e891d81d053b6b7c9fb4376e0e263da67b9a19cc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation/",
      "published_at": "2021-12-31T02:25:16Z",
      "updated_at": "2021-10-23T17:57:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For fully supported frameworks (.NET Framework | .NET Core), the New Relic .NET agent automatically collects and reports information on web transactions and browser tasks. However, if you are using an application framework that isn't automatically instrumented (or not using a framework) you may see large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use custom instrumentation to add transactions and detail. This document describes how to instrument activity that is not instrumented by the .NET agent by default. For other ways of configuring your app's instrumentation, see Guide to using the .NET agent API. Important For both of the agent's supported frameworks (.NET Framework and .NET Core), custom instrumentation is done the same way, unless otherwise stated. Choose a method of custom instrumentation The .NET agent supports two methods of custom instrumentation: Method Description Attribute custom instrumentation Instrument your code by decorating your methods with an attribute. Attribute instrumentation is simpler to implement than XML instrumentation because you only need to add a single decorator, in the same place in your code as the method you want to instrument. For instructions, see Custom instrumentation via attributes. XML custom instrumentation Instrument your code by listing the target methods in an XML file. XML instrumentation is more complex than attribute instrumentation, and it will fail if you change the name of the assembly, class, or method you want to instrument. However, XML instrumentation does not require you to modify your source code. For instructions, see Create transactions via XML and Add detail to transactions via XML. Creating transactions vs. adding detail When you add custom instrumentation via either method, you need to choose between creating a new transaction and adding instrumentation to an existing transaction: Situation Recommendation The method you want to instrument does not appear in the New Relic UI at all Create a new transaction. For details, see: Custom instrumentation via attributes Create transactions via XML The transaction appears in the New Relic UI but contains sections of uninstrumented time Add detail to an existing transaction. For details, see: Custom instrumentation via attributes Add detail to transactions via XML Classify as \"web\" or \"non-web\" (attribute method only) APM separates transactions into web transactions and non-web transactions in the UI. When you add detail to an existing transaction, its category is determined by the category of the parent transaction. When you create a transaction via custom instrumentation using the attribute method, you must categorize it as web or non-web. (This is not possible with XML instrumentation; all XML-created transactions are classified as non-web.) Category When to use Web Use web for web requests. You can only mark new transactions as web transactions with custom instrumentation using attributes, not by using XML. Non-web Use non-web for other types of background requests, such as console apps and services. All transactions created using XML are classified as non-web. Transactions created using attributes can be classified either as web or non-web.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.84087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use <em>custom</em> <em>instrumentation</em> to add transactions and detail. This document describes how to <em>instrument</em> activity that is not instrumented by the .<em>NET</em> <em>agent</em> by default. For other ways"
      },
      "id": "617e9f8628ccbc53447ff12c"
    }
  ],
  "/docs/apm/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net": [
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "8220ccbb945751144b8f1fff165dd9250be651ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:17:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Important If some of your methods still don't show up in traces after adding XML custom instrumentation, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "617e9aece7b9d2a2b1c04e45"
    },
    {
      "sections": [
        "Introduction to .NET custom instrumentation",
        "Important",
        "Choose a method of custom instrumentation",
        "Creating transactions vs. adding detail",
        "Classify as \"web\" or \"non-web\" (attribute method only)"
      ],
      "title": "Introduction to .NET custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "e891d81d053b6b7c9fb4376e0e263da67b9a19cc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation/",
      "published_at": "2021-12-31T02:25:16Z",
      "updated_at": "2021-10-23T17:57:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For fully supported frameworks (.NET Framework | .NET Core), the New Relic .NET agent automatically collects and reports information on web transactions and browser tasks. However, if you are using an application framework that isn't automatically instrumented (or not using a framework) you may see large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use custom instrumentation to add transactions and detail. This document describes how to instrument activity that is not instrumented by the .NET agent by default. For other ways of configuring your app's instrumentation, see Guide to using the .NET agent API. Important For both of the agent's supported frameworks (.NET Framework and .NET Core), custom instrumentation is done the same way, unless otherwise stated. Choose a method of custom instrumentation The .NET agent supports two methods of custom instrumentation: Method Description Attribute custom instrumentation Instrument your code by decorating your methods with an attribute. Attribute instrumentation is simpler to implement than XML instrumentation because you only need to add a single decorator, in the same place in your code as the method you want to instrument. For instructions, see Custom instrumentation via attributes. XML custom instrumentation Instrument your code by listing the target methods in an XML file. XML instrumentation is more complex than attribute instrumentation, and it will fail if you change the name of the assembly, class, or method you want to instrument. However, XML instrumentation does not require you to modify your source code. For instructions, see Create transactions via XML and Add detail to transactions via XML. Creating transactions vs. adding detail When you add custom instrumentation via either method, you need to choose between creating a new transaction and adding instrumentation to an existing transaction: Situation Recommendation The method you want to instrument does not appear in the New Relic UI at all Create a new transaction. For details, see: Custom instrumentation via attributes Create transactions via XML The transaction appears in the New Relic UI but contains sections of uninstrumented time Add detail to an existing transaction. For details, see: Custom instrumentation via attributes Add detail to transactions via XML Classify as \"web\" or \"non-web\" (attribute method only) APM separates transactions into web transactions and non-web transactions in the UI. When you add detail to an existing transaction, its category is determined by the category of the parent transaction. When you create a transaction via custom instrumentation using the attribute method, you must categorize it as web or non-web. (This is not possible with XML instrumentation; all XML-created transactions are classified as non-web.) Category When to use Web Use web for web requests. You can only mark new transactions as web transactions with custom instrumentation using attributes, not by using XML. Non-web Use non-web for other types of background requests, such as console apps and services. All transactions created using XML are classified as non-web. Transactions created using attributes can be classified either as web or non-web.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.84087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "Introduction to .<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " large blocks of time in the New Relic UI lacking detail, or you may not see any transactions. In this case, you can use <em>custom</em> <em>instrumentation</em> to add transactions and detail. This document describes how to <em>instrument</em> activity that is not instrumented by the .<em>NET</em> <em>agent</em> by default. For other ways"
      },
      "id": "617e9f8628ccbc53447ff12c"
    },
    {
      "sections": [
        "Create transactions via XML (.NET)",
        "Create transactions using XML",
        "For the .NET Framework or Core agent on Windows",
        "Important",
        "For the .NET Core agent on Linux",
        "For Azure App Services",
        "Tip",
        "View transactions in the UI",
        "Example: Instrument three methods",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Example: Instrument a console app",
        "Example app"
      ],
      "title": "Create transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "10ae0b4efb80fb527b16a10f567f4e645b032411",
      "image": "https://docs.newrelic.com/static/0ed431b536aef47896991b59af94f453/c1b63/custom_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/create-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-10-23T18:01:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic instruments supported frameworks automatically. However, you may also have other frameworks for which some transactions are not being created automatically or additional methods that you would like to instrument. You can add custom instrumentation to these methods by creating transactions. Transactions created via XML are classified as non-web in the New Relic UI. This document describes how to create transactions with an XML file. You can also: Add details to existing transactions using XML Create transactions and add detail to existing transactions with the .NET agent API. If you have a non-IIS application, XML instrumentation requires enabling the Instrument all option during the .NET agent installation. Create transactions using XML Custom transactions (transactions not instrumented automatically) are defined in a custom instrumentation XML file. You define a method that triggers the creation of a transaction. You can also instrument additional methods called by the trigger method. Some important rules to know before you create a custom transaction: Database and external calls do not require custom instrumentation because they're automatically instrumented. Ensure your XML file is in the correct path. To define its instrumentation set, the .NET agent reads every XML file in the Extensions directory. If a method you attempt to instrument is already part of an existing transaction, it will be added as a segment to that transaction. No new transaction will be created. This will occur even if the parent method is instrumented using custom instrumentation. Avoid instrumenting things like Main() as this method won't end until the application ends and data may not be sent to New Relic. To create a custom instrumentation file: Create a new .xml file in the Extensions directory within your .NET Agent directory. The location of this directory depends on your OS: For the .NET Framework or Core agent on Windows C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Use the ProgramData directory, not the Program Files directory. For the .NET Core agent on Linux PATH_TO_AGENT_DIRECTORY/Extensions Copy PATH_TO_AGENT_DIRECTORY will be the default /usr/local/newrelic-netcore20-agent or the directory chosen at installation. For Azure App Services .NET Framework agent: D:\\home\\site\\wwwroot\\newrelic\\extensions Copy .NET Core agent: D:\\home\\site\\wwwroot\\newrelic_core\\extensions Copy Copy this template into the file you created. This template defines two separate class and methods as transactions but more can be added: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy In the file you created, customize the attribute values Name, AssemblyName, NameSpace.ClassName, and MethodName. Customize these values for both the trigger method and for any methods called by the trigger method. Tip These values are case sensitive. Name: Defines the transaction name. The metricName attribute is optional. If omitted, the transaction name will be NameSpace.ClassName/MethodName. The transaction category will be \"Custom\". The resulting full metric name will be \"OtherTransaction/Custom/Name . If you wish to change the transaction category from \"Custom\", use the SetTransactionName api call. The New Relic UI groups transactions under categories in the transaction type field. AssemblyName: The assembly that contains the trigger method. NameSpace.ClassName: The fully-qualified class name that contains the trigger method. MethodName: The exact name of the trigger method. Adding additional methods must include the \"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" attribute to be defined as a transaction. Tags without this attribute will add detail to existing transactions only. Optional: To check if the XML file is formatted correctly, you can check it against the XSD (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) using any XSD validator. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. View transactions in the UI The custom transaction starts when the method specified by methodName is invoked in the assembly specified by assemblyName. The transaction ends when the method returns or throws an exception. You can view these metrics in the Transactions page and in transaction traces. To view the transaction: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > Type > (select a type). The type is defined by Category/Name. one.newrelic.com > APM > (select an app) > Monitoring > Transactions > Type > (selected type): Use the Type menu to view your custom transactions. Example: Instrument three methods This example presents a simple implementation of creating transactions. Example custom instrumentation file This custom instrumentation file defines the three methods to instrument. Only two are defined as transactions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Bars\"> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar1\" /> <exactMethodMatcher methodName=\"Bar2\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar3\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods, with comments explaining when each one will be instrumented by the agent: var bar = new Bar(); bar.Bar1(); // Creates a transaction named Bars in the Custom category. bar.Bar2(); // Creates a transaction named Bars in the Custom category. bar.Bar3(); // Won't create a new transaction. See `If Bar3 is called directly`, below. namespace Foo { public class Bar { // The agent creates a transaction that includes an external service request in its transaction traces. public void Bar1() { new WebClient().DownloadString(\"http://www.google.com/\"); } // Creates a transaction containing one segment. public void Bar2() { // The Bar3 segment will contain your SQL query inside of it and possibly an execution plan. Bar3(); } // If Bar3 is called directly, the agent will not create a transaction. // However, if Bar3 is called from Bar1 or Bar2, Bar3 will appear as a segment containing its SQL query. private void Bar3() { using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } } } Copy Example: Instrument a console app This simple console app demonstrates creating transactions. After running the application a few times, you see the transactions you created in the Transactions page (at one.newrelic.com > APM > (select an app) > Transactions > Type). The Dummy segment will be visible in the transactions breakdown table and in any transaction traces. Example custom instrumentation file This custom instrumentation file defines two methods to instrument: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"CustomTransaction\"> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"StartTransaction\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"Dummy\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example app This code contains the two methods specified by the custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Console.WriteLine(\"Custom Transactions\"); var t = new CustomTransaction(); while (true) t.StartTransaction(); } } class CustomTransaction { public void StartTransaction() { Console.WriteLine(\"StartTransaction\"); Dummy(); } void Dummy() { System.Threading.Thread.Sleep(5000); } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.00232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create transactions via XML (.<em>NET</em>)",
        "sections": "For the .<em>NET</em> Framework or Core <em>agent</em> on Windows",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " have a non-IIS application, XML <em>instrumentation</em> requires enabling the <em>Instrument</em> all option during the .<em>NET</em> <em>agent</em> installation. Create transactions using XML <em>Custom</em> transactions (transactions not instrumented automatically) are defined in a <em>custom</em> <em>instrumentation</em> XML file. You define a method"
      },
      "id": "617e9aeb28ccbc08957feebd"
    }
  ],
  "/docs/apm/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Important",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "3f09412e78afeaa0f470445a1c433ac77d0f680d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:19:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Important If some of your methods still don't show up in traces after adding the [Trace] attribute, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.55406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "617e9fc0196a672142f7d03b"
    },
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "8220ccbb945751144b8f1fff165dd9250be651ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-11-25T14:17:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Important If some of your methods still don't show up in traces after adding XML custom instrumentation, disable method inlining for those methods with [MethodImpl(MethodImplOptions.NoInlining)]. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "617e9aece7b9d2a2b1c04e45"
    },
    {
      "sections": [
        "Create transactions via XML (.NET)",
        "Create transactions using XML",
        "For the .NET Framework or Core agent on Windows",
        "Important",
        "For the .NET Core agent on Linux",
        "For Azure App Services",
        "Tip",
        "View transactions in the UI",
        "Example: Instrument three methods",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Example: Instrument a console app",
        "Example app"
      ],
      "title": "Create transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "10ae0b4efb80fb527b16a10f567f4e645b032411",
      "image": "https://docs.newrelic.com/static/0ed431b536aef47896991b59af94f453/c1b63/custom_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/custom-instrumentation/create-transactions-xml-net/",
      "published_at": "2021-12-31T02:24:37Z",
      "updated_at": "2021-10-23T18:01:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic instruments supported frameworks automatically. However, you may also have other frameworks for which some transactions are not being created automatically or additional methods that you would like to instrument. You can add custom instrumentation to these methods by creating transactions. Transactions created via XML are classified as non-web in the New Relic UI. This document describes how to create transactions with an XML file. You can also: Add details to existing transactions using XML Create transactions and add detail to existing transactions with the .NET agent API. If you have a non-IIS application, XML instrumentation requires enabling the Instrument all option during the .NET agent installation. Create transactions using XML Custom transactions (transactions not instrumented automatically) are defined in a custom instrumentation XML file. You define a method that triggers the creation of a transaction. You can also instrument additional methods called by the trigger method. Some important rules to know before you create a custom transaction: Database and external calls do not require custom instrumentation because they're automatically instrumented. Ensure your XML file is in the correct path. To define its instrumentation set, the .NET agent reads every XML file in the Extensions directory. If a method you attempt to instrument is already part of an existing transaction, it will be added as a segment to that transaction. No new transaction will be created. This will occur even if the parent method is instrumented using custom instrumentation. Avoid instrumenting things like Main() as this method won't end until the application ends and data may not be sent to New Relic. To create a custom instrumentation file: Create a new .xml file in the Extensions directory within your .NET Agent directory. The location of this directory depends on your OS: For the .NET Framework or Core agent on Windows C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Use the ProgramData directory, not the Program Files directory. For the .NET Core agent on Linux PATH_TO_AGENT_DIRECTORY/Extensions Copy PATH_TO_AGENT_DIRECTORY will be the default /usr/local/newrelic-netcore20-agent or the directory chosen at installation. For Azure App Services .NET Framework agent: D:\\home\\site\\wwwroot\\newrelic\\extensions Copy .NET Core agent: D:\\home\\site\\wwwroot\\newrelic_core\\extensions Copy Copy this template into the file you created. This template defines two separate class and methods as transactions but more can be added: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy In the file you created, customize the attribute values Name, AssemblyName, NameSpace.ClassName, and MethodName. Customize these values for both the trigger method and for any methods called by the trigger method. Tip These values are case sensitive. Name: Defines the transaction name. The metricName attribute is optional. If omitted, the transaction name will be NameSpace.ClassName/MethodName. The transaction category will be \"Custom\". The resulting full metric name will be \"OtherTransaction/Custom/Name . If you wish to change the transaction category from \"Custom\", use the SetTransactionName api call. The New Relic UI groups transactions under categories in the transaction type field. AssemblyName: The assembly that contains the trigger method. NameSpace.ClassName: The fully-qualified class name that contains the trigger method. MethodName: The exact name of the trigger method. Adding additional methods must include the \"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" attribute to be defined as a transaction. Tags without this attribute will add detail to existing transactions only. Optional: To check if the XML file is formatted correctly, you can check it against the XSD (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) using any XSD validator. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. View transactions in the UI The custom transaction starts when the method specified by methodName is invoked in the assembly specified by assemblyName. The transaction ends when the method returns or throws an exception. You can view these metrics in the Transactions page and in transaction traces. To view the transaction: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > Type > (select a type). The type is defined by Category/Name. one.newrelic.com > APM > (select an app) > Monitoring > Transactions > Type > (selected type): Use the Type menu to view your custom transactions. Example: Instrument three methods This example presents a simple implementation of creating transactions. Example custom instrumentation file This custom instrumentation file defines the three methods to instrument. Only two are defined as transactions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Bars\"> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar1\" /> <exactMethodMatcher methodName=\"Bar2\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar3\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods, with comments explaining when each one will be instrumented by the agent: var bar = new Bar(); bar.Bar1(); // Creates a transaction named Bars in the Custom category. bar.Bar2(); // Creates a transaction named Bars in the Custom category. bar.Bar3(); // Won't create a new transaction. See `If Bar3 is called directly`, below. namespace Foo { public class Bar { // The agent creates a transaction that includes an external service request in its transaction traces. public void Bar1() { new WebClient().DownloadString(\"http://www.google.com/\"); } // Creates a transaction containing one segment. public void Bar2() { // The Bar3 segment will contain your SQL query inside of it and possibly an execution plan. Bar3(); } // If Bar3 is called directly, the agent will not create a transaction. // However, if Bar3 is called from Bar1 or Bar2, Bar3 will appear as a segment containing its SQL query. private void Bar3() { using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } } } Copy Example: Instrument a console app This simple console app demonstrates creating transactions. After running the application a few times, you see the transactions you created in the Transactions page (at one.newrelic.com > APM > (select an app) > Transactions > Type). The Dummy segment will be visible in the transactions breakdown table and in any transaction traces. Example custom instrumentation file This custom instrumentation file defines two methods to instrument: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"CustomTransaction\"> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"StartTransaction\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"Dummy\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example app This code contains the two methods specified by the custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Console.WriteLine(\"Custom Transactions\"); var t = new CustomTransaction(); while (true) t.StartTransaction(); } } class CustomTransaction { public void StartTransaction() { Console.WriteLine(\"StartTransaction\"); Dummy(); } void Dummy() { System.Threading.Thread.Sleep(5000); } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.00232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create transactions via XML (.<em>NET</em>)",
        "sections": "For the .<em>NET</em> Framework or Core <em>agent</em> on Windows",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " have a non-IIS application, XML <em>instrumentation</em> requires enabling the <em>Instrument</em> all option during the .<em>NET</em> <em>agent</em> installation. Create transactions using XML <em>Custom</em> transactions (transactions not instrumented automatically) are defined in a <em>custom</em> <em>instrumentation</em> XML file. You define a method"
      },
      "id": "617e9aeb28ccbc08957feebd"
    }
  ],
  "/docs/apm/agents/net-agent/getting-started/8x-to-9x-agent-migration-guide": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.766464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.153046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> API. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/getting-started/apm-agent-security-net": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Important",
        "Target framework version",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "d0fa683a97252cb5ea0460070b0ff94ea107cb18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-12-31T02:27:19Z",
      "updated_at": "2021-12-14T16:44:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. Table of minimum agent versions required per .NET Core version .NET Core version Minimum required .NET agent version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 .NET 6.0 > = 9.2.0 Important On Linux ARM64 platforms, the .NET agent only supports versions of .NET 5.0 or later. The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy <TargetFramework>net6.0</TargetFramework> Copy Important On Linux ARM64 platforms, the .NET agent only supports target frameworks of net5.0 or later. Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Linux (ARM64/aarch64 architectures) All ARM64 Linux distributions supported by the .NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as both 64-bit (x64) and ARM64 (aarch64) versions on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, 5.0 and 6.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: NServiceBus 6.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.42752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods"
      },
      "id": "617e9ff0e7b9d2ab0dc04da1"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "51297ecb512364b29064565ce18f4f503d9dd415",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-12-31T02:26:39Z",
      "updated_at": "2021-12-14T16:44:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages. NServiceBus 5.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.77517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .<em>NET</em>"
      },
      "id": "617e9ff028ccbc90f37ff8ae"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10222,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to <em>get</em> meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    }
  ],
  "/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Important",
        "Target framework version",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "d0fa683a97252cb5ea0460070b0ff94ea107cb18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-12-31T02:27:19Z",
      "updated_at": "2021-12-14T16:44:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. Table of minimum agent versions required per .NET Core version .NET Core version Minimum required .NET agent version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 .NET 6.0 > = 9.2.0 Important On Linux ARM64 platforms, the .NET agent only supports versions of .NET 5.0 or later. The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy <TargetFramework>net6.0</TargetFramework> Copy Important On Linux ARM64 platforms, the .NET agent only supports target frameworks of net5.0 or later. Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Linux (ARM64/aarch64 architectures) All ARM64 Linux distributions supported by the .NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as both 64-bit (x64) and ARM64 (aarch64) versions on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, 5.0 and 6.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: NServiceBus 6.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.4275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods"
      },
      "id": "617e9ff0e7b9d2ab0dc04da1"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "51297ecb512364b29064565ce18f4f503d9dd415",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-12-31T02:26:39Z",
      "updated_at": "2021-12-14T16:44:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages. NServiceBus 5.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.77515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .<em>NET</em>"
      },
      "id": "617e9ff028ccbc90f37ff8ae"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to <em>get</em> meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    }
  ],
  "/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "51297ecb512364b29064565ce18f4f503d9dd415",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-12-31T02:26:39Z",
      "updated_at": "2021-12-14T16:44:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages. NServiceBus 5.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.77515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Cosmos DB The .<em>NET</em>"
      },
      "id": "617e9ff028ccbc90f37ff8ae"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to <em>get</em> meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " transaction. To obtain a reference to IAgent, use <em>GetAgent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.Api.<em>Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Important",
        "Target framework version",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "d0fa683a97252cb5ea0460070b0ff94ea107cb18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-12-31T02:27:19Z",
      "updated_at": "2021-12-14T16:44:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. Table of minimum agent versions required per .NET Core version .NET Core version Minimum required .NET agent version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 .NET 6.0 > = 9.2.0 Important On Linux ARM64 platforms, the .NET agent only supports versions of .NET 5.0 or later. The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy <TargetFramework>net6.0</TargetFramework> Copy Important On Linux ARM64 platforms, the .NET agent only supports target frameworks of net5.0 or later. Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Linux (ARM64/aarch64 architectures) All ARM64 Linux distributions supported by the .NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as both 64-bit (x64) and ARM64 (aarch64) versions on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, 5.0 and 6.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: NServiceBus 6.0 or higher: Puts and takes on messages and distributed tracing. RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.42749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods"
      },
      "id": "617e9ff0e7b9d2ab0dc04da1"
    },
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to <em>get</em> meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " transaction. To obtain a reference to IAgent, use <em>GetAgent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.Api.<em>Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    }
  ],
  "/docs/apm/agents/net-agent/index": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.19255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> API. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/install-guides/install-net-agent-using-nuget": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.39594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "e6ca5edfb8dde1f3d12cb84098b545577579ad65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-11-15T08:30:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (such as the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.16008,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "617ea23428ccbc5e0a800718"
    },
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "37eab8e6c4fc69ebf2a61fba1b0475d586459a52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-12-31T02:38:28Z",
      "updated_at": "2021-10-23T18:05:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "617ea1fc64441f6ccafbefe5"
    }
  ],
  "/docs/apm/agents/net-agent/install-guides/install-overview": [
    {
      "sections": [
        "New Relic guided install overview",
        "Why it matters",
        "Some technical detail",
        "Important",
        "On-host integration (OHI) recipes",
        "Troubleshoot common problems",
        "MySQL: Incorrect user permissions",
        "NGINX: No status URL"
      ],
      "title": "New Relic guided install overview",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Observe everything",
        "Get started"
      ],
      "external_id": "78c43fb865811c44f388f0601e0fb5f7da82fe87",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/cross-product-functions/install-configure/new-relic-guided-install-overview/",
      "published_at": "2021-12-30T20:03:34Z",
      "updated_at": "2021-12-14T03:50:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you haven't already, sign up for a free New Relic account so you can instrument your systems and send telemetry data to New Relic. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click the Guided install button. Or, if your account reports data through our EU data center, click EU Guided install. Guided install EU Guided install Our infrastructure agent discovers the applications and infrastructure and log sources running in your environment, and recommends which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Why it matters With our guided install, you can instrument your applications and infrastructure and start seeing your data in New Relic in minutes. The guided install uses our command line interface (CLI), the infrastructure agent for your host environment, and a library of installation recipes to instrument your applications and infrastructure for you. That means less toil for you. Because our instrumentation recipes are open source, you can modify existing recipes, or build new ones, to suit your needs. Some technical detail The New Relic guided install uses open source installation recipes to instrument on-host integrations. These recipes include installation and setup commands, information about logs, and metadata related to what’s being installed. They're collected in a YAML file for each type of system and have all of the installation details necessary to install the infrastructure agent for a specific integration. Important On Windows, our guided install only supports Microsoft SQL Server, logs, and the infrastructure agent. All other integrations are only supported on Linux. On-host integration (OHI) recipes The guided install automates the discovery, configuration, and installation of OHIs. However, there may be times when you want to instrument them one-by-one using the CLI install command. To install any individual on-host integration, run this command: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=API_KEY NEW_RELIC_ACCOUNT_ID=ACCOUNT_ID /usr/local/bin/newrelic install -n INTEGRATION-FLAG Copy For example: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=<API_KEY> NEW_RELIC_ACCOUNT_ID=<ACCOUNT_ID> /usr/local/bin/newrelic install -n apache-open-source-integration Copy The table lists the integrations supported by the guided install CLI command. The specific on-host integration commands are provided for your reference. Our open source integrations send performance metrics and inventory data from your servers and applications to the New Relic platform. You can view pre-built dashboards of your metric data, create alert policies, and create your own custom queries and charts. Integration Command Apache newrelic install -n apache-open-source-integration Cassandra newrelic install -n cassandra-open-source-integration Couchbase newrelic install -n couchbase-open-source-integration ElasticSearch newrelic install -n elasticsearch-open-source-integration HAProxy newrelic install -n haproxy-open-source-integration HashiCorp Consul newrelic install -n hashicorp-consul-open-source-integration Memcached newrelic install -n memcached-open-source-integration Microsoft SQL Server (Windows only) newrelic install -n mssql-server-integration-installer MongoDB newrelic install -n mongodb-open-source-integration MySQL newrelic install -n mysql-open-source-integration Nagios newrelic install -n nagios-open-source-integration Nginx newrelic install -n nginx-open-source-integration PostgreSQL newrelic install -n postgres-open-source-integration RabbitMQ newrelic install -n rabbitmq-open-source-integration Redis newrelic install -n redis-open-source-integration Varnish Cache newrelic install -n varnish-cache-open-source-integration Troubleshoot common problems As we identify areas where the guided install fails, we'll document them here and provide some troubleshooting guidance. MySQL: Incorrect user permissions To monitor MySQL health data, you need a valid username and password with specific permissions. These commands will create a user and grant the required permissions: Create a user newrelic@localhost with a specific password. sudo mysql -e \"CREATE USER 'newrelic'@'localhost' IDENTIFIED BY 'YOUR_SELECTED_PASSWORD';\" Copy Give replication privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Give select privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Once done, your next guided install attempt should work. NGINX: No status URL To monitor your NGINX server, you'll need to configure a valid status URL. status_url: The URL set up to provide the metrics using the status module. If the default value of 127.0.0.1 is incorrect, substitute the address/FQDN/URL for your system. Example: status_url: http://127.0.0.1/status You can read more about the status_url in these NGINX docs: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module There are different ways to set status_url, depending on how NGINX was installed: If enabled via Kubernetes: See Monitor services running on Kubernetes. If enabled via Amazon ECS: See Monitor services running on ECS. If installed on-host: Edit the config in the integration's YAML config file, nginx-config.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 246.8922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic guided <em>install</em> <em>overview</em>",
        "sections": "New Relic guided <em>install</em> <em>overview</em>",
        "body": "If you haven&#x27;t already, sign up for a free New Relic account so you can instrument your systems and send telemetry data to New Relic. Our guided <em>install</em> creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get"
      },
      "id": "61b8148c64441fb9d3d703b5"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-30T23:51:38Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 242.72778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP agent <em>installation</em> <em>overview</em>",
        "sections": "PHP agent <em>installation</em> <em>overview</em>",
        "tags": "<em>Installation</em>",
        "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated <em>install</em>, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It&#x27;s free, forever"
      },
      "id": "617e9d27e7b9d29455c04c8b"
    },
    {
      "sections": [
        "Install New Relic",
        "Install APM",
        "Install browser monitoring",
        "Install infrastructure monitoring",
        "Install mobile monitoring",
        "Install synthetic monitors",
        "Troubleshooting"
      ],
      "title": "Install New Relic ",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "819ccfd8df22ff322271245ca0831bf53609b91f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/cross-product-functions/install-configure/install-new-relic/",
      "published_at": "2021-12-31T01:40:19Z",
      "updated_at": "2021-12-30T20:03:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you sign up for a New Relic account (it's free, forever!) and install any of our monitoring services, you can start working with your data. Get started quickly with our New Relic Instant Observability quickstarts. Alternatively, use our guided install. Here are links to instructions on how to install New Relic monitoring services: APM Browser Infrastructure Mobile Synthetic monitors Integrations for third-party telemetry services Data ingest APIs (metrics, events, logs, traces) Install APM C Go Java .NET For Windows .NET applications on IIS, use our guided install in New Relic One to get started with APM. If you're on an EU server, use our launcher for EU accounts instead. Node.js PHP Python Ruby Install browser monitoring See browser monitoring install. Install infrastructure monitoring Linux guided install for infrastructure monitoring Linux procedures for infrastructure monitoring Windows Kubernetes Prometheus On-host integrations (for services like NGINX, StatsD, MySQL, etc.) AWS cloud integrations Azure cloud integrations Google Cloud Platform Install mobile monitoring Android iOS Install synthetic monitors Synthetic monitoring doesn't require installation, except for its private minions feature. Troubleshooting You should start seeing your data in the New Relic UI after installing the agent, generating some traffic, and waiting a few minutes. If no data appears, follow our troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic ",
        "sections": "<em>Install</em> New Relic",
        "tags": "<em>Install</em> and configure",
        "body": "After you sign up for a New Relic account (it&#x27;s free, forever!) and <em>install</em> any of our monitoring services, you can start working with your data. Get started quickly with our New Relic Instant Observability quickstarts. Alternatively, use our guided <em>install</em>. Here are links to instructions on how"
      },
      "id": "61b8148ce7b9d22373ef3a8b"
    }
  ],
  "/docs/apm/agents/net-agent/installation/install-net-agent-linux": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.76686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    }
  ],
  "/docs/apm/agents/net-agent/installation/install-net-agent-windows": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.76686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    }
  ],
  "/docs/apm/agents/net-agent/installation/introduction-net-agent-install": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.76685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    }
  ],
  "/docs/apm/agents/net-agent/installation/uninstall-net-agent": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.1019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.76685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    }
  ],
  "/docs/apm/agents/net-agent/installation/update-net-agent": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.492065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.766846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63217,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30844,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/getagent": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63217,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30844,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78342,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30841,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78342,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30841,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.76593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.15253,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.67788,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/iagent": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.7833,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f9b2715afefd59f4541b093ed0f18079f34024b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-12-31T02:34:24Z",
      "updated_at": "2021-10-23T18:13:29Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.23175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "617ea0f5196a6726c7f7c801"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/ignore-apdex": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/ignore-transaction": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/incrementcounter-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/index": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1039.5603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1033.8549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 759.7051,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/ispan": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.6317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30832,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/itransaction": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f9b2715afefd59f4541b093ed0f18079f34024b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-12-31T02:34:24Z",
      "updated_at": "2021-10-23T18:13:29Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.23174,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "617ea0f5196a6726c7f7c801"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/noticeerror-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.3083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/recordcustomevent-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.7828,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/recordmetric-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.7828,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/recordresponsetimemetric-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.7828,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/set-application-name": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78268,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/set-transaction-uri": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78268,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/set-user-parameters": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78256,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63123,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/settransactionname-net-agent-api": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78256,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.63123,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/start-agent": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.78244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.6311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    }
  ],
  "/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0": [
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.6311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " transaction. To obtain a reference to IAgent, use Get<em>Agent</em>. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent <em>agent</em> = NewRelic.<em>Api.Agent.NewRelic.GetAgent</em>(); ITransaction transaction = <em>agent</em>.CurrentTransaction; Copy"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "afbff8863ddc33bcc38a4c5c4ddc654d679d4d4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-12-31T02:33:03Z",
      "updated_at": "2021-12-20T01:18:03Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (for example TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current; IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP); IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction currentTransaction = agent.CurrentTransaction; var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); }); currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (for example, http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller. //The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is //contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\"); IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.30818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "617e9ba328ccbc6a037ff538"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f9b2715afefd59f4541b093ed0f18079f34024b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-12-31T02:34:24Z",
      "updated_at": "2021-10-23T18:13:29Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.231735,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "617ea0f5196a6726c7f7c801"
    }
  ],
  "/docs/apm/agents/net-agent/other-features/async-support-net": [
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-31T02:37:09Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.45956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "071338482f7140fed1cf42574e3803e37e58aed4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.98326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "617ea18f64441f8ce6fbcecd"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d3f7c3c6d5f7fc5b93d7aadf281fd111f4a6aec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:21:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.82715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "617ea1fb28ccbc93a1800c19"
    }
  ],
  "/docs/apm/agents/net-agent/other-features/browser-monitoring-net-agent": [
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-31T02:37:09Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.45956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "9cfd34cd4a8e91fe9fd2ddbca4a774694b1e5a50",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.89801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "617e97d4e7b9d2b164c04ac4"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d3f7c3c6d5f7fc5b93d7aadf281fd111f4a6aec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:21:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.82715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "617ea1fb28ccbc93a1800c19"
    }
  ],
  "/docs/apm/agents/net-agent/other-features/limit-log-disk-space-log-rolling": [
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-31T02:37:09Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.45956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "071338482f7140fed1cf42574e3803e37e58aed4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.98326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "617ea18f64441f8ce6fbcecd"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "9cfd34cd4a8e91fe9fd2ddbca4a774694b1e5a50",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "617e97d4e7b9d2b164c04ac4"
    }
  ],
  "/docs/apm/agents/net-agent/other-features/net-performance-metrics": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "071338482f7140fed1cf42574e3803e37e58aed4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.98326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "617ea18f64441f8ce6fbcecd"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "9cfd34cd4a8e91fe9fd2ddbca4a774694b1e5a50",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:20:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "617e97d4e7b9d2b164c04ac4"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d3f7c3c6d5f7fc5b93d7aadf281fd111f4a6aec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-12-31T02:36:25Z",
      "updated_at": "2021-10-23T18:21:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.82715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "617ea1fb28ccbc93a1800c19"
    }
  ],
  "/docs/apm/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.3958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "e6ca5edfb8dde1f3d12cb84098b545577579ad65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-11-15T08:30:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (such as the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.16003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "617ea23428ccbc5e0a800718"
    },
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "37eab8e6c4fc69ebf2a61fba1b0475d586459a52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-12-31T02:38:28Z",
      "updated_at": "2021-10-23T18:05:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "617ea1fc64441f6ccafbefe5"
    }
  ],
  "/docs/apm/agents/net-agent/other-installation/install-net-agent-aspnet-core": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.39578,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "e6ca5edfb8dde1f3d12cb84098b545577579ad65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-11-15T08:30:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (such as the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.16002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "617ea23428ccbc5e0a800718"
    },
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "37eab8e6c4fc69ebf2a61fba1b0475d586459a52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-12-31T02:38:28Z",
      "updated_at": "2021-10-23T18:05:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "617ea1fc64441f6ccafbefe5"
    }
  ],
  "/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container": [
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "e6ca5edfb8dde1f3d12cb84098b545577579ad65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-11-15T08:30:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (such as the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.16002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "617ea23428ccbc5e0a800718"
    },
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "37eab8e6c4fc69ebf2a61fba1b0475d586459a52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-12-31T02:38:28Z",
      "updated_at": "2021-10-23T18:05:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "617ea1fc64441f6ccafbefe5"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "b26fe09f9a2b281ac55976169e15165cabb640a0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-12-31T02:37:49Z",
      "updated_at": "2021-10-23T18:04:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.25328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "617ea1c764441f3bedfbd106"
    }
  ],
  "/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.39578,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "e6ca5edfb8dde1f3d12cb84098b545577579ad65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-11-15T08:30:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (such as the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.16002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "617ea23428ccbc5e0a800718"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "b26fe09f9a2b281ac55976169e15165cabb640a0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-12-31T02:37:49Z",
      "updated_at": "2021-10-23T18:04:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.25328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "617ea1c764441f3bedfbd106"
    }
  ],
  "/docs/apm/agents/net-agent/other-installation/net-agent-install-resources": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-31T02:37:50Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.39578,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "37eab8e6c4fc69ebf2a61fba1b0475d586459a52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-12-31T02:38:28Z",
      "updated_at": "2021-10-23T18:05:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "617ea1fc64441f6ccafbefe5"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "b26fe09f9a2b281ac55976169e15165cabb640a0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-12-31T02:37:49Z",
      "updated_at": "2021-10-23T18:04:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.25328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "617ea1c764441f3bedfbd106"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/agent-changes-content-type-header-wcf-apps-net": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/azure-pipelines-wipes-out-newrelicazurewebsitesextension-directories": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/browser-injection-health-check-conflict": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/cocreate-errors-no-event-log": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/cocreateinstance-errors-no-profiler-log": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/debugging-net-core-agent-linux": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.100784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/generate-logs-troubleshooting-net": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.100784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/high-memory-usage-net": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10072,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/missing-couchbase-metrics-net": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10072,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/missing-net-async-metrics": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/monitor-short-lived-net-processes": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/net-agent-reports-handled-errors": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.21684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/new-relic-net-status-monitor": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10059,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49086,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.216835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.10059,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49086,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "Generate logs for troubleshooting (.NET)",
        "Generate log files",
        "Important",
        "Generate Azure Web App log files",
        "Collect system information",
        "Check permissions"
      ],
      "title": "Generate logs for troubleshooting (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "239266fa2ed6b3602125f09925d6ac08eeb82101",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/generate-logs-troubleshooting-net/",
      "published_at": "2021-12-31T00:09:34Z",
      "updated_at": "2021-10-31T14:05:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent stores two types of log files in the Logs directory at %ALLUSERSPROFILE%\\New Relic\\.NET Agent\\Logs. Both are needed for troubleshooting; for example, if no data appears in the New Relic UI for your app. If either log type is missing, some component of the .NET agent did not start. Agent logs: These file names begin with newrelic_agent_. Profiler logs: These file names begin with NewRelic.Profiler. Generate log files Important When troubleshooting your New Relic .NET agent, ensure it has been configured to generate debug level log files, and monitor the size of your log file closely. Logging at debug generates a lot of data very quickly. After reproducing your problem, return the log level to info. If your C:\\ProgramData\\New Relic\\.NET Agent is in a hidden folder, update your Windows settings so that you can see it. To generate New Relic for .NET log files: Open newrelic.config, usually located in C:\\ProgramData\\New Relic\\.NET Agent (or %ALLUSERSPROFILE%\\New Relic\\.NET Agent). Change the <log level=\"info\" /> setting to <log level=\"debug\" />. Save and close the file, then wait a few minutes for the agent to read the new settings. Generate a few minutes of traffic to your app. If sending your log file to New Relic Support: In your New Relic support ticket, attach the newrelic.config file (not the text of the file), and attach the entire Logs folder from C:\\ProgramData\\New Relic\\.NET Agent\\Logs or from %ALLUSERSPROFILE%\\New Relic\\.NET Agent\\Logs. In newrelic.config, change <log level=\"debug\" /> to <log level=\"info\" />. Generate Azure Web App log files Kudu Console manages Microsoft Azure Web App log reporting. To use the Kudu Console, first log into Azure. Navigate to the URL of your Azure Web app; for example: https://example.azurewebsites.net Copy Insert the Kudu Console URL scmsnippet into the URL; for example: https://example.scm.azurewebsites.net Copy Check for the Kudu logo with a black navigation bar at the top left of the page and your Azure username at the top right of the page. Then, to change the log level within the Kudu Console: From the Kudu Console navigation bar, select the Debug console menu, then select either CMD or PowerShell. Navigate to D:\\home\\site\\wwwroot\\newrelic. To edit newrelic.config, select the pencil icon. Change <log level=\"info\"> to <log level=\"debug\"> Save the change to newrelic.config. Wait a few minutes for the debug logs to be generated. Use the same steps to switch the log level back to info. Collect system information In addition to agent logs, a Microsoft System Information file is also useful for troubleshooting: From the Windows task bar, select Start > Run and enter msinfo32. Select OK. After the system information page loads, select File > Save. Wait a few minutes for the server to save the file. Attach the file to your New Relic support ticket. Check permissions Sometimes the .NET agent will start but not be able to write to its logs because it does not have the necessary permissions to create the log directory and log files. Permissions management varies by environment, so you will need to work with your system administrator to verify that this is not an issue.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.620026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate logs for <em>troubleshooting</em> (.<em>NET</em>)",
        "sections": "Generate logs for <em>troubleshooting</em> (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> stores two types of log files in the Logs directory at %ALLUSERSPROFILE%\\New Relic\\.<em>NET</em> <em>Agent</em>\\Logs. Both are needed for <em>troubleshooting</em>; for example, if no data appears in the New Relic UI for your app. If either log type is missing, some component of the .<em>NET</em> <em>agent</em> did"
      },
      "id": "617ea2a8196a672c3ff7e605"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-appears-after-disabling-tls-10": [
    {
      "sections": [
        "TraceMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "TraceMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "029c89628718a98d79fcc6b1a83b9e4b2a8a3b2a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0/",
      "published_at": "2021-12-31T02:35:44Z",
      "updated_at": "2021-12-31T02:35:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements Agent version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access to the following properties: Properties Name Description TraceId Returns a string representing the currently executing trace. If the trace ID is not available, or distributed tracing is disabled, the value will be string.Empty. SpanId Returns a string representing the currently executing span. If the span ID is not available, or distributed tracing is disabled, the value will be string.Empty. IsSampled Returns true if the current trace is sampled for inclusion, false if it is sampled out. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); TraceMetadata traceMetadata = agent.TraceMetadata; string traceId = traceMetadata.TraceId; string spanId = traceMetadata.SpanId; bool isSampled = traceMetadata.IsSampled; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.100525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "sections": "TraceMetadata (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.TraceMetadata; Copy Returns properties in the current execution environment used to support tracing. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Distributed tracing must be enabled to get meaningful values. Description Provides access"
      },
      "id": "617ea156e7b9d295d9c0636b"
    },
    {
      "sections": [
        "IAgent",
        "Syntax",
        "Requirements",
        "Description",
        "Properties",
        "Examples"
      ],
      "title": "IAgent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "8a03f3d1741bee18e865cb183faedcca4c8ec0d5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/iagent/",
      "published_at": "2021-12-30T23:58:11Z",
      "updated_at": "2021-12-30T23:58:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface IAgent Copy Provides access to Agent artifacts and methods, such as the currently executing transaction. Requirements Agent version 8.9 or higher. Compatible with all app types. Description Provides access to agent artifacts and methods, such as the currently executing transaction. To obtain a reference to IAgent, use GetAgent. Properties Name Description CurrentTransaction Property providing access to the currently executing transaction via the ITransaction interface. Must be called inside a transaction. CurrentSpan Property providing access to the currently executing span via the ISpan interface. Examples IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.49079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax public interface IAgent Copy Provides access to <em>Agent</em> artifacts and methods, such as the currently executing transaction. Requirements <em>Agent</em> version 8.9 or higher. Compatible with all app types. Description Provides access to <em>agent</em> artifacts and methods, such as the currently executing"
      },
      "id": "617ea05928ccbc6a03800173"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "d3dbb641efc8ef63e6f7f21458d3e84390801c5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-12-31T00:00:33Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.216835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "617ea33e196a67da25f7dd5d"
    }
  ]
}