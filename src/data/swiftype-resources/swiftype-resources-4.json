{
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.51419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-10-18T21:05:28Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.35707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-10-18T21:05:29Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.85698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.51419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-10-18T21:05:28Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.35707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-10-18T21:05:29Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.85698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.5141,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-10-18T21:05:29Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.85698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-18T21:03:56Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.1638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "6043d881196a67be9f960f7a"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.5141,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-10-18T21:05:28Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.35707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-10-18T21:05:29Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.85698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-10-18T21:07:27Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.560104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/install-new-relic-php-agent-gae-flexible-environment": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-10-18T21:03:56Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 270.3564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Node.js <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Node.js <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>flexible</em> <em>environment</em>, see: Google App Engine&#x27;s documentation for Node.js Google App Engine&#x27;s tutorial to deploy a Node.js app 1. Set up the <em>GAE</em> project and <em>install</em> dependencies Follow standard procedures to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s Node.js <em>agent</em>, including your license key. Be sure to save the newrelic module"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-10-18T10:51:20Z",
      "updated_at": "2021-07-09T06:22:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, browser monitoring, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.54083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "Additional <em>installation</em>",
        "body": "With APM&#x27;s Java <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM, browser monitoring"
      },
      "id": "6043b98628ccbcef312c60c5"
    },
    {
      "sections": [
        "Install the Go agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get agent troubleshooting logs from GAE"
      ],
      "title": "Install the Go agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "9d2ddffb83697c6191c0b6abaed8839516b3aa54",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment/",
      "published_at": "2021-10-18T02:16:40Z",
      "updated_at": "2021-03-11T07:58:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our Go agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. Here we explain how to add New Relic to your GAE flex app by configuring a custom runtime, and give an example of deploying a Go app with Docker. Important The Go agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the Go agent, building a custom Go runtime for Docker, and deploying a golang application. For more information about deploying and configuring your Go app in the GAE flexible environment, see: Google App Engine's documentation for Go Google App Engine's tutorials to deploy a Go app 1. Set up the GAE project and install dependencies Follow standard procedures to install the Go agent for your specific app server, including your license key. Follow Google App Engine procedures for Go to create a new Cloud Platform project, create an App Engine application, download and install git, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. The following Dockerfile example code defines the golang version used. FROM golang:1.8-onbuild CMD go run main.go Copy 4. Build a Docker image To build the Docker image, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build --rm -t Docker-image-name . Copy 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud --project go-app-name app deploy Copy Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see GAE's documentation for debugging an instance. To redirect New Relic Go agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.yml file to: log_file_name: STDOUT Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.71548,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Installation</em>",
        "body": "With our Go <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM and browser monitoring. Here we"
      },
      "id": "6043cd7164441fc312378efe"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-heroku": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-10-18T21:07:27Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.560104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/silent-mode-install-script-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/starting-php-daemon-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/uninstalling-php-agent": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.97705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.74716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-10-18T20:30:15Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-10-18T21:07:27Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.560104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/api-guides/guide-using-php-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-10-18T02:58:57Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.61542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.45206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 68.9015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/attributes/attribute-examples": [
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-10-18T20:31:03Z",
      "updated_at": "2021-07-09T12:30:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page view data. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.227104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent",
        "For more help"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "8625d9cf6f7f2f7afee4aaca1787466601a1d9ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-10-18T20:31:59Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.73955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "603e863628ccbc8187eba775"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.25597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> configuration",
        "sections": "<em>Attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " the capture_params setting, the Ruby <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    }
  ],
  "/docs/agents/php-agent/attributes/enable-or-disable-attributes": [
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent",
        "For more help"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "8625d9cf6f7f2f7afee4aaca1787466601a1d9ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-10-18T20:31:59Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.73955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "603e863628ccbc8187eba775"
    },
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations",
        "For more help"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d87eef67a3263b3a62afcbad7c77c4321314afb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-10-18T21:08:23Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Agent attributes (types, destinations, and limits for attributes used by New Relic agents) PHP agent attributes (PHP-specific attributes available as of version 4.9) Enabling and disabling attributes (properties, rules, and backwards compatibility information for PHP agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.09102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) <em>PHP</em> <em>agent</em> <em>attributes</em> (<em>PHP</em>-specific <em>attributes</em> available as of version 4.9) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>PHP</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "603e789564441f6a044e883b"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.2559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> configuration",
        "sections": "<em>Attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " the capture_params setting, the Ruby <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    }
  ],
  "/docs/agents/php-agent/attributes/php-agent-attributes": [
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-10-18T20:31:03Z",
      "updated_at": "2021-07-09T12:30:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page view data. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.227104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations",
        "For more help"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d87eef67a3263b3a62afcbad7c77c4321314afb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-10-18T21:08:23Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Agent attributes (types, destinations, and limits for attributes used by New Relic agents) PHP agent attributes (PHP-specific attributes available as of version 4.9) Enabling and disabling attributes (properties, rules, and backwards compatibility information for PHP agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.09102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) <em>PHP</em> <em>agent</em> <em>attributes</em> (<em>PHP</em>-specific <em>attributes</em> available as of version 4.9) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>PHP</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "603e789564441f6a044e883b"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.2559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> configuration",
        "sections": "<em>Attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " the capture_params setting, the Ruby <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    }
  ],
  "/docs/agents/php-agent/configuration/name-your-php-application": [
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.13396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> <em>configuration</em>",
        "sections": "Ruby <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": "You can configure the New Relic Ruby <em>agent</em> with settings in a <em>configuration</em> file, environment variables, or programmatically with server-side <em>configuration</em>. This document summarizes the <em>configuration</em> options available for the Ruby <em>agent</em>. If the default value for a <em>configuration</em> option is (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-18T03:55:42Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.75185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-10-19T05:55:15Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.06995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/configuration/php-agent-configuration": [
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.13389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> <em>configuration</em>",
        "sections": "Ruby <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": "You can configure the New Relic Ruby <em>agent</em> with settings in a <em>configuration</em> file, environment variables, or programmatically with server-side <em>configuration</em>. This document summarizes the <em>configuration</em> options available for the Ruby <em>agent</em>. If the default value for a <em>configuration</em> option is (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-18T03:55:42Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.75185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Proxy daemon (newrelic.cfg) settings",
        "Recommended configuration",
        "Manual configuration",
        "Important",
        "logfile",
        "loglevel",
        "ssl",
        "ssl_ca_bundle",
        "ssl_ca_path",
        "proxy",
        "address (alias for port)",
        "pidfile",
        "auditlog",
        "For more help"
      ],
      "title": "Proxy daemon (newrelic.cfg) settings",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "d8d7d5a8bee26ffa9f1819944d3154f3fc249e4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings/",
      "published_at": "2021-10-18T20:32:52Z",
      "updated_at": "2021-04-16T09:23:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The daemon (newrelic-daemon) acts as a proxy between the PHP agent and the New Relic collector to reduce network traffic and to improve response time for instrumented applications. The daemon process starts when your system starts, and must be running for data to be sent to New Relic. Recommended configuration Beginning with version 3.0 of the PHP agent, the daemon can be automatically configured and started by the agent. Auto-configuration does not require the newrelic.cfg file. This is the recommended configuration. However, there are still some cases where manually starting the daemon is useful. For more information about the startup process, see New Relic daemon startup modes. Manual configuration A sample daemon configuration file was created during installation. To manually configure the daemon, copy and rename newrelic.cfg.template from /etc/newrelic/newrelic.cfg.template to /etc/newrelic/newrelic.cfg and edit the file. All settings are optional and most have default values. Important The agent will not automatically start the daemon if it finds a newrelic.cfg file in the /etc/newrelic/ directory. logfile Default: [none] Sets the name of the log file to use. Can be set on the command line by the daemon -l option. Setting this value on the command line will override the value set in newrelic.cfg Although the daemon itself provides no default name for the log file, the daemon startup scripts use the -l option to set the default location and name to /var/log/newrelic/newrelic-daemon.log. loglevel Default: info Sets the level of detail for messages sent to the log file. This field has the same possible values as the agent, which are, in increasing order of detail: error warning info debug If you are encountering problems with the daemon, set the log level debug for at least long enough to reproduce the problem. A debug log file is often necessary to debug issues with the proxy daemon. Can be set on the command line using the daemon --loglevel option. Setting this value on the command line will override the value set in newrelic.cfg ssl Default: yes This configuration setting is only available in PHP agent versions lower than 8.0. Versions 8.0 and higher will ignore this setting and always use HTTPS encryption to communicate with New Relic. When set to yes, the proxy will only use a secure connection to communicate with the collector. While the setting specifies SSL, the setting refers to HTTPS encryption to the latest industry standards. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to New Relic and the New Relic REST API. Can be enabled or disabled on the command line by the daemon --tls option. Setting this value on the command line will override the value set in newrelic.cfg ssl_ca_bundle Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If ssl_ca_path is also set (see below), the certificates in this file will be searched first, followed by the certificates contained in the ssl_ca_path directory. This setting has no effect when ssl is set to false. ssl_ca_path Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If ssl_ca_bundle is also set (see above), it will be searched first followed by the certificates contained in ssl_ca_path. This setting has no effect when ssl is set to false. proxy Default: [none] Certain sites have very restrictive egress firewalls and require you to use a proxy in order to communicate with the outside world. If this applies to your site, you will need to set this value. The value is in the form scheme://user:password@hostname:port. The values scheme, user, password, and port may be omitted depending on your proxy configuration. For example, if you are using a HTTP proxy that does not require a user name and password, you could just use hostname:port. The port defaults to 1080 for most proxies. Can be set on the command line using the daemon --proxy option. Setting this value on the command line will override the value set in newrelic.cfg address (alias for port) Default: /tmp/.newrelic.sock Sets the socket endpoint the daemon will listen on. This endpoint allows agents to communicate with the daemon. This must be the same value as the agent's newrelic.daemon.address setting. This can be specified in these ways: Recommended. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). To enable connections from applications that are running on different hosts (helpful for container environments), set this value to host:port, where host denotes the host name or IP address of the local host, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for PHP agent version 9.2.0.247 or higher. These options may also be set via the command line using the daemon --address option. Setting this value on the command line will override the value set in newrelic.cfg. pidfile Default: /tmp/newrelic.pid Sets the name of the file in which the daemon will record its process ID (pid). Although the daemon sets this to a default value of /tmp/newrelic.pid, the startup script almost always uses the --pidfile option to set it to /var/run/newrelic-daemon.pid. Can be set on the command line using the daemon --pidfile option. Setting this value on the command line will override the value set in newrelic.cfg auditlog Default: [none] This feature was introduced in version 3.4. When enabled, the agent will create an audit log, which contains all of the data sent from the daemon to New Relic. This data includes the full URL, date, time, and the uncompressed, un-encoded data for each request. This allows you to observe exactly what data is sent to New Relic in order to ensure no sensitive data is included. The file specified can not be the same file as the daemon log, as described above. This audit log can become very large very quickly, so New Relic recommends that you do not use it for extended periods of time. Can be set on the command line using the daemon --auditlog option. Setting this value on the command line will override the value set in newrelic.cfg For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.05992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Recommended <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>configuration</em> Beginning with version 3.0 of the <em>PHP</em> <em>agent</em>, the daemon can be automatically configured and started by the <em>agent</em>. Auto-<em>configuration</em> does not require the newrelic.cfg file. This is the recommended <em>configuration</em>. However, there are still some cases where manually starting the daemon"
      },
      "id": "60441c8d64441f3825378ed8"
    }
  ],
  "/docs/agents/php-agent/configuration/php-directory-ini-settings": [
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.13389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> <em>configuration</em>",
        "sections": "Ruby <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": "You can configure the New Relic Ruby <em>agent</em> with settings in a <em>configuration</em> file, environment variables, or programmatically with server-side <em>configuration</em>. This document summarizes the <em>configuration</em> options available for the Ruby <em>agent</em>. If the default value for a <em>configuration</em> option is (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-18T03:55:42Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.75185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-10-19T05:55:15Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.06995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings": [
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "Caution",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "error_collector.ignore_classes",
        "error_collector.ignore_messages",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_messages",
        "error_collector.expected_status_codes",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.logger",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-10-19T03:52:40Z",
      "updated_at": "2021-10-19T03:52:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events. Caution When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. For information on ignored and expected errors, see this page on Error Analytics in APM. To set expected errors via the NewRelic::Agent.notice_error Ruby method, consult the Ruby Agent API. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS DEPRECATED Use error_collector.ignore_classes instead. Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.ignore_classes Type Array Default [] Environ variable None A list of error classes that the agent should ignore. Caution This option can't be set via environment variable. error_collector.ignore_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be ignored. Caution This option can't be set via environment variable. error_collector.ignore_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be ignored. error_collector.expected_classes Type Array Default [] Environ variable None A list of error classes that the agent should treat as expected. Caution This option can't be set via environment variable. error_collector.expected_messages Type Hash Default {} Environ variable None A map of error classes to a list of messages. When an error of one of the classes specified here occurs, if its error message contains one of the strings corresponding to it here, that error will be treated as expected. Caution This option can't be set via environment variable. error_collector.expected_status_codes Type String Default \"\" Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_STATUS_CODES A comma separated list of status codes, possibly including ranges. Errors associated with these status codes, where applicable, will be treated as expected. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT If true, enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default Copy Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default false Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED DEPRECATED Please see: distributed_tracing-enabled. If true, enables cross-application tracing when distributed_tracing.enabled is set to false. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. Important Cross application tracing is deprecated in favor of distributed tracing. Distributed tracing is on by default for Ruby agent versions 8.0.0 and above. Middlewares are not required to support distributed tracing. To continue using cross application tracing, update the following options in your newrelic.yml configuration file: # newrelic.yml cross_application_tracer: enabled: true distributed_tracing: enabled: false Copy disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.logger Type String Default \"auto\" Environ variable NEW_RELIC_INSTRUMENTATION_LOGGER Controls auto-instrumentation of Ruby standard library Logger at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Note: This will only ignore transaction events, not spans or traces from the same transation. See documentation on (ignoring specific transactions) [https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/#config-ignoring] for more details. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.13382,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> <em>configuration</em>",
        "sections": "Ruby <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": "You can configure the New Relic Ruby <em>agent</em> with settings in a <em>configuration</em> file, environment variables, or programmatically with server-side <em>configuration</em>. This document summarizes the <em>configuration</em> options available for the Ruby <em>agent</em>. If the default value for a <em>configuration</em> option is (Dynamic"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-18T03:55:42Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.75184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-10-19T05:55:15Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.06995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/features/browser-monitoring-php-agent": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-10-18T21:09:16Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.51704,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-10-18T21:08:24Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.2146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-10-18T20:33:55Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.87512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    }
  ],
  "/docs/agents/php-agent/features/distributed-tracing-php-agent": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-10-18T21:09:16Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.51703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-10-18T20:32:53Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.07482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-10-18T20:33:55Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.87512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    }
  ],
  "/docs/agents/php-agent/features/multiple-accounts": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-10-18T21:09:16Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.51703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-10-18T20:32:53Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.07482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-10-18T21:08:24Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.2146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    }
  ],
  "/docs/agents/php-agent/features/php-custom-instrumentation": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-10-18T21:09:16Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.51703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-10-18T20:32:53Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.07482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-10-18T21:08:24Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.2146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    }
  ],
  "/docs/agents/php-agent/features/recording-deployments-using-php-script": [
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-10-18T20:32:53Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.07482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-10-18T21:08:24Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.2146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-10-18T20:33:55Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.87512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/analyze-phpunit-test-data-new-relic": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/aws-elastic-beanstalk-installation-php": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-10-18T20:36:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.91872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/guzzle": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-10-18T20:36:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.91872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/php-frameworks-integrate-support-new-relic": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/predis-library-php": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-10-18T20:36:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.91872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-18T20:04:24Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.80621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.38727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-18T20:35:08Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.39647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/getting-started/apm-agent-security-php": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.051956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) <em>start</em> date Initial release date of Node.js <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.922775,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.100746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Python <em>agent</em>",
        "sections": "Compatibility and requirements for the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " this Python version support schedule. The version support policy does not replace the general New Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) <em>start</em>"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/php-agent/getting-started/introduction-new-relic-php": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.051956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) <em>start</em> date Initial release date of Node.js <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.922775,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.100746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Python <em>agent</em>",
        "sections": "Compatibility and requirements for the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " this Python version support schedule. The version support policy does not replace the general New Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) <em>start</em>"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/php-agent/getting-started/new-relic-daemon-processes": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.05187,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) <em>start</em> date Initial release date of Node.js <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.922775,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.10068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Python <em>agent</em>",
        "sections": "Compatibility and requirements for the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " this Python version support schedule. The version support policy does not replace the general New Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) <em>start</em>"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.05187,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) <em>start</em> date Initial release date of Node.js <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.10068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Python <em>agent</em>",
        "sections": "Compatibility and requirements for the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " this Python version support schedule. The version support policy does not replace the general New Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) <em>start</em>"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "521da8f62e16ad0899ae6db9916e19bb8aa1ab3d",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-07-27T04:40:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.38083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "603e8f6564441f32f24e8843"
    }
  ],
  "/docs/agents/php-agent/index": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.452,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 68.90145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-18T20:27:19Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 64.162735,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: Install <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: Install <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    }
  ],
  "/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service": [
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.47063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>. For more help If you need more help, check out these support and learning resources: Suggest a change and learn"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball",
        "For more help"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "89539cd849fdd4ad04cd60ebeb6c0f35a17dad16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-10-18T20:37:08Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.20827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "603e85bbe7b9d28c712a0802"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update",
        "For more help"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "99d0ae456eaa8bc681c0b7f23f517cd6a3d9d214",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.5219,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other <em>installation</em> options, tar"
      },
      "id": "603e852028ccbc3249eba75b"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos": [
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.47063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>. For more help If you need more help, check out these support and learning resources: Suggest a change and learn"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "Install PHP agent on shared hosting service",
        "Shared hosting services",
        "Installation and troubleshooting tips",
        "Important",
        "For more help"
      ],
      "title": "Install PHP agent on shared hosting service",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "78f7c68a4b5931e61e9550668be5030dbe0d5620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-08-02T02:20:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In general, basic hosting plans do not allow standard installation of New Relic's PHP agent, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide installation for common web apps/frameworks (such as WordPress, Drupal, Joomla, etc), but installing the PHP agent still requires permissions not allowed in many basic plans. If necessary, contact your website developer/hosting provider for technical assistance. Shared hosting services In general, shared hosting providers (who do not provide root command line access) and hosting providers that do not have traditional operating systems (such as PaaS) do not allow users to install New Relic agents through typical channels. For example, these hosting providers do not support New Relic integrations for certain subscription levels: DreamHost: Shared Web Hosting WordPress.com hosted blog GoDaddy: Economy, Deluxe, Ultimate, WordPress Blog Hosting HostGator Web Hosting Before you install New Relic's PHP agent, make sure your hosting service level is compatible with New Relic. Also make sure you have administrator permissions for installation procedures from the command line at the root level. Installation and troubleshooting tips To help ensure that your application can integrate successfully with New Relic: Make sure your system meets New Relic's PHP compatibility requirements. Important Windows operating systems are not supported. Follow New Relic's PHP installation procedures. If your system meets New Relic's compatibility requirements but your installation is unsuccessful, gather the following information: Exact steps you tried Results, including success or failure messages Your operating system and version (for example, Ubuntu Linux version 12.04 64-bit) Your hosting service provider and subscription level If applicable, contact your website developer for assistance. For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Finding help (resources available through the online Help Center) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.16822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "sections": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "In general, basic hosting plans do not allow standard <em>installation</em> of New Relic&#x27;s <em>PHP</em> <em>agent</em>, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide <em>installation</em> for common web apps&#x2F;frameworks (such as WordPress, Drupal, Joomla, etc"
      },
      "id": "6043b66d64441fab16378ed9"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update",
        "For more help"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "99d0ae456eaa8bc681c0b7f23f517cd6a3d9d214",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.5219,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other <em>installation</em> options, tar"
      },
      "id": "603e852028ccbc3249eba75b"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-overview": [
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball",
        "For more help"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "89539cd849fdd4ad04cd60ebeb6c0f35a17dad16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-10-18T20:37:08Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.20826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "603e85bbe7b9d28c712a0802"
    },
    {
      "sections": [
        "Install PHP agent on shared hosting service",
        "Shared hosting services",
        "Installation and troubleshooting tips",
        "Important",
        "For more help"
      ],
      "title": "Install PHP agent on shared hosting service",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "78f7c68a4b5931e61e9550668be5030dbe0d5620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-08-02T02:20:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In general, basic hosting plans do not allow standard installation of New Relic's PHP agent, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide installation for common web apps/frameworks (such as WordPress, Drupal, Joomla, etc), but installing the PHP agent still requires permissions not allowed in many basic plans. If necessary, contact your website developer/hosting provider for technical assistance. Shared hosting services In general, shared hosting providers (who do not provide root command line access) and hosting providers that do not have traditional operating systems (such as PaaS) do not allow users to install New Relic agents through typical channels. For example, these hosting providers do not support New Relic integrations for certain subscription levels: DreamHost: Shared Web Hosting WordPress.com hosted blog GoDaddy: Economy, Deluxe, Ultimate, WordPress Blog Hosting HostGator Web Hosting Before you install New Relic's PHP agent, make sure your hosting service level is compatible with New Relic. Also make sure you have administrator permissions for installation procedures from the command line at the root level. Installation and troubleshooting tips To help ensure that your application can integrate successfully with New Relic: Make sure your system meets New Relic's PHP compatibility requirements. Important Windows operating systems are not supported. Follow New Relic's PHP installation procedures. If your system meets New Relic's compatibility requirements but your installation is unsuccessful, gather the following information: Exact steps you tried Results, including success or failure messages Your operating system and version (for example, Ubuntu Linux version 12.04 64-bit) Your hosting service provider and subscription level If applicable, contact your website developer for assistance. For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Finding help (resources available through the online Help Center) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.16822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "sections": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "In general, basic hosting plans do not allow standard <em>installation</em> of New Relic&#x27;s <em>PHP</em> <em>agent</em>, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide <em>installation</em> for common web apps&#x2F;frameworks (such as WordPress, Drupal, Joomla, etc"
      },
      "id": "6043b66d64441fab16378ed9"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update",
        "For more help"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "99d0ae456eaa8bc681c0b7f23f517cd6a3d9d214",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.5219,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other <em>installation</em> options, tar"
      },
      "id": "603e852028ccbc3249eba75b"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-tar-file": [
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.47062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>. For more help If you need more help, check out these support and learning resources: Suggest a change and learn"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball",
        "For more help"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "89539cd849fdd4ad04cd60ebeb6c0f35a17dad16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-10-18T20:37:08Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.20826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "603e85bbe7b9d28c712a0802"
    },
    {
      "sections": [
        "Install PHP agent on shared hosting service",
        "Shared hosting services",
        "Installation and troubleshooting tips",
        "Important",
        "For more help"
      ],
      "title": "Install PHP agent on shared hosting service",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "78f7c68a4b5931e61e9550668be5030dbe0d5620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-08-02T02:20:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In general, basic hosting plans do not allow standard installation of New Relic's PHP agent, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide installation for common web apps/frameworks (such as WordPress, Drupal, Joomla, etc), but installing the PHP agent still requires permissions not allowed in many basic plans. If necessary, contact your website developer/hosting provider for technical assistance. Shared hosting services In general, shared hosting providers (who do not provide root command line access) and hosting providers that do not have traditional operating systems (such as PaaS) do not allow users to install New Relic agents through typical channels. For example, these hosting providers do not support New Relic integrations for certain subscription levels: DreamHost: Shared Web Hosting WordPress.com hosted blog GoDaddy: Economy, Deluxe, Ultimate, WordPress Blog Hosting HostGator Web Hosting Before you install New Relic's PHP agent, make sure your hosting service level is compatible with New Relic. Also make sure you have administrator permissions for installation procedures from the command line at the root level. Installation and troubleshooting tips To help ensure that your application can integrate successfully with New Relic: Make sure your system meets New Relic's PHP compatibility requirements. Important Windows operating systems are not supported. Follow New Relic's PHP installation procedures. If your system meets New Relic's compatibility requirements but your installation is unsuccessful, gather the following information: Exact steps you tried Results, including success or failure messages Your operating system and version (for example, Ubuntu Linux version 12.04 64-bit) Your hosting service provider and subscription level If applicable, contact your website developer for assistance. For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Finding help (resources available through the online Help Center) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.16822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "sections": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "In general, basic hosting plans do not allow standard <em>installation</em> of New Relic&#x27;s <em>PHP</em> <em>agent</em>, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide <em>installation</em> for common web apps&#x2F;frameworks (such as WordPress, Drupal, Joomla, etc"
      },
      "id": "6043b66d64441fab16378ed9"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-ubuntu-debian": [
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.47062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>. For more help If you need more help, check out these support and learning resources: Suggest a change and learn"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball",
        "For more help"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "89539cd849fdd4ad04cd60ebeb6c0f35a17dad16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-10-18T20:37:08Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.20826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "603e85bbe7b9d28c712a0802"
    },
    {
      "sections": [
        "Install PHP agent on shared hosting service",
        "Shared hosting services",
        "Installation and troubleshooting tips",
        "Important",
        "For more help"
      ],
      "title": "Install PHP agent on shared hosting service",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "78f7c68a4b5931e61e9550668be5030dbe0d5620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-08-02T02:20:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In general, basic hosting plans do not allow standard installation of New Relic's PHP agent, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide installation for common web apps/frameworks (such as WordPress, Drupal, Joomla, etc), but installing the PHP agent still requires permissions not allowed in many basic plans. If necessary, contact your website developer/hosting provider for technical assistance. Shared hosting services In general, shared hosting providers (who do not provide root command line access) and hosting providers that do not have traditional operating systems (such as PaaS) do not allow users to install New Relic agents through typical channels. For example, these hosting providers do not support New Relic integrations for certain subscription levels: DreamHost: Shared Web Hosting WordPress.com hosted blog GoDaddy: Economy, Deluxe, Ultimate, WordPress Blog Hosting HostGator Web Hosting Before you install New Relic's PHP agent, make sure your hosting service level is compatible with New Relic. Also make sure you have administrator permissions for installation procedures from the command line at the root level. Installation and troubleshooting tips To help ensure that your application can integrate successfully with New Relic: Make sure your system meets New Relic's PHP compatibility requirements. Important Windows operating systems are not supported. Follow New Relic's PHP installation procedures. If your system meets New Relic's compatibility requirements but your installation is unsuccessful, gather the following information: Exact steps you tried Results, including success or failure messages Your operating system and version (for example, Ubuntu Linux version 12.04 64-bit) Your hosting service provider and subscription level If applicable, contact your website developer for assistance. For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Finding help (resources available through the online Help Center) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.16822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "sections": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "In general, basic hosting plans do not allow standard <em>installation</em> of New Relic&#x27;s <em>PHP</em> <em>agent</em>, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide <em>installation</em> for common web apps&#x2F;frameworks (such as WordPress, Drupal, Joomla, etc"
      },
      "id": "6043b66d64441fab16378ed9"
    }
  ],
  "/docs/agents/php-agent/installation/update-php-agent": [
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-10-18T20:37:07Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.47062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>. For more help If you need more help, check out these support and learning resources: Suggest a change and learn"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball",
        "For more help"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "89539cd849fdd4ad04cd60ebeb6c0f35a17dad16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-10-18T20:37:08Z",
      "updated_at": "2021-07-27T04:42:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.20826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "603e85bbe7b9d28c712a0802"
    },
    {
      "sections": [
        "Install PHP agent on shared hosting service",
        "Shared hosting services",
        "Installation and troubleshooting tips",
        "Important",
        "For more help"
      ],
      "title": "Install PHP agent on shared hosting service",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "78f7c68a4b5931e61e9550668be5030dbe0d5620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-08-02T02:20:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In general, basic hosting plans do not allow standard installation of New Relic's PHP agent, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide installation for common web apps/frameworks (such as WordPress, Drupal, Joomla, etc), but installing the PHP agent still requires permissions not allowed in many basic plans. If necessary, contact your website developer/hosting provider for technical assistance. Shared hosting services In general, shared hosting providers (who do not provide root command line access) and hosting providers that do not have traditional operating systems (such as PaaS) do not allow users to install New Relic agents through typical channels. For example, these hosting providers do not support New Relic integrations for certain subscription levels: DreamHost: Shared Web Hosting WordPress.com hosted blog GoDaddy: Economy, Deluxe, Ultimate, WordPress Blog Hosting HostGator Web Hosting Before you install New Relic's PHP agent, make sure your hosting service level is compatible with New Relic. Also make sure you have administrator permissions for installation procedures from the command line at the root level. Installation and troubleshooting tips To help ensure that your application can integrate successfully with New Relic: Make sure your system meets New Relic's PHP compatibility requirements. Important Windows operating systems are not supported. Follow New Relic's PHP installation procedures. If your system meets New Relic's compatibility requirements but your installation is unsuccessful, gather the following information: Exact steps you tried Results, including success or failure messages Your operating system and version (for example, Ubuntu Linux version 12.04 64-bit) Your hosting service provider and subscription level If applicable, contact your website developer for assistance. For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Finding help (resources available through the online Help Center) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.16822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "sections": "<em>Install</em> <em>PHP</em> <em>agent</em> on shared hosting service",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "In general, basic hosting plans do not allow standard <em>installation</em> of New Relic&#x27;s <em>PHP</em> <em>agent</em>, because administrator (root) permissions are required to install it. Your hosting provider may allow or provide <em>installation</em> for common web apps&#x2F;frameworks (such as WordPress, Drupal, Joomla, etc"
      },
      "id": "6043b66d64441fab16378ed9"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/index": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 646.00745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 554.1607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 544.8587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_parameter": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_tracer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_background_job": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_capture_params": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_disable_autorum": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_of_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_footer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_header": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_apdex": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_name_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_notice_error": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-10-18T03:24:41Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_custom_event": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_datastore_segment": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_appname": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_user_attributes": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_start_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.054016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicaddcustomspanparameter-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccreatedistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.4545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.4545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-10-18T03:24:41Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgetlinkingmetadata": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.4545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.4545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45448,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-18T18:31:42Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicissampled": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.45448,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-18T03:23:50Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-10-18T03:24:41Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.08915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/agent-stops-working-after-updating-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.8076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/checking-loaded-configuration-files-directory": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.8076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting-while-using-selinux": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.8076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.8076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/determine-permissions-requirements-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.807594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/first-php-transaction-not-reported": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.807594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/generating-logs-troubleshooting-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.0678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/ini-settings-not-taking-effect-immediately": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.0678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/missing-php-module": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.067795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/no-data-appears-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.067795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "04d8ab64c4452eb3e601b5b9db1edd416b5362f4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:15:23Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.93498,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "603e90b9196a679ef9a83dd9"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-agent-not-reporting-errors": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.067795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.067795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/protocol-mismatch-error": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/threaded-apache-worker-mpms": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/transactions-named-indexphp-or-unknown": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/troubleshoot-php-agent-instance-count": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/uninstrumented-time-traces": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/using-phpinfo-verify-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/verifying-php-daemon": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06777,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/why-when-restart-your-web-server-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-18T20:44:01Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.06777,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-10-18T12:31:03Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.38069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-18T20:03:02Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.80756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/python-agent/api-guides/guide-using-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.60062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-10-18T02:58:57Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.61502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/10/python-update%20-7-0-0-166/",
      "sections": [
        "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166"
      ],
      "published_at": "2021-10-20T03:28:15Z",
      "title": "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166",
      "updated_at": "2021-10-17T11:31:06Z",
      "type": "docs",
      "external_id": "069188585b789621f721f3c1e55fa898971e330a",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "With the release of Python Agent version v7.0.0.166, upon agent upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the agent in order to have access to distributed traces. Distributed Tracing gives software teams working in modern environments an easy way to capture, visualize, and analyze traces through complex architectures, including architectures that use both monoliths and microservices. What’s the impact? With this change, customers will see distributed traces immediately upon upgrading to Python version v7.0.0.166. Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the Python agent configuration file by setting distributed_tracing.enabled=false OR by setting the environment variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=false. If you need more traces and are experiencing dropped spans, the agent reservoir can be expanded to accommodate more spans. To do so, set environment variable or config item called span_events.max_samples_stored to a value greater than 2,000 up to a maximum value of 10,000. Note that increasing this value may impact memory usage. With Distributed Tracing on by default, Cross Application Tracing (CAT) will now be deprecated and will be removed in a future version of the agent. Customers on CAT will now see distributed traces instead. Customers who would like to revert back to CAT can do so in the configuration file by setting cross_application_tracer.enabled = true. It is however recommended to stay using distributed tracing, given that CAT will be removed in the future.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.94964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "sections": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "body": "With the release of <em>Python</em> <em>Agent</em> version v7.0.0.166, upon <em>agent</em> upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the <em>agent</em> in order to have access to distributed traces. Distributed Tracing gives software teams working in modern"
      },
      "id": "616c097a28ccbc9883002660"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/asyncpg": [
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-10-18T12:14:03Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.07352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-10-18T13:28:08Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.75627,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.60052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " page and quickly switch between the APM and browser data for a particular app. For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/django-asgi-mode": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-18T13:26:16Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.72743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-10-18T12:14:03Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.07352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.60052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " page and quickly switch between the APM and browser data for a particular app. For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/attributes/enabling-disabling-attributes-python": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.84733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-10-18T13:30:47Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.514145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " configuration settings, see Enabling and disabling <em>attributes</em>. For more help Additional documentation resources include: <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by our <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-19T05:56:31Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.46245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring <em>attributes</em> for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/attributes/python-agent-attributes": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.84733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-19T05:56:31Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.46245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring <em>attributes</em> for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling"
      },
      "id": "604454a1e7b9d25e645799ff"
    },
    {
      "sections": [
        "Python attribute examples",
        "Contents",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disable all attributes",
        "Select specific destinations",
        "Select values and destinations",
        "For more help"
      ],
      "title": "Python attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "f061cf11f9af109eeaddfa05c3287d9c2d9f2789",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-attribute-examples/",
      "published_at": "2021-10-18T13:31:55Z",
      "updated_at": "2021-03-11T02:55:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the Python agent. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events, and error_collector. To limit the destinations see the Selecting specific destinations example. Configuration: attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can simply pass a list to attributes.include: Configuration: attributes.include = request.parameters.user_id request.parameters.product_id Copy Disable all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: attributes.enabled = false attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Select specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: attributes.enabled = true transaction_tracer.attributes.enabled = false attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Select values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: browser_monitoring.attributes.enabled = true attributes.exclude = food* attributes.include = food.fruit.* transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Python agent attributes (summary of attributes captured by the Python agent) Enabling and disabling attributes (configuration settings, rules, and backwards compatibility information for Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.50484,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>attribute</em> examples",
        "sections": "<em>Python</em> <em>attribute</em> examples",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by our <em>agents</em>) <em>Python</em> <em>agent</em> <em>attributes</em> (summary of <em>attributes</em> captured by the <em>Python</em> <em>agent</em>) Enabling and disabling <em>attributes</em> (configuration settings, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6043b5e628ccbc26ef2c609d"
    }
  ],
  "/docs/agents/python-agent/attributes/python-attribute-examples": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-18T13:35:40Z",
      "updated_at": "2021-10-18T13:35:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.84725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-10-18T13:30:47Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.514145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " configuration settings, see Enabling and disabling <em>attributes</em>. For more help Additional documentation resources include: <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by our <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-19T05:56:31Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.46243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring <em>attributes</em> for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ]
}