{
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T08:44:46Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.76422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Node.js</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-20T19:21:16Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.38504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.254364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T08:44:46Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.76419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Node.js</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-20T19:21:16Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.38501,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.25433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T08:44:46Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.764145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Node.js</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-20T19:21:16Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.38497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.2543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T08:44:46Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.764145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Node.js</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-20T19:21:16Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.38497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.2543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-09-20T08:54:19Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.85213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/install-new-relic-php-agent-gae-flexible-environment": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T08:44:46Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 363.29218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Node.js <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Node.js <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>flexible</em> <em>environment</em>, see: Google App Engine&#x27;s documentation for Node.js Google App Engine&#x27;s tutorial to deploy a Node.js app 1. Set up the <em>GAE</em> project and <em>install</em> dependencies Follow standard procedures to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s Node.js <em>agent</em>, including your license key. Be sure to save the newrelic module"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Log in to and install New Relic via partners",
        "Create a New Relic account (all partners)",
        "Sign into and deploy New Relic (most partners)",
        "Sign into and deploy New Relic (special partners)",
        "Tip",
        "A - M partners",
        "Amazon Web Services (AWS)",
        "Google Cloud Platform (GCP)",
        "Heroku",
        "Magento",
        "N - Z partners",
        "Pantheon",
        "Rackspace Cloud Tools",
        "W3 Edge and WordPress",
        "Windows Azure"
      ],
      "title": "Log in to and install New Relic via partners",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Partner installation"
      ],
      "external_id": "d6c766c0328d09f6208426396d5443d115029fcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/install-new-relic/partner-based-installation/log-install-new-relic-partners/",
      "published_at": "2021-09-20T14:36:22Z",
      "updated_at": "2021-09-14T05:47:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you signed up for New Relic through one of New Relic's partners, you may need to follow additional single sign on (SSO) procedures to log in to start using New Relic. There also may be special steps needed to complete the deployment process. This document provides basic login procedures for accounts created through New Relic partners, with links to additional resources as applicable. Create a New Relic account (all partners) If you have received a special offer from a New Relic partner, follow the partner's link directly to create a New Relic account. Sign into and deploy New Relic (most partners) You will receive an email confirmation message with a link to confirm your account, sign into New Relic, and complete the deployment process. Sign into and deploy New Relic (special partners) These partners require specific login and deployment procedures for you to use your New Relic account. Tip If you signed up for a New Relic account through a partner that is not listed here, follow standard procedures to sign into and deploy New Relic. A - M partners Amazon Web Services (AWS) Different installation and page viewing procedures apply, depending on whether you want to install AWS for your app or your host. For more information, see Amazon Web Services (AWS) users. Google Cloud Platform (GCP) As a Google Cloud Platform (GCP) partner, New Relic supports the App Engine flexible environment. Each APM agent has its own requirements for the GAE flex environment. After you install the New Relic agent, you can view your app performance with APM. Heroku Heroku is a Platform as a Service (PaaS) solution capable of hosting web applications. With the New Relic Heroku add-on, you can extend Heroku with metrics from APM and browser monitoring. The New Relic add-on supports Java, Node.js, PHP, Python, and Ruby. For more information about installing and using New Relic with Heroku, see: Heroku dev center documentation New Relic's documentation for installing Heroku Magento Magento has partnered with New Relic to give merchants faster access to data and out-of-the-box tools. The New Relic Reporting Extension helps e-commerce businesses to make data-driven decisions. To create a New Relic account with Magento for your PHP app: Sign up via your Magento sales solution provider. After you sign up for your New Relic account, deploy the PHP agent to your Magento installation. Wait a few minutes, then check your app's performance in the APM Overview page. N - Z partners Pantheon To create a New Relic account through Pantheon and sign into New Relic: From Pantheon's partner page with New Relic, select the sign up link. Follow the online instructions to complete the installation process. Wait for New Relic to begin collecting data for your app. After a few minutes, you can check your app's performance in the APM Overview page. For more information, see Pantheon's documentation. Rackspace Cloud Tools To create an account through Rackspace Cloud Tools and sign into New Relic, follow these basic procedures. For more information, see Rackspace Cloud Load Balancer plugin. Log in to your CloudTools account at cloudtools.rackspace.com/myapps. From Use Your Applications, select New Relic. Select your agent language (Java, .NET, PHP, Python, Ruby), then follow the online instructions to complete the installation process. Wait for New Relic to begin collecting data for your app. Wait a few minutes, then check your app's performance in the APM Overview page. W3 Edge and WordPress Tip To create an account through W3 Total Cache and sign into New Relic, you must install and run the W3 PHP agent, not just get an API key. Deploying the agent requires administrative access, including: SSH/command line access Root or sudo access to run the New Relic installer and restart your web server If you are running an economy, shared hosting, or blogger package, or if you are not sure what are your account permissions, contact your hosting provider. For example, if your WordPress site is on shared servers, you may not be able to install New Relic. Your provider should be able to give you information about your account permissions, or upgrade your account if necessary. To install the New Relic plugin for W3 Edge/Wordpress users: Log in to your WordPress account at wordpress.org/support/bb-login.php. Follow New Relic's instructions to complete the installation process, or contact W3TC support for assistance. Wait for New Relic to begin collecting data. Within a few minutes after deploying the agent, performance data about your app will appear on APM's Applications Overview page. Tip WordPress also offers a plugin for our browser monitoring. Windows Azure Windows Azure is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including .NET and Node.js. For more information about using our .NET agent with Azure, see: Installing the .NET agent on Azure Azure Preview Portal Azure Web Apps Azure Cloud Services For more information about installing and using our Node.js agent with Azure, see Node.js agent on Microsoft Azure.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 305.59894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Log <em>in</em> to and <em>install</em> <em>New</em> <em>Relic</em> via partners",
        "sections": "Log <em>in</em> to and <em>install</em> <em>New</em> <em>Relic</em> via partners",
        "tags": "Partner <em>installation</em>",
        "body": " for your app or your host. For more information, see Amazon Web Services (AWS) users. Google Cloud Platform (GCP) As a Google Cloud Platform (GCP) partner, <em>New</em> <em>Relic</em> supports the App Engine <em>flexible</em> <em>environment</em>. Each APM <em>agent</em> has its own requirements for the <em>GAE</em> flex <em>environment</em>. After you <em>install</em>"
      },
      "id": "6043f447e7b9d2f5295799e5"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-09-20T23:41:45Z",
      "updated_at": "2021-07-09T06:22:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, browser monitoring, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 266.73544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "Additional <em>installation</em>",
        "body": "With APM&#x27;s Java <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM, browser monitoring"
      },
      "id": "6043b98628ccbcef312c60c5"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-heroku": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-09-20T08:54:19Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.85212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/silent-mode-install-script-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/starting-php-daemon-advanced": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/uninstalling-php-agent": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-09-20T08:57:17Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.17542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php": [
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-09-20T08:54:18Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.60385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-09-20T08:52:42Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.56867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-09-20T08:54:19Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.85212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/php-agent/api-guides/guide-using-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.98445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.210434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.578705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    }
  ],
  "/docs/agents/php-agent/attributes/attribute-examples": [
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.685425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.685265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-09-20T14:22:42Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.12416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> <em>attributes</em>",
        "sections": "<em>Agent</em> <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the <em>PHP</em> <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of <em>attributes</em>"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/php-agent/attributes/enable-or-disable-attributes": [
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.685425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.685265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-09-20T14:22:42Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.12416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> <em>attributes</em>",
        "sections": "<em>Agent</em> <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the <em>PHP</em> <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of <em>attributes</em>"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/php-agent/attributes/php-agent-attributes": [
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.68535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.68518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-09-20T14:22:42Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.12412,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> <em>attributes</em>",
        "sections": "<em>Agent</em> <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the <em>PHP</em> <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of <em>attributes</em>"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/php-agent/configuration/name-your-php-application": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-09-20T16:33:16Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.005264,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.93381,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Language agents and distributed tracing",
        "Tip",
        "Quick start for standard distributed tracing (recommended):",
        "Step 1. Identify services",
        "Step 2. Instrument each service with an APM agent",
        "Step 3. View traces",
        "View traces that include a specific service",
        "View traces across accounts",
        "Set up Infinite Tracing (advanced option)",
        "Step 1. Complete the instrumentation for standard distributed tracing in the quick start above",
        "Step 2. Set up the trace observer",
        "Step 3: Configure the agent for Infinite Tracing",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Step 4. (Optional) Customize Infinite Tracing",
        "Options for older APM agents",
        "Compatibility guide",
        "Important",
        "Configure standard distributed tracing for your older agents",
        "Manual instrumentation (If automatic instrumentation doesn't work)",
        "Instrument the calling service",
        "Instrument the called service"
      ],
      "title": "Language agents and distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "b87eacf981bfae09990c95604ba3b7fc19741a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/language-agents-enable-distributed-tracing/",
      "published_at": "2021-09-20T09:46:46Z",
      "updated_at": "2021-09-14T09:14:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby. Each of these offers several ways to leverage the power of distributed tracing: Quick start for standard distributed tracing (recommended): A fast way to get started Infinite Tracing: An advanced alternative to standard distributed tracing Older APM agents: Tracing options if you have older APM agents Manual instrumentation: Tips if automatic instrumentation doesn't work Tip If you want to get more background before getting started, check out these topics: How span sampling works explains distributed tracing options. Impacts to APM tells you what to expect if you are a current APM user but haven't set up distributed tracing. Quick start for standard distributed tracing (recommended): This is the best approach to set up standard distributed tracing if you haven't installed any APM agents for your services yet, or if you want to instrument additional services. Tip You'll need a New Relic account to set up distributed tracing. If you don't already have one, you can quickly create a free account. Step 1. Identify services Figure out which services you want to instrument so they each send trace data to New Relic. Step 2. Instrument each service with an APM agent We have installation assistants for a variety of languages to help you instrument each service. You should run the installation assistant for each service you want to instrument to ensure that each installation has a unique application name. To start the assistant, click the link for your language: APM: C APM: Golang APM: Java APM: .NET APM: Node.js APM: PHP APM: Python APM: Ruby Tip This quick-start approach with the installation assistant automatically enables distributed tracing for each service you run it on, but if you already have a APM agent that you want to participate in distributed tracing, you'll need to manually enable distributed tracing. See Options for older APM agents. Step 3. View traces After you instrument each of your services with APM agents, generate some traffic in your application so we can capture some traces. Here are two ways to view your traces in the UI: View traces that include a specific service Here's one way you can see traces for a particular service: Go to one.newrelic.com. Click APM in the top menu bar. Click your service. In the left navigation's Monitor section, click Distributed tracing. If you don't see the traces you want, you can filter by the trace.id. View traces across accounts This option allows you to search all traces across all New Relic accounts in your organization that you have access to. Go to one.newrelic.com. Click Browse data in the top menu bar, and then click Traces. Select your entity in the left pane. If you don't see the traces you want, you can filter by the trace.id. For more help finding your traces in the UI: Understand and use the distributed tracing UI Query distributed trace data Set up Infinite Tracing (advanced option) Standard distributed tracing for APM agents (above) captures up to 10% of your traces, but if you want us to analyze all your data and find the most relevant traces, you can set up Infinite Tracing. This alternative to standard distributed tracing is available for all APM language agents except C SDK. Tip To learn more about this feature, see Infinite Tracing. Before beginning, first ensure you meet the requirements. Step 1. Complete the instrumentation for standard distributed tracing in the quick start above The Infinite Tracing setup builds on the instrumentation step from the Quick start for standard distributed tracing. Step 2. Set up the trace observer The trace observer is a New Relic AWS-based service that collects and analyzes all your traces. Follow the instructions in Set up trace observer. When you're done, return here with your trace observer information and continue with the next step to configure the agent. Step 3: Configure the agent for Infinite Tracing Infinite Tracing configuration settings include the standard distributed tracing plus information about the trace observer. Find the settings for your language agent below: C SDK Infinite tracing is not available for C SDK. Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Infinite Tracing Configuration options: newrelic.Config structure: app, err := newrelic.NewApplication( newrelic.ConfigAppName(YOUR_APP_NAME), newrelic.ConfigLicense(YOUR_LICENSE_KEY), func(cfg *newrelic.Config) { cfg.DistributedTracer.Enabled = true cfg.InfiniteTracing.TraceObserver.Host = YOUR_TRACE_OBSERVER_HOST }, ) Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=YOUR_TRACE_OBSERVER_HOST Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } infinite_tracing: { trace_observer: { host: 'YOUR_TRACE_OBSERVER_HOST' } } Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Infinite Tracing Pull down the libraries with this installation command, and then set up the configuration file or environment variables: pip install newrelic[infinite-tracing] Copy Configuration options: Configuration file (newrelic.ini): distributed_tracing.enabled = true infinite_tracing.trace_observer_host= YOUR_TRACE_OBSERVER_HOST Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. To set up Infinite Tracing, you need to install the Infinite Tracing gem. The gem is available in rubygems.org. For applications using Bundler, additionally include the Infinite Tracing gem in the Gemfile: gem 'newrelic-infinite_tracing' Copy If you're using Rails 3 or higher, or Rails 2.3 in the recommended configuration, Rails will automatically call Bundler.require and cause newrelic-infinite_tracing to be required during startup of your application. If you're using Sinatra or another framework, you must manually call require 'newrelic/infinite_tracing' or manually call Bundler.require. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: 'YOUR_TRACE_OBSERVER_HOST' Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Step 4. (Optional) Customize Infinite Tracing After you add the agent configuration settings, you should start seeing data in the New Relic UI. After you spend some time analyzing your data, you may want to adjust some of the features of Infinite Tracing: Configure trace observer monitoring Configure span attribute trace filter Configure random trace filter Options for older APM agents If you have older APM agents, use this section to figure out if the distributed tracing features you want are supported. Following the compatibility information is a section showing the basic configuration settings to turn on standard distributed tracing. If your older agent supports Infinite Tracing and you want to set it up, see the steps above. Compatibility guide Find your language agents below to confirm if you can use your existing agents with distributed tracing: C SDK Install (compile) or update to the required C SDK version. For best results, update to the latest C SDK version. Option C SDK version Standard distributed tracing 1.1.0 or higher (W3C Trace Context not available) Infinite Tracing Not available Go Install or update to the required Go agent version. For best results, update to the latest Go agent version. Option Go agent version Standard distributed tracing 2.1.0 or higher With W3C Trace Context: 3.1.0 or higher Infinite Tracing v3.5.0 (includes W3C Trace Context) Supported environments: Go 1.9 or higher Java Install or update to the required Java agent version. For best results, update to the latest Java agent version. Important Your JVM's networkaddress.cache.ttl security setting must not be set to forever (i.e. -1). For more information about this networking property, please visit the Oracle Network Properties docs. Type Java agent version Standard distributed tracing 4.3.0 or higher With W3C Trace Context: 5.10 or higher Infinite Tracing 5.12.1 or higher (includes W3C Trace Context) Supported environments: Java 8: Update 252 or higher All versions of Java 9 or higher Tip For special considerations, see Infinite Tracing: Configuring SSL for Java 7 and 8. .NET Install or update to the required .NET agent version. For best results, update to the latest .NET agent version. Option .NET agent version Standard distributed tracing 8.6.45.0 or higher With W3C Trace Context: 8.27.139.0 or higher Infinite Tracing 8.30.0 (includes W3C Trace Context) Supported environments: .NET Framework 4.5 or higher .NET Core 2.0 or higher Node.js Install or update to the required Node.js agent version. For best results, update to the latest Node.js agent version. Option Node.js agent version Standard distributed tracing 4.7.0 or higher With W3C Trace Context: 6.4 or higher Infinite Tracing 7.3.0 (includes W3C Trace Context) Supported environments: Node version 10.10.0 or higher PHP Install or update to the required PHP agent version. For best results, update to the latest PHP agent version. Option PHP agent version Standard distributed tracing 8.4 or higher With W3C Trace Context: 9.8 or higher Infinite Tracing 9.12.0.268 or higher Python Install or update to the required Python agent version. For best results, update to the latest Python agent version. Option Python agent version Standard distributed tracing 4.2.0.100 or higher With W3C Trace Context: 5.6 or higher Infinite Tracing 5.12.0.140 (includes W3C Trace Context) Supported environments: CPython only (pypy is unsupported) Ruby Install or update to the required Ruby agent version. For Infinite Tracing, you also need to install the Infinite Tracing gem. For best results, update to the latest Ruby agent version and Infinite Tracing gem version, if applicable. Option Ruby agent version Standard distributed tracing newrelic_rpm 5.3.0.346 or higher With W3C Trace Context: newrelic_rpm 6.9 or higher Infinite Tracing newrelic_rpm 7.0.0 or higher (includes W3C Trace Context) newrelic-infinite_tracing 7.0.0 or higher Supported environments: Ruby 2.5 or higher Configure standard distributed tracing for your older agents Distributed tracing is enabled through configuration settings. Review the following agent-specific sections. For general help with agent configurations, see Configure the agent. Important Server-side configuration is not available for Infinite Tracing. C SDK Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your C applications. Type Required configuration Standard distributed tracing Configuration options: newrelic_app_config_t structure: newrelic_app_config_t* config; config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Standard distributed tracing Configuration options: ConfigOption structure: newrelic.NewApplication( newrelic.ConfigAppName(\"Example App\"), newrelic.ConfigLicense(os.Getenv(\"NEW_RELIC_LICENSE_KEY\")), newrelic.ConfigDistributedTracerEnabled(true), ) Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> </configuration> Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Standard distributed tracing Configuration file (newrelic.ini): distributed_tracing.enabled = true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Tip If you need help with proxy configuration, see Proxy support. Manual instrumentation (If automatic instrumentation doesn't work) Recommendation: Before performing any custom instrumentation, read: How distributed tracing works Troubleshoot missing data If a service is not passing the trace header to other services, you can use the distributed tracing payload APIs to instrument the calling service and the called service. The calling service uses an API call to generate a payload, which is accepted by the called service. Instrument the calling service To instrument the calling service: Ensure the version of the APM agent that monitors the calling service supports distributed tracing. Invoke the agent API call for generating a distributed trace payload: C SDK | Go | Java | .NET | Node.js | PHP | Python | Ruby. Important To maintain proper ordering of spans in a trace, ensure you generate the payload in the context of the span that sends it. Add that payload to the call made to the destination service (for example, in a header). (Optional) Identify the call as an external call: C SDK Go Java .NET: n/a Node.js PHP: n/a Python Ruby Instrument the called service To instrument the called service: Ensure the version of the APM agent that monitors the called service supports distributed tracing. If the New Relic agent on the called service does not identify a New Relic transaction, use the agent API to declare a transaction: C SDK One way to tell that a transaction is not in progress: when newrelic_create_distributed_trace_payload() is called, a NULL pointer is returned. To solve this problem, follow the procedures to create a transaction with the C SDK. Go One way to tell that a transaction is not in progress: when Transaction.InsertDistributedTraceHeaders(h http.Header) is called, no headers are inserted. To create a transaction, see Instrument Go transactions. Java One way to tell that a transaction is not in progress: when Transaction.insertDistributedTraceHeaders(Headers) is called, no headers are inserted (this API requires agent 6.4.0+). To create a transaction, see Java agent transaction-related APIs. .NET One way to tell that a transaction is not in progress: CreateDistributedTracePayload() returns an empty payload. To create a transaction, see Introduction to .NET custom instrumentation. Node.js One way to tell that a transaction is not in progress: the Node.js agent logs will report an error similar to this: No transaction found when calling Transaction.acceptDistributedTracePayload. Copy Use startWebTransaction to create a web transaction or startBackgroundTransaction to capture a non-web transaction. PHP One way to tell that a transaction is not in progress: newrelic_insert_distributed_trace_headers() returns false. To create a transaction, see newrelic_start_transaction. Python To tell that a transaction is not in progress: when transaction = current_transaction() is run, transaction is None. Or, if result = accept_distributed_trace_payload(payload) is run, then the result is False. Use background_task to report a non-web transaction. For more on Python instrumentation, see Monitor transactions and segments. Ruby If you are using a Rack-based web framework and have enabled New Relic's Rack instrumentation, the Ruby agent will handle starting a transaction for you. For other use cases, see the add_transaction_tracer API method. Extract the payload from the call that you received (for example, in a header). Invoke the call for accepting the payload: C SDK | Go | Java | .NET | PHP | Node.js | Python | Ruby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.93834,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Language <em>agents</em> and distributed tracing",
        "sections": "<em>Configure</em> standard distributed tracing for your older <em>agents</em>",
        "tags": "Enable and <em>configure</em>",
        "body": " for the <em>PHP</em> <em>agent</em> Type Required <em>configuration</em> Infinite Tracing <em>Configuration</em> options: <em>Configuration</em> file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= &quot;YOUR_TRACE_OBSERVER_HOST&quot; Copy Python Here"
      },
      "id": "6072a66564441fb28e9d8595"
    }
  ],
  "/docs/agents/php-agent/configuration/php-agent-configuration": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-09-20T16:33:16Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.00523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.93378,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Language agents and distributed tracing",
        "Tip",
        "Quick start for standard distributed tracing (recommended):",
        "Step 1. Identify services",
        "Step 2. Instrument each service with an APM agent",
        "Step 3. View traces",
        "View traces that include a specific service",
        "View traces across accounts",
        "Set up Infinite Tracing (advanced option)",
        "Step 1. Complete the instrumentation for standard distributed tracing in the quick start above",
        "Step 2. Set up the trace observer",
        "Step 3: Configure the agent for Infinite Tracing",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Step 4. (Optional) Customize Infinite Tracing",
        "Options for older APM agents",
        "Compatibility guide",
        "Important",
        "Configure standard distributed tracing for your older agents",
        "Manual instrumentation (If automatic instrumentation doesn't work)",
        "Instrument the calling service",
        "Instrument the called service"
      ],
      "title": "Language agents and distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "b87eacf981bfae09990c95604ba3b7fc19741a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/language-agents-enable-distributed-tracing/",
      "published_at": "2021-09-20T09:46:46Z",
      "updated_at": "2021-09-14T09:14:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby. Each of these offers several ways to leverage the power of distributed tracing: Quick start for standard distributed tracing (recommended): A fast way to get started Infinite Tracing: An advanced alternative to standard distributed tracing Older APM agents: Tracing options if you have older APM agents Manual instrumentation: Tips if automatic instrumentation doesn't work Tip If you want to get more background before getting started, check out these topics: How span sampling works explains distributed tracing options. Impacts to APM tells you what to expect if you are a current APM user but haven't set up distributed tracing. Quick start for standard distributed tracing (recommended): This is the best approach to set up standard distributed tracing if you haven't installed any APM agents for your services yet, or if you want to instrument additional services. Tip You'll need a New Relic account to set up distributed tracing. If you don't already have one, you can quickly create a free account. Step 1. Identify services Figure out which services you want to instrument so they each send trace data to New Relic. Step 2. Instrument each service with an APM agent We have installation assistants for a variety of languages to help you instrument each service. You should run the installation assistant for each service you want to instrument to ensure that each installation has a unique application name. To start the assistant, click the link for your language: APM: C APM: Golang APM: Java APM: .NET APM: Node.js APM: PHP APM: Python APM: Ruby Tip This quick-start approach with the installation assistant automatically enables distributed tracing for each service you run it on, but if you already have a APM agent that you want to participate in distributed tracing, you'll need to manually enable distributed tracing. See Options for older APM agents. Step 3. View traces After you instrument each of your services with APM agents, generate some traffic in your application so we can capture some traces. Here are two ways to view your traces in the UI: View traces that include a specific service Here's one way you can see traces for a particular service: Go to one.newrelic.com. Click APM in the top menu bar. Click your service. In the left navigation's Monitor section, click Distributed tracing. If you don't see the traces you want, you can filter by the trace.id. View traces across accounts This option allows you to search all traces across all New Relic accounts in your organization that you have access to. Go to one.newrelic.com. Click Browse data in the top menu bar, and then click Traces. Select your entity in the left pane. If you don't see the traces you want, you can filter by the trace.id. For more help finding your traces in the UI: Understand and use the distributed tracing UI Query distributed trace data Set up Infinite Tracing (advanced option) Standard distributed tracing for APM agents (above) captures up to 10% of your traces, but if you want us to analyze all your data and find the most relevant traces, you can set up Infinite Tracing. This alternative to standard distributed tracing is available for all APM language agents except C SDK. Tip To learn more about this feature, see Infinite Tracing. Before beginning, first ensure you meet the requirements. Step 1. Complete the instrumentation for standard distributed tracing in the quick start above The Infinite Tracing setup builds on the instrumentation step from the Quick start for standard distributed tracing. Step 2. Set up the trace observer The trace observer is a New Relic AWS-based service that collects and analyzes all your traces. Follow the instructions in Set up trace observer. When you're done, return here with your trace observer information and continue with the next step to configure the agent. Step 3: Configure the agent for Infinite Tracing Infinite Tracing configuration settings include the standard distributed tracing plus information about the trace observer. Find the settings for your language agent below: C SDK Infinite tracing is not available for C SDK. Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Infinite Tracing Configuration options: newrelic.Config structure: app, err := newrelic.NewApplication( newrelic.ConfigAppName(YOUR_APP_NAME), newrelic.ConfigLicense(YOUR_LICENSE_KEY), func(cfg *newrelic.Config) { cfg.DistributedTracer.Enabled = true cfg.InfiniteTracing.TraceObserver.Host = YOUR_TRACE_OBSERVER_HOST }, ) Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=YOUR_TRACE_OBSERVER_HOST Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } infinite_tracing: { trace_observer: { host: 'YOUR_TRACE_OBSERVER_HOST' } } Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Infinite Tracing Pull down the libraries with this installation command, and then set up the configuration file or environment variables: pip install newrelic[infinite-tracing] Copy Configuration options: Configuration file (newrelic.ini): distributed_tracing.enabled = true infinite_tracing.trace_observer_host= YOUR_TRACE_OBSERVER_HOST Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. To set up Infinite Tracing, you need to install the Infinite Tracing gem. The gem is available in rubygems.org. For applications using Bundler, additionally include the Infinite Tracing gem in the Gemfile: gem 'newrelic-infinite_tracing' Copy If you're using Rails 3 or higher, or Rails 2.3 in the recommended configuration, Rails will automatically call Bundler.require and cause newrelic-infinite_tracing to be required during startup of your application. If you're using Sinatra or another framework, you must manually call require 'newrelic/infinite_tracing' or manually call Bundler.require. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: 'YOUR_TRACE_OBSERVER_HOST' Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Step 4. (Optional) Customize Infinite Tracing After you add the agent configuration settings, you should start seeing data in the New Relic UI. After you spend some time analyzing your data, you may want to adjust some of the features of Infinite Tracing: Configure trace observer monitoring Configure span attribute trace filter Configure random trace filter Options for older APM agents If you have older APM agents, use this section to figure out if the distributed tracing features you want are supported. Following the compatibility information is a section showing the basic configuration settings to turn on standard distributed tracing. If your older agent supports Infinite Tracing and you want to set it up, see the steps above. Compatibility guide Find your language agents below to confirm if you can use your existing agents with distributed tracing: C SDK Install (compile) or update to the required C SDK version. For best results, update to the latest C SDK version. Option C SDK version Standard distributed tracing 1.1.0 or higher (W3C Trace Context not available) Infinite Tracing Not available Go Install or update to the required Go agent version. For best results, update to the latest Go agent version. Option Go agent version Standard distributed tracing 2.1.0 or higher With W3C Trace Context: 3.1.0 or higher Infinite Tracing v3.5.0 (includes W3C Trace Context) Supported environments: Go 1.9 or higher Java Install or update to the required Java agent version. For best results, update to the latest Java agent version. Important Your JVM's networkaddress.cache.ttl security setting must not be set to forever (i.e. -1). For more information about this networking property, please visit the Oracle Network Properties docs. Type Java agent version Standard distributed tracing 4.3.0 or higher With W3C Trace Context: 5.10 or higher Infinite Tracing 5.12.1 or higher (includes W3C Trace Context) Supported environments: Java 8: Update 252 or higher All versions of Java 9 or higher Tip For special considerations, see Infinite Tracing: Configuring SSL for Java 7 and 8. .NET Install or update to the required .NET agent version. For best results, update to the latest .NET agent version. Option .NET agent version Standard distributed tracing 8.6.45.0 or higher With W3C Trace Context: 8.27.139.0 or higher Infinite Tracing 8.30.0 (includes W3C Trace Context) Supported environments: .NET Framework 4.5 or higher .NET Core 2.0 or higher Node.js Install or update to the required Node.js agent version. For best results, update to the latest Node.js agent version. Option Node.js agent version Standard distributed tracing 4.7.0 or higher With W3C Trace Context: 6.4 or higher Infinite Tracing 7.3.0 (includes W3C Trace Context) Supported environments: Node version 10.10.0 or higher PHP Install or update to the required PHP agent version. For best results, update to the latest PHP agent version. Option PHP agent version Standard distributed tracing 8.4 or higher With W3C Trace Context: 9.8 or higher Infinite Tracing 9.12.0.268 or higher Python Install or update to the required Python agent version. For best results, update to the latest Python agent version. Option Python agent version Standard distributed tracing 4.2.0.100 or higher With W3C Trace Context: 5.6 or higher Infinite Tracing 5.12.0.140 (includes W3C Trace Context) Supported environments: CPython only (pypy is unsupported) Ruby Install or update to the required Ruby agent version. For Infinite Tracing, you also need to install the Infinite Tracing gem. For best results, update to the latest Ruby agent version and Infinite Tracing gem version, if applicable. Option Ruby agent version Standard distributed tracing newrelic_rpm 5.3.0.346 or higher With W3C Trace Context: newrelic_rpm 6.9 or higher Infinite Tracing newrelic_rpm 7.0.0 or higher (includes W3C Trace Context) newrelic-infinite_tracing 7.0.0 or higher Supported environments: Ruby 2.5 or higher Configure standard distributed tracing for your older agents Distributed tracing is enabled through configuration settings. Review the following agent-specific sections. For general help with agent configurations, see Configure the agent. Important Server-side configuration is not available for Infinite Tracing. C SDK Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your C applications. Type Required configuration Standard distributed tracing Configuration options: newrelic_app_config_t structure: newrelic_app_config_t* config; config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Standard distributed tracing Configuration options: ConfigOption structure: newrelic.NewApplication( newrelic.ConfigAppName(\"Example App\"), newrelic.ConfigLicense(os.Getenv(\"NEW_RELIC_LICENSE_KEY\")), newrelic.ConfigDistributedTracerEnabled(true), ) Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> </configuration> Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Standard distributed tracing Configuration file (newrelic.ini): distributed_tracing.enabled = true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Tip If you need help with proxy configuration, see Proxy support. Manual instrumentation (If automatic instrumentation doesn't work) Recommendation: Before performing any custom instrumentation, read: How distributed tracing works Troubleshoot missing data If a service is not passing the trace header to other services, you can use the distributed tracing payload APIs to instrument the calling service and the called service. The calling service uses an API call to generate a payload, which is accepted by the called service. Instrument the calling service To instrument the calling service: Ensure the version of the APM agent that monitors the calling service supports distributed tracing. Invoke the agent API call for generating a distributed trace payload: C SDK | Go | Java | .NET | Node.js | PHP | Python | Ruby. Important To maintain proper ordering of spans in a trace, ensure you generate the payload in the context of the span that sends it. Add that payload to the call made to the destination service (for example, in a header). (Optional) Identify the call as an external call: C SDK Go Java .NET: n/a Node.js PHP: n/a Python Ruby Instrument the called service To instrument the called service: Ensure the version of the APM agent that monitors the called service supports distributed tracing. If the New Relic agent on the called service does not identify a New Relic transaction, use the agent API to declare a transaction: C SDK One way to tell that a transaction is not in progress: when newrelic_create_distributed_trace_payload() is called, a NULL pointer is returned. To solve this problem, follow the procedures to create a transaction with the C SDK. Go One way to tell that a transaction is not in progress: when Transaction.InsertDistributedTraceHeaders(h http.Header) is called, no headers are inserted. To create a transaction, see Instrument Go transactions. Java One way to tell that a transaction is not in progress: when Transaction.insertDistributedTraceHeaders(Headers) is called, no headers are inserted (this API requires agent 6.4.0+). To create a transaction, see Java agent transaction-related APIs. .NET One way to tell that a transaction is not in progress: CreateDistributedTracePayload() returns an empty payload. To create a transaction, see Introduction to .NET custom instrumentation. Node.js One way to tell that a transaction is not in progress: the Node.js agent logs will report an error similar to this: No transaction found when calling Transaction.acceptDistributedTracePayload. Copy Use startWebTransaction to create a web transaction or startBackgroundTransaction to capture a non-web transaction. PHP One way to tell that a transaction is not in progress: newrelic_insert_distributed_trace_headers() returns false. To create a transaction, see newrelic_start_transaction. Python To tell that a transaction is not in progress: when transaction = current_transaction() is run, transaction is None. Or, if result = accept_distributed_trace_payload(payload) is run, then the result is False. Use background_task to report a non-web transaction. For more on Python instrumentation, see Monitor transactions and segments. Ruby If you are using a Rack-based web framework and have enabled New Relic's Rack instrumentation, the Ruby agent will handle starting a transaction for you. For other use cases, see the add_transaction_tracer API method. Extract the payload from the call that you received (for example, in a header). Invoke the call for accepting the payload: C SDK | Go | Java | .NET | PHP | Node.js | Python | Ruby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.93832,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Language <em>agents</em> and distributed tracing",
        "sections": "<em>Configure</em> standard distributed tracing for your older <em>agents</em>",
        "tags": "Enable and <em>configure</em>",
        "body": " for the <em>PHP</em> <em>agent</em> Type Required <em>configuration</em> Infinite Tracing <em>Configuration</em> options: <em>Configuration</em> file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= &quot;YOUR_TRACE_OBSERVER_HOST&quot; Copy Python Here"
      },
      "id": "6072a66564441fb28e9d8595"
    }
  ],
  "/docs/agents/php-agent/configuration/php-directory-ini-settings": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-09-20T16:33:16Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.00523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.93378,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Language agents and distributed tracing",
        "Tip",
        "Quick start for standard distributed tracing (recommended):",
        "Step 1. Identify services",
        "Step 2. Instrument each service with an APM agent",
        "Step 3. View traces",
        "View traces that include a specific service",
        "View traces across accounts",
        "Set up Infinite Tracing (advanced option)",
        "Step 1. Complete the instrumentation for standard distributed tracing in the quick start above",
        "Step 2. Set up the trace observer",
        "Step 3: Configure the agent for Infinite Tracing",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Step 4. (Optional) Customize Infinite Tracing",
        "Options for older APM agents",
        "Compatibility guide",
        "Important",
        "Configure standard distributed tracing for your older agents",
        "Manual instrumentation (If automatic instrumentation doesn't work)",
        "Instrument the calling service",
        "Instrument the called service"
      ],
      "title": "Language agents and distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "b87eacf981bfae09990c95604ba3b7fc19741a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/language-agents-enable-distributed-tracing/",
      "published_at": "2021-09-20T09:46:46Z",
      "updated_at": "2021-09-14T09:14:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby. Each of these offers several ways to leverage the power of distributed tracing: Quick start for standard distributed tracing (recommended): A fast way to get started Infinite Tracing: An advanced alternative to standard distributed tracing Older APM agents: Tracing options if you have older APM agents Manual instrumentation: Tips if automatic instrumentation doesn't work Tip If you want to get more background before getting started, check out these topics: How span sampling works explains distributed tracing options. Impacts to APM tells you what to expect if you are a current APM user but haven't set up distributed tracing. Quick start for standard distributed tracing (recommended): This is the best approach to set up standard distributed tracing if you haven't installed any APM agents for your services yet, or if you want to instrument additional services. Tip You'll need a New Relic account to set up distributed tracing. If you don't already have one, you can quickly create a free account. Step 1. Identify services Figure out which services you want to instrument so they each send trace data to New Relic. Step 2. Instrument each service with an APM agent We have installation assistants for a variety of languages to help you instrument each service. You should run the installation assistant for each service you want to instrument to ensure that each installation has a unique application name. To start the assistant, click the link for your language: APM: C APM: Golang APM: Java APM: .NET APM: Node.js APM: PHP APM: Python APM: Ruby Tip This quick-start approach with the installation assistant automatically enables distributed tracing for each service you run it on, but if you already have a APM agent that you want to participate in distributed tracing, you'll need to manually enable distributed tracing. See Options for older APM agents. Step 3. View traces After you instrument each of your services with APM agents, generate some traffic in your application so we can capture some traces. Here are two ways to view your traces in the UI: View traces that include a specific service Here's one way you can see traces for a particular service: Go to one.newrelic.com. Click APM in the top menu bar. Click your service. In the left navigation's Monitor section, click Distributed tracing. If you don't see the traces you want, you can filter by the trace.id. View traces across accounts This option allows you to search all traces across all New Relic accounts in your organization that you have access to. Go to one.newrelic.com. Click Browse data in the top menu bar, and then click Traces. Select your entity in the left pane. If you don't see the traces you want, you can filter by the trace.id. For more help finding your traces in the UI: Understand and use the distributed tracing UI Query distributed trace data Set up Infinite Tracing (advanced option) Standard distributed tracing for APM agents (above) captures up to 10% of your traces, but if you want us to analyze all your data and find the most relevant traces, you can set up Infinite Tracing. This alternative to standard distributed tracing is available for all APM language agents except C SDK. Tip To learn more about this feature, see Infinite Tracing. Before beginning, first ensure you meet the requirements. Step 1. Complete the instrumentation for standard distributed tracing in the quick start above The Infinite Tracing setup builds on the instrumentation step from the Quick start for standard distributed tracing. Step 2. Set up the trace observer The trace observer is a New Relic AWS-based service that collects and analyzes all your traces. Follow the instructions in Set up trace observer. When you're done, return here with your trace observer information and continue with the next step to configure the agent. Step 3: Configure the agent for Infinite Tracing Infinite Tracing configuration settings include the standard distributed tracing plus information about the trace observer. Find the settings for your language agent below: C SDK Infinite tracing is not available for C SDK. Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Infinite Tracing Configuration options: newrelic.Config structure: app, err := newrelic.NewApplication( newrelic.ConfigAppName(YOUR_APP_NAME), newrelic.ConfigLicense(YOUR_LICENSE_KEY), func(cfg *newrelic.Config) { cfg.DistributedTracer.Enabled = true cfg.InfiniteTracing.TraceObserver.Host = YOUR_TRACE_OBSERVER_HOST }, ) Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=YOUR_TRACE_OBSERVER_HOST Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } infinite_tracing: { trace_observer: { host: 'YOUR_TRACE_OBSERVER_HOST' } } Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Infinite Tracing Pull down the libraries with this installation command, and then set up the configuration file or environment variables: pip install newrelic[infinite-tracing] Copy Configuration options: Configuration file (newrelic.ini): distributed_tracing.enabled = true infinite_tracing.trace_observer_host= YOUR_TRACE_OBSERVER_HOST Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. To set up Infinite Tracing, you need to install the Infinite Tracing gem. The gem is available in rubygems.org. For applications using Bundler, additionally include the Infinite Tracing gem in the Gemfile: gem 'newrelic-infinite_tracing' Copy If you're using Rails 3 or higher, or Rails 2.3 in the recommended configuration, Rails will automatically call Bundler.require and cause newrelic-infinite_tracing to be required during startup of your application. If you're using Sinatra or another framework, you must manually call require 'newrelic/infinite_tracing' or manually call Bundler.require. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: 'YOUR_TRACE_OBSERVER_HOST' Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Step 4. (Optional) Customize Infinite Tracing After you add the agent configuration settings, you should start seeing data in the New Relic UI. After you spend some time analyzing your data, you may want to adjust some of the features of Infinite Tracing: Configure trace observer monitoring Configure span attribute trace filter Configure random trace filter Options for older APM agents If you have older APM agents, use this section to figure out if the distributed tracing features you want are supported. Following the compatibility information is a section showing the basic configuration settings to turn on standard distributed tracing. If your older agent supports Infinite Tracing and you want to set it up, see the steps above. Compatibility guide Find your language agents below to confirm if you can use your existing agents with distributed tracing: C SDK Install (compile) or update to the required C SDK version. For best results, update to the latest C SDK version. Option C SDK version Standard distributed tracing 1.1.0 or higher (W3C Trace Context not available) Infinite Tracing Not available Go Install or update to the required Go agent version. For best results, update to the latest Go agent version. Option Go agent version Standard distributed tracing 2.1.0 or higher With W3C Trace Context: 3.1.0 or higher Infinite Tracing v3.5.0 (includes W3C Trace Context) Supported environments: Go 1.9 or higher Java Install or update to the required Java agent version. For best results, update to the latest Java agent version. Important Your JVM's networkaddress.cache.ttl security setting must not be set to forever (i.e. -1). For more information about this networking property, please visit the Oracle Network Properties docs. Type Java agent version Standard distributed tracing 4.3.0 or higher With W3C Trace Context: 5.10 or higher Infinite Tracing 5.12.1 or higher (includes W3C Trace Context) Supported environments: Java 8: Update 252 or higher All versions of Java 9 or higher Tip For special considerations, see Infinite Tracing: Configuring SSL for Java 7 and 8. .NET Install or update to the required .NET agent version. For best results, update to the latest .NET agent version. Option .NET agent version Standard distributed tracing 8.6.45.0 or higher With W3C Trace Context: 8.27.139.0 or higher Infinite Tracing 8.30.0 (includes W3C Trace Context) Supported environments: .NET Framework 4.5 or higher .NET Core 2.0 or higher Node.js Install or update to the required Node.js agent version. For best results, update to the latest Node.js agent version. Option Node.js agent version Standard distributed tracing 4.7.0 or higher With W3C Trace Context: 6.4 or higher Infinite Tracing 7.3.0 (includes W3C Trace Context) Supported environments: Node version 10.10.0 or higher PHP Install or update to the required PHP agent version. For best results, update to the latest PHP agent version. Option PHP agent version Standard distributed tracing 8.4 or higher With W3C Trace Context: 9.8 or higher Infinite Tracing 9.12.0.268 or higher Python Install or update to the required Python agent version. For best results, update to the latest Python agent version. Option Python agent version Standard distributed tracing 4.2.0.100 or higher With W3C Trace Context: 5.6 or higher Infinite Tracing 5.12.0.140 (includes W3C Trace Context) Supported environments: CPython only (pypy is unsupported) Ruby Install or update to the required Ruby agent version. For Infinite Tracing, you also need to install the Infinite Tracing gem. For best results, update to the latest Ruby agent version and Infinite Tracing gem version, if applicable. Option Ruby agent version Standard distributed tracing newrelic_rpm 5.3.0.346 or higher With W3C Trace Context: newrelic_rpm 6.9 or higher Infinite Tracing newrelic_rpm 7.0.0 or higher (includes W3C Trace Context) newrelic-infinite_tracing 7.0.0 or higher Supported environments: Ruby 2.5 or higher Configure standard distributed tracing for your older agents Distributed tracing is enabled through configuration settings. Review the following agent-specific sections. For general help with agent configurations, see Configure the agent. Important Server-side configuration is not available for Infinite Tracing. C SDK Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your C applications. Type Required configuration Standard distributed tracing Configuration options: newrelic_app_config_t structure: newrelic_app_config_t* config; config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Standard distributed tracing Configuration options: ConfigOption structure: newrelic.NewApplication( newrelic.ConfigAppName(\"Example App\"), newrelic.ConfigLicense(os.Getenv(\"NEW_RELIC_LICENSE_KEY\")), newrelic.ConfigDistributedTracerEnabled(true), ) Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> </configuration> Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Standard distributed tracing Configuration file (newrelic.ini): distributed_tracing.enabled = true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Tip If you need help with proxy configuration, see Proxy support. Manual instrumentation (If automatic instrumentation doesn't work) Recommendation: Before performing any custom instrumentation, read: How distributed tracing works Troubleshoot missing data If a service is not passing the trace header to other services, you can use the distributed tracing payload APIs to instrument the calling service and the called service. The calling service uses an API call to generate a payload, which is accepted by the called service. Instrument the calling service To instrument the calling service: Ensure the version of the APM agent that monitors the calling service supports distributed tracing. Invoke the agent API call for generating a distributed trace payload: C SDK | Go | Java | .NET | Node.js | PHP | Python | Ruby. Important To maintain proper ordering of spans in a trace, ensure you generate the payload in the context of the span that sends it. Add that payload to the call made to the destination service (for example, in a header). (Optional) Identify the call as an external call: C SDK Go Java .NET: n/a Node.js PHP: n/a Python Ruby Instrument the called service To instrument the called service: Ensure the version of the APM agent that monitors the called service supports distributed tracing. If the New Relic agent on the called service does not identify a New Relic transaction, use the agent API to declare a transaction: C SDK One way to tell that a transaction is not in progress: when newrelic_create_distributed_trace_payload() is called, a NULL pointer is returned. To solve this problem, follow the procedures to create a transaction with the C SDK. Go One way to tell that a transaction is not in progress: when Transaction.InsertDistributedTraceHeaders(h http.Header) is called, no headers are inserted. To create a transaction, see Instrument Go transactions. Java One way to tell that a transaction is not in progress: when Transaction.insertDistributedTraceHeaders(Headers) is called, no headers are inserted (this API requires agent 6.4.0+). To create a transaction, see Java agent transaction-related APIs. .NET One way to tell that a transaction is not in progress: CreateDistributedTracePayload() returns an empty payload. To create a transaction, see Introduction to .NET custom instrumentation. Node.js One way to tell that a transaction is not in progress: the Node.js agent logs will report an error similar to this: No transaction found when calling Transaction.acceptDistributedTracePayload. Copy Use startWebTransaction to create a web transaction or startBackgroundTransaction to capture a non-web transaction. PHP One way to tell that a transaction is not in progress: newrelic_insert_distributed_trace_headers() returns false. To create a transaction, see newrelic_start_transaction. Python To tell that a transaction is not in progress: when transaction = current_transaction() is run, transaction is None. Or, if result = accept_distributed_trace_payload(payload) is run, then the result is False. Use background_task to report a non-web transaction. For more on Python instrumentation, see Monitor transactions and segments. Ruby If you are using a Rack-based web framework and have enabled New Relic's Rack instrumentation, the Ruby agent will handle starting a transaction for you. For other use cases, see the add_transaction_tracer API method. Extract the payload from the call that you received (for example, in a header). Invoke the call for accepting the payload: C SDK | Go | Java | .NET | PHP | Node.js | Python | Ruby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.93832,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Language <em>agents</em> and distributed tracing",
        "sections": "<em>Configure</em> standard distributed tracing for your older <em>agents</em>",
        "tags": "Enable and <em>configure</em>",
        "body": " for the <em>PHP</em> <em>agent</em> Type Required <em>configuration</em> Infinite Tracing <em>Configuration</em> options: <em>Configuration</em> file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= &quot;YOUR_TRACE_OBSERVER_HOST&quot; Copy Python Here"
      },
      "id": "6072a66564441fb28e9d8595"
    }
  ],
  "/docs/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-09-20T16:33:16Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.0052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " change automatically applies to all APM <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.93375,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Language agents and distributed tracing",
        "Tip",
        "Quick start for standard distributed tracing (recommended):",
        "Step 1. Identify services",
        "Step 2. Instrument each service with an APM agent",
        "Step 3. View traces",
        "View traces that include a specific service",
        "View traces across accounts",
        "Set up Infinite Tracing (advanced option)",
        "Step 1. Complete the instrumentation for standard distributed tracing in the quick start above",
        "Step 2. Set up the trace observer",
        "Step 3: Configure the agent for Infinite Tracing",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Step 4. (Optional) Customize Infinite Tracing",
        "Options for older APM agents",
        "Compatibility guide",
        "Important",
        "Configure standard distributed tracing for your older agents",
        "Manual instrumentation (If automatic instrumentation doesn't work)",
        "Instrument the calling service",
        "Instrument the called service"
      ],
      "title": "Language agents and distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "b87eacf981bfae09990c95604ba3b7fc19741a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/language-agents-enable-distributed-tracing/",
      "published_at": "2021-09-20T09:46:46Z",
      "updated_at": "2021-09-14T09:14:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby. Each of these offers several ways to leverage the power of distributed tracing: Quick start for standard distributed tracing (recommended): A fast way to get started Infinite Tracing: An advanced alternative to standard distributed tracing Older APM agents: Tracing options if you have older APM agents Manual instrumentation: Tips if automatic instrumentation doesn't work Tip If you want to get more background before getting started, check out these topics: How span sampling works explains distributed tracing options. Impacts to APM tells you what to expect if you are a current APM user but haven't set up distributed tracing. Quick start for standard distributed tracing (recommended): This is the best approach to set up standard distributed tracing if you haven't installed any APM agents for your services yet, or if you want to instrument additional services. Tip You'll need a New Relic account to set up distributed tracing. If you don't already have one, you can quickly create a free account. Step 1. Identify services Figure out which services you want to instrument so they each send trace data to New Relic. Step 2. Instrument each service with an APM agent We have installation assistants for a variety of languages to help you instrument each service. You should run the installation assistant for each service you want to instrument to ensure that each installation has a unique application name. To start the assistant, click the link for your language: APM: C APM: Golang APM: Java APM: .NET APM: Node.js APM: PHP APM: Python APM: Ruby Tip This quick-start approach with the installation assistant automatically enables distributed tracing for each service you run it on, but if you already have a APM agent that you want to participate in distributed tracing, you'll need to manually enable distributed tracing. See Options for older APM agents. Step 3. View traces After you instrument each of your services with APM agents, generate some traffic in your application so we can capture some traces. Here are two ways to view your traces in the UI: View traces that include a specific service Here's one way you can see traces for a particular service: Go to one.newrelic.com. Click APM in the top menu bar. Click your service. In the left navigation's Monitor section, click Distributed tracing. If you don't see the traces you want, you can filter by the trace.id. View traces across accounts This option allows you to search all traces across all New Relic accounts in your organization that you have access to. Go to one.newrelic.com. Click Browse data in the top menu bar, and then click Traces. Select your entity in the left pane. If you don't see the traces you want, you can filter by the trace.id. For more help finding your traces in the UI: Understand and use the distributed tracing UI Query distributed trace data Set up Infinite Tracing (advanced option) Standard distributed tracing for APM agents (above) captures up to 10% of your traces, but if you want us to analyze all your data and find the most relevant traces, you can set up Infinite Tracing. This alternative to standard distributed tracing is available for all APM language agents except C SDK. Tip To learn more about this feature, see Infinite Tracing. Before beginning, first ensure you meet the requirements. Step 1. Complete the instrumentation for standard distributed tracing in the quick start above The Infinite Tracing setup builds on the instrumentation step from the Quick start for standard distributed tracing. Step 2. Set up the trace observer The trace observer is a New Relic AWS-based service that collects and analyzes all your traces. Follow the instructions in Set up trace observer. When you're done, return here with your trace observer information and continue with the next step to configure the agent. Step 3: Configure the agent for Infinite Tracing Infinite Tracing configuration settings include the standard distributed tracing plus information about the trace observer. Find the settings for your language agent below: C SDK Infinite tracing is not available for C SDK. Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Infinite Tracing Configuration options: newrelic.Config structure: app, err := newrelic.NewApplication( newrelic.ConfigAppName(YOUR_APP_NAME), newrelic.ConfigLicense(YOUR_LICENSE_KEY), func(cfg *newrelic.Config) { cfg.DistributedTracer.Enabled = true cfg.InfiniteTracing.TraceObserver.Host = YOUR_TRACE_OBSERVER_HOST }, ) Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=YOUR_TRACE_OBSERVER_HOST Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } infinite_tracing: { trace_observer: { host: 'YOUR_TRACE_OBSERVER_HOST' } } Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Infinite Tracing Pull down the libraries with this installation command, and then set up the configuration file or environment variables: pip install newrelic[infinite-tracing] Copy Configuration options: Configuration file (newrelic.ini): distributed_tracing.enabled = true infinite_tracing.trace_observer_host= YOUR_TRACE_OBSERVER_HOST Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. To set up Infinite Tracing, you need to install the Infinite Tracing gem. The gem is available in rubygems.org. For applications using Bundler, additionally include the Infinite Tracing gem in the Gemfile: gem 'newrelic-infinite_tracing' Copy If you're using Rails 3 or higher, or Rails 2.3 in the recommended configuration, Rails will automatically call Bundler.require and cause newrelic-infinite_tracing to be required during startup of your application. If you're using Sinatra or another framework, you must manually call require 'newrelic/infinite_tracing' or manually call Bundler.require. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: 'YOUR_TRACE_OBSERVER_HOST' Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Step 4. (Optional) Customize Infinite Tracing After you add the agent configuration settings, you should start seeing data in the New Relic UI. After you spend some time analyzing your data, you may want to adjust some of the features of Infinite Tracing: Configure trace observer monitoring Configure span attribute trace filter Configure random trace filter Options for older APM agents If you have older APM agents, use this section to figure out if the distributed tracing features you want are supported. Following the compatibility information is a section showing the basic configuration settings to turn on standard distributed tracing. If your older agent supports Infinite Tracing and you want to set it up, see the steps above. Compatibility guide Find your language agents below to confirm if you can use your existing agents with distributed tracing: C SDK Install (compile) or update to the required C SDK version. For best results, update to the latest C SDK version. Option C SDK version Standard distributed tracing 1.1.0 or higher (W3C Trace Context not available) Infinite Tracing Not available Go Install or update to the required Go agent version. For best results, update to the latest Go agent version. Option Go agent version Standard distributed tracing 2.1.0 or higher With W3C Trace Context: 3.1.0 or higher Infinite Tracing v3.5.0 (includes W3C Trace Context) Supported environments: Go 1.9 or higher Java Install or update to the required Java agent version. For best results, update to the latest Java agent version. Important Your JVM's networkaddress.cache.ttl security setting must not be set to forever (i.e. -1). For more information about this networking property, please visit the Oracle Network Properties docs. Type Java agent version Standard distributed tracing 4.3.0 or higher With W3C Trace Context: 5.10 or higher Infinite Tracing 5.12.1 or higher (includes W3C Trace Context) Supported environments: Java 8: Update 252 or higher All versions of Java 9 or higher Tip For special considerations, see Infinite Tracing: Configuring SSL for Java 7 and 8. .NET Install or update to the required .NET agent version. For best results, update to the latest .NET agent version. Option .NET agent version Standard distributed tracing 8.6.45.0 or higher With W3C Trace Context: 8.27.139.0 or higher Infinite Tracing 8.30.0 (includes W3C Trace Context) Supported environments: .NET Framework 4.5 or higher .NET Core 2.0 or higher Node.js Install or update to the required Node.js agent version. For best results, update to the latest Node.js agent version. Option Node.js agent version Standard distributed tracing 4.7.0 or higher With W3C Trace Context: 6.4 or higher Infinite Tracing 7.3.0 (includes W3C Trace Context) Supported environments: Node version 10.10.0 or higher PHP Install or update to the required PHP agent version. For best results, update to the latest PHP agent version. Option PHP agent version Standard distributed tracing 8.4 or higher With W3C Trace Context: 9.8 or higher Infinite Tracing 9.12.0.268 or higher Python Install or update to the required Python agent version. For best results, update to the latest Python agent version. Option Python agent version Standard distributed tracing 4.2.0.100 or higher With W3C Trace Context: 5.6 or higher Infinite Tracing 5.12.0.140 (includes W3C Trace Context) Supported environments: CPython only (pypy is unsupported) Ruby Install or update to the required Ruby agent version. For Infinite Tracing, you also need to install the Infinite Tracing gem. For best results, update to the latest Ruby agent version and Infinite Tracing gem version, if applicable. Option Ruby agent version Standard distributed tracing newrelic_rpm 5.3.0.346 or higher With W3C Trace Context: newrelic_rpm 6.9 or higher Infinite Tracing newrelic_rpm 7.0.0 or higher (includes W3C Trace Context) newrelic-infinite_tracing 7.0.0 or higher Supported environments: Ruby 2.5 or higher Configure standard distributed tracing for your older agents Distributed tracing is enabled through configuration settings. Review the following agent-specific sections. For general help with agent configurations, see Configure the agent. Important Server-side configuration is not available for Infinite Tracing. C SDK Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your C applications. Type Required configuration Standard distributed tracing Configuration options: newrelic_app_config_t structure: newrelic_app_config_t* config; config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Standard distributed tracing Configuration options: ConfigOption structure: newrelic.NewApplication( newrelic.ConfigAppName(\"Example App\"), newrelic.ConfigLicense(os.Getenv(\"NEW_RELIC_LICENSE_KEY\")), newrelic.ConfigDistributedTracerEnabled(true), ) Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> </configuration> Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Standard distributed tracing Configuration file (newrelic.ini): distributed_tracing.enabled = true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Tip If you need help with proxy configuration, see Proxy support. Manual instrumentation (If automatic instrumentation doesn't work) Recommendation: Before performing any custom instrumentation, read: How distributed tracing works Troubleshoot missing data If a service is not passing the trace header to other services, you can use the distributed tracing payload APIs to instrument the calling service and the called service. The calling service uses an API call to generate a payload, which is accepted by the called service. Instrument the calling service To instrument the calling service: Ensure the version of the APM agent that monitors the calling service supports distributed tracing. Invoke the agent API call for generating a distributed trace payload: C SDK | Go | Java | .NET | Node.js | PHP | Python | Ruby. Important To maintain proper ordering of spans in a trace, ensure you generate the payload in the context of the span that sends it. Add that payload to the call made to the destination service (for example, in a header). (Optional) Identify the call as an external call: C SDK Go Java .NET: n/a Node.js PHP: n/a Python Ruby Instrument the called service To instrument the called service: Ensure the version of the APM agent that monitors the called service supports distributed tracing. If the New Relic agent on the called service does not identify a New Relic transaction, use the agent API to declare a transaction: C SDK One way to tell that a transaction is not in progress: when newrelic_create_distributed_trace_payload() is called, a NULL pointer is returned. To solve this problem, follow the procedures to create a transaction with the C SDK. Go One way to tell that a transaction is not in progress: when Transaction.InsertDistributedTraceHeaders(h http.Header) is called, no headers are inserted. To create a transaction, see Instrument Go transactions. Java One way to tell that a transaction is not in progress: when Transaction.insertDistributedTraceHeaders(Headers) is called, no headers are inserted (this API requires agent 6.4.0+). To create a transaction, see Java agent transaction-related APIs. .NET One way to tell that a transaction is not in progress: CreateDistributedTracePayload() returns an empty payload. To create a transaction, see Introduction to .NET custom instrumentation. Node.js One way to tell that a transaction is not in progress: the Node.js agent logs will report an error similar to this: No transaction found when calling Transaction.acceptDistributedTracePayload. Copy Use startWebTransaction to create a web transaction or startBackgroundTransaction to capture a non-web transaction. PHP One way to tell that a transaction is not in progress: newrelic_insert_distributed_trace_headers() returns false. To create a transaction, see newrelic_start_transaction. Python To tell that a transaction is not in progress: when transaction = current_transaction() is run, transaction is None. Or, if result = accept_distributed_trace_payload(payload) is run, then the result is False. Use background_task to report a non-web transaction. For more on Python instrumentation, see Monitor transactions and segments. Ruby If you are using a Rack-based web framework and have enabled New Relic's Rack instrumentation, the Ruby agent will handle starting a transaction for you. For other use cases, see the add_transaction_tracer API method. Extract the payload from the call that you received (for example, in a header). Invoke the call for accepting the payload: C SDK | Go | Java | .NET | PHP | Node.js | Python | Ruby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.938286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Language <em>agents</em> and distributed tracing",
        "sections": "<em>Configure</em> standard distributed tracing for your older <em>agents</em>",
        "tags": "Enable and <em>configure</em>",
        "body": " for the <em>PHP</em> <em>agent</em> Type Required <em>configuration</em> Infinite Tracing <em>Configuration</em> options: <em>Configuration</em> file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= &quot;YOUR_TRACE_OBSERVER_HOST&quot; Copy Python Here"
      },
      "id": "6072a66564441fb28e9d8595"
    }
  ],
  "/docs/agents/php-agent/features/browser-monitoring-php-agent": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.41882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84833,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.98433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    }
  ],
  "/docs/agents/php-agent/features/distributed-tracing-php-agent": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.418816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.8483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-09-20T09:04:11Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.87648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    }
  ],
  "/docs/agents/php-agent/features/multiple-accounts": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.418816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.8483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-09-20T09:04:11Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.87648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    }
  ],
  "/docs/agents/php-agent/features/php-custom-instrumentation": [
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.41881,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-09-20T09:04:11Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.87648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    }
  ],
  "/docs/agents/php-agent/features/recording-deployments-using-php-script": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-09-20T09:04:11Z",
      "updated_at": "2021-07-09T12:32:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.87648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.98427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/analyze-phpunit-test-data-new-relic": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.46751,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/aws-elastic-beanstalk-installation-php": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.46751,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.46751,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-09-20T09:10:44Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.46742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/guzzle": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.4675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-09-20T09:10:44Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.46742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/php-frameworks-integrate-support-new-relic": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28928,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.4675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/predis-library-php": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.26971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28928,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.4675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-09-20T09:08:06Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.2697,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.28918,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility <em>and</em> requirements for the Java <em>agent</em>",
        "sections": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s Java <em>agent</em> includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, <em>frameworks</em>, databases, and message queuing systems. For <em>frameworks</em> and <em>libraries</em> that are not instrumented out of the box, you can extend the <em>agent</em> with Java custom"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-09-20T09:09:22Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.4675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/agents/php-agent/getting-started/apm-agent-security-php": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.64282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.03785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " party package or module that is not instrumented automatically by the <em>agent</em>. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, <em>get</em> support at support.newrelic.com. Web frameworks"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.94455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/php-agent/getting-started/introduction-new-relic-php": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.64279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.03778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " party package or module that is not instrumented automatically by the <em>agent</em>. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, <em>get</em> support at support.newrelic.com. Web frameworks"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.94449,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/php-agent/getting-started/new-relic-daemon-processes": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.64279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.03778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " party package or module that is not instrumented automatically by the <em>agent</em>. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, <em>get</em> support at support.newrelic.com. Web frameworks"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.94449,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.03771,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " party package or module that is not instrumented automatically by the <em>agent</em>. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, <em>get</em> support at support.newrelic.com. Web frameworks"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-09-20T19:22:09Z",
      "updated_at": "2021-09-20T19:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to latest 1.x HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 1.0 Scala 2.13: 0.21 - 1.0 HTTP4s Blaze server Scala 2.12: 0.21 Scala 2.13: 0.21 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.94441,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "521da8f62e16ad0899ae6db9916e19bb8aa1ab3d",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-09-20T09:13:26Z",
      "updated_at": "2021-07-27T04:40:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.32002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "603e8f6564441f32f24e8843"
    }
  ],
  "/docs/agents/php-agent/index": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.5784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-09-20T14:22:42Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 72.136986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the <em>PHP</em> <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of attributes"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.46466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.24694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.46466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.24694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-overview": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.46463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.24693,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-tar-file": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.46463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.24693,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-ubuntu-debian": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.46463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.984024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.24693,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/installation/update-php-agent": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.4646,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.98399,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-09-20T09:06:51Z",
      "updated_at": "2021-08-27T09:24:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.246925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> <em>installation</em>. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/index": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 850.7583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 543.92004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 530.97614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_parameter": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59357,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.7386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_tracer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59357,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.7386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_background_job": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_capture_params": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_disable_autorum": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_of_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_footer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_header": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_apdex": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.960526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_name_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59329,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_notice_error": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-09-20T13:34:33Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96048,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_custom_event": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_datastore_segment": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_appname": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_user_attributes": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.738594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_start_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicaddcustomspanparameter-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccreatedistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-09-20T13:34:33Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgetlinkingmetadata": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.5929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-09-20T09:48:56Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicissampled": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.59283,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-09-20T10:54:56Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.73859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-09-20T13:34:33Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.96047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/agent-stops-working-after-updating-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13701,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/checking-loaded-configuration-files-directory": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32971,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13701,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting-while-using-selinux": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32968,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/determine-permissions-requirements-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/first-php-transaction-not-reported": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/generating-logs-troubleshooting-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.329605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/ini-settings-not-taking-effect-immediately": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.329605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/missing-php-module": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.329575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/no-data-appears-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.329575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-agent-not-reporting-errors": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43539,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43539,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/protocol-mismatch-error": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.3295,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.3295,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.435356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/threaded-apache-worker-mpms": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32947,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.1366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/transactions-named-indexphp-or-unknown": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32947,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.1366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/troubleshoot-php-agent-instance-count": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.136536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/uninstrumented-time-traces": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.136536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/using-phpinfo-verify-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.136475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/verifying-php-daemon": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.136475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/why-when-restart-your-web-server-php": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-09-21T16:27:28Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.32936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-09-20T09:13:25Z",
      "updated_at": "2021-09-13T21:31:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.43523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " (See macOS <em>troubleshooting</em> notes.) Since modern versions of macOS can&#x27;t run 32-bit applications, New Relic removed support for 32-bit macOS with <em>PHP</em> <em>agent</em> release 4.6. FreeBSD (x64) The latest <em>agent</em> supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported <em>PHP</em>"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting",
        "For more help"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-09-20T19:22:08Z",
      "updated_at": "2021-09-20T19:22:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "body": ", then you must make sure you disable or uninstall all of the <em>agents</em> associated with that entity. You have problems removing your <em>PHP</em> app If you have a <em>PHP</em> app and aren&#x27;t able to remove it from the UI, possible causes include: You have not disabled both components of the <em>PHP</em> <em>agent</em>. You must stop"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    }
  ],
  "/docs/agents/python-agent/api-guides/guide-using-python-agent-api": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.3914,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, get support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-<em>API</em> 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-09-20T11:22:26Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.21999,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-20T08:38:14Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.20935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/asyncpg": [
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-09-20T11:58:29Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.32846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-09-20T11:38:08Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.00063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.3914,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrumented</em> <em>Python</em> packages",
        "sections": "<em>Instrumented</em> <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document lists the packages and modules automatically instrumented by the <em>Python</em> <em>agent</em> after you install it. You can also use custom <em>instrumentation</em> if you want to: Disable <em>instrumentation</em> for specific packages or modules if the <em>instrumentation</em> interferes with your app. <em>Instrument</em> a-third"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/django-asgi-mode": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-09-20T11:38:08Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.95985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-09-20T11:58:29Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.32846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.39133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrumented</em> <em>Python</em> packages",
        "sections": "<em>Instrumented</em> <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document lists the packages and modules automatically instrumented by the <em>Python</em> <em>agent</em> after you install it. You can also use custom <em>instrumentation</em> if you want to: Disable <em>instrumentation</em> for specific packages or modules if the <em>instrumentation</em> interferes with your app. <em>Instrument</em> a-third"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    }
  ],
  "/docs/agents/python-agent/attributes/enabling-disabling-attributes-python": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.58,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " rendering. GraphQL Frameworks The <em>Python</em> <em>agent</em> provides insight into your GraphQL application&#x27;s operations and resolvers and reports GraphQL-specific metrics and span <em>attributes</em>. For more information on transaction naming and other features, please view our GraphQL documentation. As of <em>agent</em> version"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.72264,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.72249,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    }
  ],
  "/docs/agents/python-agent/attributes/python-agent-attributes": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.579926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " rendering. GraphQL Frameworks The <em>Python</em> <em>agent</em> provides insight into your GraphQL application&#x27;s operations and resolvers and reports GraphQL-specific metrics and span <em>attributes</em>. For more information on transaction naming and other features, please view our GraphQL documentation. As of <em>agent</em> version"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.722565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.7224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    }
  ],
  "/docs/agents/python-agent/attributes/python-attribute-examples": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-09-20T19:44:40Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.579926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " rendering. GraphQL Frameworks The <em>Python</em> <em>agent</em> provides insight into your GraphQL application&#x27;s operations and resolvers and reports GraphQL-specific metrics and span <em>attributes</em>. For more information on transaction naming and other features, please view our GraphQL documentation. As of <em>agent</em> version"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-09-20T19:34:54Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.722565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.NET)",
        "sections": "Enable and disable <em>attributes</em> (.NET)",
        "tags": "<em>Agents</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .NET <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-09-20T19:34:52Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.7224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET custom <em>attributes</em>",
        "sections": ".NET custom <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    }
  ]
}