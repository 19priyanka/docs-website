---
title: Get started with Auto-Telemetry with Pixie
tags:
  - Pixie Auto-Telemetry
  - Agentless APM
translate:
  - jp
metaDescription: 
redirects:
  - /docs/full-stack-observability/get-started-auto-telemetry-pixie
---

## Introducting Auto-Telemetry with Pixie

<Callout variant="important">
This is a beta release. As such... <add beta messaging>
</Callout>

With the launch of this beta, New Relic Kubernetes customers now have an alternative to manual instrumentation of services on their clusters, using Pixie Cloud. Pixie collects telemetry data using a virtual machine-like construct in the Linux kernel, eBPF. eBPF makes it easy to collect baseline data about their clusters without needing to manually instrument, change code, configure GUIs, or move data off clusters, like we see with traditional New Relic agents.

On May 25th, customers will see an option in the guided installation process to set up their Kubernetes Clusters by including the Pixie Beta alongside the New Relic Infrastructure agent in their Helm chart or Manifest file. 

The New Relic Pixie integration is not capturing all the data, we are capturing metrics and spans that give an overview of how the service is performing, which allows the customer to find problematic areas. Once they have spotted an issue, they might be able to figure it out through data captured in New Relic. However in many cases the issue will need to be debugged in Pixie by diving deeping into the actual requests (headers, content). The headers and content can contain personal information, which stays in the customer's Kubernetes cluster and is not sent to New Relic. In the Pixie UI they can query that information though PXL scripts.


What is Pixie auto-telemetry?
Benefits to New Relic customers (why it matters)
get observability into Kubernetes services without installing an APM agent 
run a single command to deploy the new Kubernetes experience
Benefits to existing Pixie customers
Integrate Pixie data into New Relic
Data retention
Alerting
Capabilities of the Pixie integration
get visibility into HTTP services using golden metrics, HTTP transactions, database transactions, distributed tracing and JVM metrics.
operate, debug and scale Kubernetes cluster by getting insight into how their cluster and services are running. Start from the cluster, go into namespaces, dive deep into deployments and pods, and at each level, see the key metrics and events.
See anomalous behaviour in their services. Dive deeper by installing an APM 

## Install Auto-Telemetry with Pixie and start instrumenting your Kubernetes clusters

Use our [Guided installation](/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/) process to install Auto-Telemetry with Pixie. This process installs Pixie on the cluster together with our Kubernetes integration. You don't need to do any further configuration or installation to start using Pixie.

If you want to install Auto-telemetry with Pixie on multiple clusters, you have to run through the Guided install steps for each individual cluster.

**Before you begin**

The guided install requires a Pixie login and Pixie API key.

Currently, Auto-Telemetry with Pixie requires a New Relic account and a separate Pixie account. You can [create the Pixie account](https://work.withpixie.ai/admin/api-keys) before you begin or when needed as part of the install steps. 

### Start the guided installation

1. From [New Relic One](https://one.newrelic.com), click **Add more data**.
2. Click the **Guided install** button. 
3. Select the account you want to use for the guided install, and click **Continue**.
4. Select **Kubernetes.**
5. Type in a name for your cluster, and select the check box to **Gather telemetry automatically with Pixie beta**.

<Callout variant="important">
As noted in the Guided install UI, you'll get the best performance if you keep your clusters below 100 nodes. Getting up above 100 nodes can lead to excessive memory usage and scripts failing to run. And, this is a friendly reminder that autoscaling can quickly drive up your node numbers.
</Callout>

    If Pixie is already running on your cluster, expand the **Advanced options** section and select the appropriate check boxes, such as **Pixie is already running on this cluster** and **Enable Pixie auto update**.

    Click **Continue**.

6. Provide your Pixie API key. If you already have a key, simply paste it in the **API key** box, and click **Continue**. 

If you don't have an account and existing API key, click the link to [create a Pixie account](https://work.withpixie.ai/admin/api-keys) and then on the [API key page](https://work.withpixie.ai/admin/api-keys), click **NEW KEY** to add a new key. In the **Actions** column, click the ellipsis, and then click **Copy value**. Switch back to the New Relic installation UI, paste the value in the **API key** box, and click **Continue**.

When you click **Continue**, the API key is added to your New Relic account, and a deploy key is created for Pixie as well. Your Pixie account information is now stored on your New Relic account; if you follow the install steps again, you won't be asked for this information. 

7. On the **Choose install method** page, copy the Helm command that's provided, and then run it on your command line. Helm installs the bundle containing the New Relic infrastructure agent, enables prometheus and Kubernetes events, and installs the Pixie integration. This takes a few minutes to complete. 

![Pixie-Helm](./images/helm-pixie.png "Pixie Helm")

You can run `k9s -n newrelic` to see the status of the install to the cluster. 

8. Back in the Guided install, click **Continue** to open the **Listening for data** page. The install will see that data is reported to New Relic. 
9. When you get the message, **See your data**, click **Kubernetes Cluster Explorer** to see your cluster. 

Explore your cluster

In the explorer, you can get a quick view of the nodes in your cluster. You can find information about each pod in he node, including CPU and memory usage. You can also find out what service is running in the pod, what the latency looks like for that service, as well as throughput and error rate. 

If you want to learn more about the service, click **Explore service in Pixie**. This takes you to the Pixie UI, where you can see information about the service. <What would you do there?> 


